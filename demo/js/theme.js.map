{
  "version": 3,
  "sources": ["build/ts/toArr.ts", "build/ts/theme.ts"],
  "sourcesContent": ["export const toArr = (input: any): any[] => Array.from(input);\nexport default toArr;", "import toArr from \"./toArr\";\n\n// Based on [joshwcomeau.com/gatsby/dark-mode/]\nexport let getTheme = (): string | null => {\n    let theme = window.localStorage.getItem(\"theme\");\n    // If the user has explicitly chosen light or dark,\n    // let's use it. Otherwise, this value will be null.\n    if (typeof theme === \"string\") return theme;\n\n    // If they are using a browser/OS that doesn't support\n    // color themes, let's default to 'light'.\n    return null;\n};\n\nexport let setTheme = (theme: string): void => {\n    // If the user has explicitly chosen light or dark, store the default theme\n    if (typeof theme === \"string\") window.localStorage.setItem(\"theme\", theme);\n};\n\nexport let mediaTheme = (): string | null => {\n    // If they haven't been explicitly set, let's check the media query\n    let mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    let hasMediaQueryPreference = typeof mql.matches === \"boolean\";\n    if (hasMediaQueryPreference) return mql.matches ? \"dark\" : \"light\";\n    return null;\n};\n\nlet html = document.querySelector(\"html\");\n// Get theme from html tag, if it has a theme or get it from localStorage\nexport let themeGet = () => {\n    let themeAttr = html.getAttribute(\"data-theme\");\n    if (typeof themeAttr === \"string\" && themeAttr.length) {\n        return themeAttr;\n    }\n\n    return getTheme();\n};\n\n// Set theme in localStorage, as well as in the html tag\nexport let themeSet = (theme: string) => {\n    html.setAttribute(\"data-theme\", theme);\n    html.classList.toggle(\"dark\", theme == \"dark\");\n    setTheme(theme);\n};\n\nexport let runTheme = () => {\n    try {\n        let theme = getTheme();\n        if (theme === null) theme = mediaTheme();\n        theme && themeSet(theme);\n\n        window.matchMedia(\"(prefers-color-scheme: dark)\").addEventListener(\"change\", (e) => {\n            themeSet(e.matches ? \"dark\" : \"light\");\n        });\n\n        window.matchMedia(\"(prefers-color-scheme: light)\").addEventListener(\"change\", (e) => {\n            themeSet(e.matches ? \"light\" : \"dark\");\n        });\n\n    } catch (e) {\n        console.warn(\"Theming isn't available on this browser.\", e);\n    }\n};\n\nlet handler = (() => {\n    document.removeEventListener(\"DOMContentLoaded\", handler);\n    window.removeEventListener(\"load\", handler);\n\n    try {\n        // On theme switcher button click (mouseup is a tiny bit more efficient) toggle the theme between dark and light mode\n        let themeSwitch = toArr(document.querySelectorAll(\".theme-toggle\"));\n        if (themeSwitch[0]) {\n            for (let el of themeSwitch)\n                el.addEventListener(\"click\", () => {\n                    themeSet(themeGet() === \"dark\" ? \"light\" : \"dark\");\n                });\n        }\n    } catch (e) {\n        console.warn(\"Theming seems to break on this browser.\", e);\n    }\n}).bind(this);\n\nrunTheme();\ndocument.addEventListener(\"DOMContentLoaded\", handler);\nwindow.addEventListener(\"load\", handler);"],
  "mappings": "AAAO,GAAM,GAAQ,AAAC,GAAsB,MAAM,KAAK,GAChD,EAAQ,ECER,GAAI,GAAW,IAAqB,CACvC,GAAI,GAAQ,OAAO,aAAa,QAAQ,SAGxC,MAAI,OAAO,IAAU,SAAiB,EAI/B,MAGA,EAAW,AAAC,GAAwB,CAE3C,AAAI,MAAO,IAAU,UAAU,OAAO,aAAa,QAAQ,QAAS,IAG7D,EAAa,IAAqB,CAEzC,GAAI,GAAM,OAAO,WAAW,gCAE5B,MAD8B,OAAO,GAAI,SAAY,UACjB,EAAI,QAAU,OAAS,QACpD,MAGP,EAAO,SAAS,cAAc,QAEvB,EAAW,IAAM,CACxB,GAAI,GAAY,EAAK,aAAa,cAClC,MAAI,OAAO,IAAc,UAAY,EAAU,OACpC,EAGJ,KAIA,EAAW,AAAC,GAAkB,CACrC,EAAK,aAAa,aAAc,GAChC,EAAK,UAAU,OAAO,OAAQ,GAAS,QACvC,EAAS,IAGF,EAAW,IAAM,CACxB,GAAI,CACA,GAAI,GAAQ,IACZ,AAAI,IAAU,MAAM,GAAQ,KAC5B,GAAS,EAAS,GAElB,OAAO,WAAW,gCAAgC,iBAAiB,SAAU,AAAC,GAAM,CAChF,EAAS,EAAE,QAAU,OAAS,WAGlC,OAAO,WAAW,iCAAiC,iBAAiB,SAAU,AAAC,GAAM,CACjF,EAAS,EAAE,QAAU,QAAU,gBAG9B,EAAP,CACE,QAAQ,KAAK,2CAA4C,KAI7D,EAAW,KAAM,CACjB,SAAS,oBAAoB,mBAAoB,GACjD,OAAO,oBAAoB,OAAQ,GAEnC,GAAI,CAEA,GAAI,GAAc,EAAM,SAAS,iBAAiB,kBAClD,GAAI,EAAY,GACZ,OAAS,KAAM,GACX,EAAG,iBAAiB,QAAS,IAAM,CAC/B,EAAS,MAAe,OAAS,QAAU,gBAGlD,EAAP,CACE,QAAQ,KAAK,0CAA2C,MAE7D,KAAK,QAER,IACA,SAAS,iBAAiB,mBAAoB,GAC9C,OAAO,iBAAiB,OAAQ",
  "names": []
}

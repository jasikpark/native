{
  "version": 3,
  "sources": ["packages/manager/src/api.ts", "packages/emitter/src/api.ts", "packages/animate/src/builtin-effects.ts", "packages/animate/src/css-properties.ts", "packages/animate/src/api.ts", "build/ts/animate.ts"],
  "sourcesContent": ["/**\r\n * Acts as an enhanced version of the Map class with new features and changed behavior for convenience\r\n *\r\n * @typeParam K - the type of keys to store use to store values\r\n * @typeParam V - the type of values to store\r\n * */\r\nexport class Manager<K, V> {\r\n\t/** For backward compatability and performance reasons Manager use Map to store data */\r\n\tpublic map: Map<K, V>;\r\n\tconstructor(value?: Array<[K, V]>) {\r\n\t\tthis.map = new Map(value);\r\n\t}\r\n\r\n\t/** Returns the Manager classes base Map */\r\n\tpublic getMap(): Map<K, V> {\r\n\t\treturn this.map;\r\n\t}\r\n\r\n\t/** Get a value stored in the Manager */\r\n\tpublic get(key: K): V {\r\n\t\treturn this.map.get(key);\r\n\t}\r\n\r\n\t/** Returns the keys of all items stored in the Manager as an Array */\r\n\tpublic keys(): Array<K> {\r\n\t\treturn Array.from(this.map.keys());\r\n\t}\r\n\r\n\t/** Returns the values of all items stored in the Manager as an Array */\r\n\tpublic values(): Array<V> {\r\n\t\treturn Array.from(this.map.values());\r\n\t}\r\n\r\n\t/** Set a value to the Manager using a key */\r\n\tpublic set(key: K, value: V): Manager<K, V> {\r\n\t\tthis.map.set(key, value);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Adds a value to Manager, and uses the current size of the Manager as it's key, it works best when all the key in the Manager are numbers */\r\n\tpublic add(value: V): Manager<K, V> {\r\n\t\tlet size = this.size;\r\n\t\t// @ts-ignore\r\n\t\tlet num: K = size as K;\r\n\t\tthis.set(num, value);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Returns the total number of items stored in the Manager */\r\n\tpublic get size(): number {\r\n\t\treturn this.map.size;\r\n\t}\r\n\r\n\t/** An alias for size */\r\n\tpublic get length(): number {\r\n\t\treturn this.map.size;\r\n\t}\r\n\r\n\t/** Returns the last item in the Manager who's index is a certain distance from the last item in the Manager */\r\n\tpublic last(distance: number = 1): V | undefined {\r\n\t\tlet key = this.keys()[this.size - distance];\r\n\t\treturn this.get(key);\r\n\t}\r\n\r\n\t/** Removes a value stored in the Manager via a key, returns true if an element in the Map object existed and has been removed, or false if the element does not exist */\r\n\tpublic delete(key: K): boolean {\r\n\t\treturn this.map.delete(key);\r\n\t}\r\n\r\n\t/** Removes a value stored in the Manager via a key, returns the Manager class, allowing for chains */\r\n\tpublic remove(key: K): Manager<K, V> {\r\n\t\tthis.map.delete(key);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Clear the Manager of all its contents */\r\n\tpublic clear(): Manager<K, V> {\r\n\t\tthis.map.clear();\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Checks if the Manager contains a certain key */\r\n\tpublic has(key: K): boolean {\r\n\t\treturn this.map.has(key);\r\n\t}\r\n\r\n\t/** Returns a new Iterator object that contains an array of [key, value] for each element in the Map object in insertion order. */\r\n\tpublic entries(): IterableIterator<[K, V]> {\r\n\t\treturn this.map.entries();\r\n\t}\r\n\r\n\t/** Iterates through the Managers contents, calling a callback function every iteration */\r\n\tpublic forEach(\r\n\t\tcallback: (value?: V, key?: K, map?: Map<K, V>) => void,\r\n\t\tcontext?: object\r\n\t): Manager<K, V> {\r\n\t\tthis.map.forEach(callback, context);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Allows for iteration via for..of, learn more: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators] */\r\n\tpublic [Symbol.iterator](): IterableIterator<[K, V]> {\r\n\t\treturn this.entries();\r\n\t}\r\n}\r\n\r\n/**\r\n * Calls the method of a certain name for all items that are currently installed\r\n */\r\nexport const methodCall = (manager: Manager<any, any>, method: string, ...args: any): void => {\r\n\tmanager.forEach((item) => {\r\n\t\t// @ts-ignore\r\n\t\titem[method](...args);\r\n\t});\r\n};\r\n\r\n/**\r\n * Asynchronously calls the method of a certain name for all items that are currently installed, similar to methodCall\r\n */\r\nexport const asyncMethodCall = async (manager: Manager<any, any>, method: string, ...args: any): Promise<void> => {\r\n\tfor (let [, item] of manager) {\r\n\t\t// @ts-ignore\r\n\t\tawait item[method](...args);\r\n\t}\r\n};\r\n\r\nexport default Manager;\r\n", "import { Manager, methodCall } from \"@okikio/manager\";\r\n\r\n/**\r\n * Represents a listener callback function\r\n */\r\nexport type TypeListenerCallback = ((...args: any) => void);\r\n\r\n/** Represents a new event listener consisting of properties like: callback, scope, name */\r\nexport interface IListener {\r\n    readonly callback: TypeListenerCallback;\r\n    readonly scope: object;\r\n    readonly name: string;\r\n}\r\n\r\n/**\r\n * Creates a new listener based on {@link IListener | IListener}\r\n */\r\nexport const newListener = ({\r\n    callback = () => { },\r\n    scope = null,\r\n    name = \"event\",\r\n}: IListener): IListener => ({ callback, scope, name });\r\n\r\n/** Represents a new event  */\r\nexport class Event extends Manager<number, IListener> {\r\n    /** The name of the event */\r\n    public name: string;\r\n    constructor(name: string = \"event\") {\r\n        super();\r\n        this.name = name;\r\n    }\r\n}\r\n\r\n/**\r\n * The types of values `EventEmitter.prototype.on(...), EventEmitter.prototype.once(...), and EventEmitter.prototype.off(...)` accept\r\n */\r\nexport type TypeEventInput = string | object | Array<string>;\r\n\r\n/**\r\n * An Event Emitter\r\n * */\r\nexport class EventEmitter extends Manager<string, Event> {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /** Gets event, if event doesn't exist create a new one */\r\n    public getEvent(name: string): Event {\r\n        let event = this.get(name);\r\n        if (!(event instanceof Event)) {\r\n            this.set(name, new Event(name));\r\n            return this.get(name);\r\n        }\r\n\r\n        return event;\r\n    }\r\n\r\n    /** Creates a listener and adds it to an event */\r\n    public newListener(\r\n        name: string,\r\n        callback: TypeListenerCallback,\r\n        scope: object\r\n    ): Event {\r\n        let event = this.getEvent(name);\r\n        event.add(newListener({ name, callback, scope }));\r\n        return event;\r\n    }\r\n\r\n    /** Adds a listener to a given event */\r\n    public on(\r\n        events: TypeEventInput,\r\n        callback?: TypeListenerCallback | object,\r\n        scope?: object\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (\r\n            typeof events == \"undefined\" ||\r\n            events == null\r\n        ) return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\r\n\r\n        let _name: string;\r\n        let _callback: TypeListenerCallback;\r\n        let isObject = typeof events == \"object\" && !Array.isArray(events);\r\n\r\n        let _scope: object = isObject ? callback : scope;\r\n        if (!isObject) _callback = (callback as TypeListenerCallback);\r\n\r\n        // Loop through the list of events\r\n        Object.keys(events).forEach(key => {\r\n            // Select the name of the event from the list\r\n            // Remember events can be {String | Object | Array<string>}\r\n\r\n            // Check If events is an Object (JSON like Object, and not an Array)\r\n            _name = isObject ? key : events[key];\r\n            if (isObject) _callback = events[key];\r\n\r\n            this.newListener(_name, _callback, _scope);\r\n        }, this);\r\n        return this;\r\n    }\r\n\r\n    /** Removes a listener from an event */\r\n    public removeListener(\r\n        name: string,\r\n        callback: TypeListenerCallback,\r\n        scope: object\r\n    ): Event {\r\n        let event: Event = this.get(name);\r\n        if (event instanceof Event && callback) {\r\n            let listener = newListener({ name, callback, scope });\r\n            event.forEach((value: IListener, i: number) => {\r\n                if (\r\n                    value.callback === listener.callback &&\r\n                    value.scope === listener.scope\r\n                ) return event.remove(i);\r\n            });\r\n        }\r\n\r\n        return event;\r\n    }\r\n\r\n    /** Remove a listener from a given event, or just completely remove an event */\r\n    public off(\r\n        events: TypeEventInput,\r\n        callback?: TypeListenerCallback | object,\r\n        scope?: object\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (\r\n            typeof events == \"undefined\" ||\r\n            events == null\r\n        ) return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\r\n\r\n        let _name: string;\r\n        let _callback: TypeListenerCallback;\r\n        let isObject = typeof events == \"object\" && !Array.isArray(events);\r\n\r\n        let _scope: object = isObject ? callback : scope;\r\n        if (!isObject) _callback = (callback as TypeListenerCallback);\r\n\r\n        // Loop through the list of events\r\n        Object.keys(events).forEach(key => {\r\n            // Select the name of the event from the list\r\n            // Remember events can be {String | Object | Array<any>}\r\n\r\n            // Check If events is an Object (JSON like Object, and not an Array)\r\n            _name = isObject ? key : events[key];\r\n            if (isObject) _callback = events[key];\r\n\r\n            if (typeof _callback === \"function\") {\r\n                this.removeListener(_name, _callback, _scope);\r\n            } else this.remove(_name);\r\n        }, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a one time event listener for an event\r\n     */\r\n    public once(\r\n        events: TypeEventInput,\r\n        callback?: TypeListenerCallback | object,\r\n        scope?: object\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (\r\n            typeof events == \"undefined\" ||\r\n            events == null\r\n        ) return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\r\n\r\n        let isObject = typeof events == \"object\" && !Array.isArray(events);\r\n\r\n        // Loop through the list of events\r\n        Object.keys(events).forEach(key => {\r\n            // Select the name of the event from the list\r\n            // Remember events can be {String | Object | Array<string>}\r\n            // Check If events is an Object (JSON like Object, and not an Array)\r\n            let _name: string = isObject ? key : events[key];\r\n            let _callback: TypeListenerCallback = isObject ? events[key] : (callback as TypeListenerCallback);\r\n            let _scope: object = isObject ? callback : scope;\r\n            let onceFn: TypeListenerCallback = (...args) => {\r\n                _callback.apply(_scope, args);\r\n                this.removeListener(_name, onceFn, _scope);\r\n            };\r\n\r\n            this.newListener(_name, onceFn, _scope);\r\n        }, this);\r\n        return this;\r\n    }\r\n\r\n    /** Call all listeners within an event */\r\n    public emit(\r\n        events: string | Array<any>,\r\n        ...args: any\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (\r\n            typeof events == \"undefined\" ||\r\n            events == null\r\n        ) return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\r\n\r\n        // Loop through the list of events\r\n        events.forEach((event: string) => {\r\n            let _event: Event = this.get(event);\r\n            if (_event instanceof Event) {\r\n                _event.forEach((listener: IListener) => {\r\n                    let { callback, scope } = listener;\r\n                    callback.apply(scope, args);\r\n                });\r\n            }\r\n        }, this);\r\n        return this;\r\n    }\r\n\r\n    /** Clears events and event listeners */\r\n    public clear() {\r\n        methodCall(this, \"clear\");\r\n        super.clear();\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default EventEmitter;\r\n", "/**\r\n * Convert the words \"from\", and \"to\" as well as percentage or numbers to offset value between 0 and 1\r\n */\r\nexport const parseOffset = (input: string | number): number => {\r\n    if (typeof input == \"string\") {\r\n        if (input.includes(\"%\"))\r\n            return parseFloat(input) / 100;\r\n        else if (input == \"from\")\r\n            return 0;\r\n        else if (input == \"to\")\r\n            return 1;\r\n        else\r\n            return parseFloat(input);\r\n    }\r\n\r\n    return input;\r\n};\r\n\r\n/**\r\n * Allows you to quickly convert CSS like JSON into keyframes\r\n *\r\n * @param input - CSS style JSON; check the example to understand what I mean\r\n *\r\n * @example\r\n * ```typescript\r\n * let keyframes = KeyframeParse({\r\n *     \"from, 50%, to\": {\r\n *         opacity: 1\r\n *     },\r\n *\r\n *     \"25%, 0.7\": {\r\n *         opacity: 0\r\n *     }\r\n * });\r\n *\r\n * console.log(keyframes);\r\n * //= [\r\n * //=   { opacity: 1, offset: 0 },\r\n * //=   { opacity: 0, offset: 0.25 },\r\n * //=   { opacity: 1, offset: 0.5 },\r\n * //=   { opacity: 0, offset: 0.7 },\r\n * //=   { opacity: 1, offset: 1 }\r\n * //= ]\r\n * ```\r\n */\r\nexport const KeyframeParse = (input: object): Keyframe[] => {\r\n    // Set removes duplicate Keyframes for the same offset\r\n    let results = new Set<Keyframe>();\r\n    let keys = Object.keys(input);\r\n    let len = keys.length;\r\n    for (let i = 0; i < len; i++) {\r\n        let key = \"\" + keys[i];\r\n        let value = input[key];\r\n        let offsets = key.split(\",\");\r\n        let offsetLen = offsets.length;\r\n\r\n        for (let j = 0; j < offsetLen; j++) {\r\n            let offset = parseOffset(offsets[j]);\r\n            results.add({ ...value, offset });\r\n        }\r\n    }\r\n\r\n    return [...results].sort((a, b) => {\r\n        return a.offset - b.offset;\r\n    });\r\n};\r\n\r\n/**\r\n * I don't really want to put in the effort to create a complete list, so instead just look through the `animate.css` github and copy and paste the effects you need, into using a CSS Keyframe style JSON object, make sure to read the documentation for {@link KeyframeParse}\r\n *\r\n * or\r\n *\r\n * if you just need some quick effects go to [github.com/wellyshen/use-web-animations/](https://github.com/wellyshen/use-web-animations/tree/master/src/animations) and copy the `keyframes` array for the effect you want, remember to say thank you to @wellyshen for all his hardwork, \uD83D\uDE02\r\n *\r\n * @internal\r\n*/\r\nexport const EFFECTS = {};\r\n", "import { mapObject } from \"./api\";\r\nimport { TypeSingleValueCSSProperty, ICSSComputedTransformableProperties } from \"./types\";\r\n\r\n/**\r\n * Returns a closure Function, which adds a unit to numbers but simply returns strings with no edits assuming the value has a unit if it's a string\r\n *\r\n * @param unit - the default unit to give the CSS Value\r\n * @returns\r\n * if value already has a unit (we assume the value has a unit if it's a string), we return it;\r\n * else return the value plus the default unit\r\n */\r\n export const addCSSUnit = (unit: string = \"\") => {\r\n    return (value: string | number) => typeof value == \"string\" ? value : `${value}${unit}`;\r\n}\r\n\r\n/** Function doesn't add any units by default */\r\nexport const UnitLess = addCSSUnit();\r\n\r\n/** Function adds \"px\" unit to numbers */\r\nexport const UnitPX = addCSSUnit(\"px\");\r\n\r\n/** Function adds \"deg\" unit to numbers */\r\nexport const UnitDEG = addCSSUnit(\"deg\");\r\n\r\n/**\r\n * Convert the input to an array\r\n * For strings split them at commas\r\n * For array do nothing\r\n * For everything else wrap the input in an array\r\n */\r\nexport const toArr = (input: any): any[] => {\r\n    if (Array.isArray(input) || typeof input == \"string\") {\r\n        if (typeof input == \"string\") input = input.split(\",\");\r\n        return input;\r\n    }\r\n\r\n    return [input];\r\n}\r\n\r\n/**\r\n * Checks if value is valid/truthy; it counts empty arrays and strings as falsey,\r\n * as well as null and undefined everything else is valid\r\n *\r\n * _**Note:** 0 counts as valid_\r\n *\r\n * @param value - anything\r\n * @returns true or false\r\n */\r\nexport const isValid = (value: any) => {\r\n    if (Array.isArray(value) || typeof value == \"string\")\r\n        return Boolean(value.length);\r\n    return value != null && value != undefined;\r\n}\r\n\r\n/**\r\n * Returns a closure function, which adds units to numbers, strings or arrays of both\r\n *\r\n * @param unit - a unit function to use to add units to {@link TypeSingleValueCSSProperty | TypeSingleValueCSSProperty's }\r\n * @returns\r\n * if input is a string split it into an array at the comma's, and add units\r\n * else if the input is a number add the default units\r\n * otherwise if the input is an array of both add units according to {@link addCSSUnit}\r\n */\r\nexport const CSSValue = (unit: typeof UnitLess) => {\r\n    return (input: TypeSingleValueCSSProperty) => {\r\n        return isValid(input) ? toArr(input).map(val => {\r\n            if (typeof val != \"number\" && typeof val != \"string\")\r\n                return val;\r\n\r\n            // Basically if you can convert it to a number try to,\r\n            // otherwise just return whatever you can\r\n            let num = Number(val);\r\n            let value = Number.isNaN(num) ? (typeof val == \"string\" ? val.trim() : val) : num;\r\n            return unit(value); // Add the default units\r\n        }) : [];\r\n    };\r\n}\r\n\r\n/**\r\n * Flips the rows and columns of 2-dimensional arrays\r\n *\r\n * Read more on [underscorejs.org](https://underscorejs.org/#zip) & [lodash.com](https://lodash.com/docs/4.17.15#zip)\r\n *\r\n * @example\r\n * ```ts\r\n * transpose(\r\n *      ['moe', 'larry', 'curly'],\r\n *      [30, 40, 50],\r\n *      [true, false, false]\r\n * );\r\n * // [\r\n * //     [\"moe\", 30, true],\r\n * //     [\"larry\", 40, false],\r\n * //     [\"curly\", 50, false]\r\n * // ]\r\n * ```\r\n * @param [...args] - the arrays to process as a set of arguments\r\n * @returns\r\n * returns the new array of grouped elements\r\n */\r\nexport const transpose = (...args: TypeSingleValueCSSProperty[] | TypeSingleValueCSSProperty[][]) => {\r\n    let largestArrLen = 0;\r\n    args = args.map(arr => {\r\n        // Convert all values in arrays to an array\r\n        // This ensures that `arrays` is an array of arrays\r\n        let result = toArr(arr);\r\n\r\n        // Finds the largest array\r\n        let len = result.length;\r\n        if (len > largestArrLen) largestArrLen = len;\r\n        return result;\r\n    });\r\n\r\n    // Flip the rows and columns of arrays\r\n    let result = [];\r\n    let len = args.length;\r\n    for (let col = 0; col < largestArrLen; col++) {\r\n        result[col] = [];\r\n\r\n        for (let row = 0; row < len; row++) {\r\n            let val = args[row][col];\r\n            if (isValid(val))\r\n                result[col][row] = val;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Takes `TypeSingleValueCSSProperty` or an array of `TypeSingleValueCSSProperty` and adds units approriately\r\n *\r\n * @param arr - array of numbers, strings and/or an array of array of both e.g. ```[[25, \"50px\", \"60%\"], \"25, 35, 60%\", 50]```\r\n * @param unit - a unit function to use to add units to {@link TypeSingleValueCSSProperty | TypeSingleValueCSSProperty's }\r\n * @returns\r\n * an array of an array of strings with units\r\n * e.g.\r\n * ```ts\r\n * [\r\n *      [ '25px', '35px', ' 60%' ],\r\n *      [ '50px', '60px', '70px' ]\r\n * ]\r\n * ```\r\n */\r\nexport const CSSArrValue = (arr: TypeSingleValueCSSProperty | TypeSingleValueCSSProperty[], unit: typeof UnitLess) => {\r\n    // This is for the full varients of the transform function as well as the 3d varients\r\n    // zipping the `CSSValue` means if a user enters a string, it will treat each value (seperated by a comma) in that\r\n    // string as a seperate transition state\r\n    return toArr(arr).map(CSSValue(unit)) as TypeSingleValueCSSProperty[];\r\n}\r\n\r\nexport const TransformFunctionNames = [\r\n    \"translate\",\r\n    \"translate3d\",\r\n    \"translateX\",\r\n    \"translateY\",\r\n    \"translateZ\",\r\n    \"rotate\",\r\n    \"rotate3d\",\r\n    \"rotateX\",\r\n    \"rotateY\",\r\n    \"rotateZ\",\r\n    \"scale\",\r\n    \"scale3d\",\r\n    \"scaleX\",\r\n    \"scaleY\",\r\n    \"scaleZ\",\r\n    \"skew\",\r\n    \"skewX\",\r\n    \"skewY\",\r\n    \"perspective\"\r\n];\r\n\r\n/**\r\n * Creates the transform property text\r\n */\r\nexport const createTransformProperty = (arr) => {\r\n    let result = \"\";\r\n    let len = TransformFunctionNames.length;\r\n    for (let i = 0; i < len; i++) {\r\n        let name = TransformFunctionNames[i];\r\n        let value = arr[i];\r\n        if (isValid(value))\r\n            result += `${name}(${Array.isArray(value) ? value.join(\", \") : value}) `;\r\n    }\r\n\r\n    return result.trim();\r\n}\r\n\r\n/** Parses CSSValues without adding any units */\r\nexport const UnitLessCSSValue = CSSValue(UnitLess);\r\n\r\n/** Parses CSSValues and adds the \"px\" unit if required */\r\nexport const UnitPXCSSValue = CSSValue(UnitPX);\r\n\r\n/** Parses CSSValues and adds the \"deg\" unit if required */\r\nexport const UnitDEGCSSValue = CSSValue(UnitDEG);\r\n\r\n/**\r\n * Removes the need for the full transform statement in order to use translate, rotate, scale, skew, or perspective including their X, Y, Z, and 3d varients\r\n * Also, adds the ability to use single string or number values for transform functions\r\n *\r\n * _**Note**: the `transform` animation option will override all transform function properties_\r\n *\r\n * @param properties - the CSS properties to transform\r\n *\r\n * @example\r\n * ```ts\r\n * ParseTransformableCSSProperties({\r\n *      // It will automatically add the \"px\" units for you, or you can write a string with the units you want\r\n *      translate3d: [\r\n *          \"25, 35, 60%\",\r\n *          [50, \"60px\", 70],\r\n *          [\"70\", 50]\r\n *      ],\r\n *      translate: \"25, 35, 60%\",\r\n *      translateX: [50, \"60px\", \"70\"],\r\n *      translateY: [\"50, 60\", \"60\"], // Note: this will actually result in an error, make sure to pay attention to where you are putting strings and commas\r\n *      translateZ: 0,\r\n *      perspective: 0,\r\n *      opacity: \"0, 5\",\r\n *      scale: [\r\n *          [1, \"2\"],\r\n *          [\"2\", 1]\r\n *      ],\r\n *      rotate3d: [\r\n *          [1, 2, 5, \"3deg\"], // The last value in the array must be a string with units for rotate3d\r\n *          [2, \"4\", 6, \"45turn\"],\r\n *          [\"2\", \"4\", \"6\", \"-1rad\"]\r\n *      ]\r\n * })\r\n *\r\n * //= {\r\n * //=   transform: [\r\n * //=       // `translateY(50, 60)` will actually result in an error\r\n * //=       'translate(25px) translate3d(25px, 35px, 60%) translateX(50px) translateY(50, 60) translateZ(0px) rotate3d(1, 2, 5, 3deg) scale(1, 2) perspective(0px)',\r\n * //=       'translate(35px) translate3d(50px, 60px, 70px) translateX(60px) translateY(60px) rotate3d(2, 4, 6, 45turn) scale(2, 1)',\r\n * //=       'translate(60%) translate3d(70px, 50px) translateX(70px) rotate3d(2, 4, 6, -1rad)'\r\n * //=   ],\r\n * //=   opacity: [ '0', '5' ]\r\n * //= }\r\n * ```\r\n *\r\n * @returns\r\n * an object with a properly formatted `transform` and `opactity`, as well as other unformatted CSS properties\r\n * ```\r\n */\r\nexport const ParseTransformableCSSProperties = (properties: ICSSComputedTransformableProperties) => {\r\n    let {\r\n        perspective,\r\n        rotate,\r\n        rotate3d,\r\n        rotateX,\r\n        rotateY,\r\n        rotateZ,\r\n        translate,\r\n        translate3d,\r\n        translateX,\r\n        translateY,\r\n        translateZ,\r\n        scale,\r\n        scale3d,\r\n        scaleX,\r\n        scaleY,\r\n        scaleZ,\r\n        skew,\r\n        skewX,\r\n        skewY,\r\n        ...rest\r\n    } = properties;\r\n\r\n    translate = CSSArrValue(translate, UnitPX);\r\n    translate3d = CSSArrValue(translate3d, UnitPX);\r\n    translateX = UnitPXCSSValue(translateX);\r\n    translateY = UnitPXCSSValue(translateY);\r\n    translateZ = UnitPXCSSValue(translateZ);\r\n\r\n    rotate = CSSArrValue(rotate, UnitDEG);\r\n    rotate3d = CSSArrValue(rotate3d, UnitLess);\r\n    rotateX = UnitDEGCSSValue(rotateX);\r\n    rotateY = UnitDEGCSSValue(rotateY);\r\n    rotateZ = UnitDEGCSSValue(rotateZ);\r\n\r\n    scale = CSSArrValue(scale, UnitLess);\r\n    scale3d = CSSArrValue(scale3d, UnitLess);\r\n    scaleX = UnitLessCSSValue(scaleX);\r\n    scaleY = UnitLessCSSValue(scaleY);\r\n    scaleZ = UnitLessCSSValue(scaleZ);\r\n\r\n    skew = CSSArrValue(skew, UnitDEG);\r\n    skewX = UnitDEGCSSValue(skewX);\r\n    skewY = UnitDEGCSSValue(skewY);\r\n\r\n    perspective = UnitPXCSSValue(perspective);\r\n\r\n    let transform = transpose(\r\n        translate, translate3d, translateX, translateY, translateZ,\r\n        rotate, rotate3d, rotateX, rotateY, rotateZ,\r\n        scale, scale3d, scaleX, scaleY, scaleZ,\r\n        skew, skewX, skewY,\r\n        perspective\r\n    ).map(createTransformProperty);\r\n\r\n    // Wrap non array CSS property values in an array\r\n    rest = mapObject(rest, value => [].concat(value).map(v => `` + v));\r\n    return Object.assign({},\r\n        isValid(transform) ? { transform } : null,\r\n        rest);\r\n}\r\n\r\n/**\r\n * Similar to {@link ParseTransformableCSSProperties} except it transforms the CSS properties in each Keyframe\r\n * @param keyframes - an array of keyframes with transformable CSS properties\r\n * @returns\r\n * an array of keyframes, with transformed CSS properties\r\n */\r\nexport const ParseTransformableCSSKeyframes = (keyframes: ICSSComputedTransformableProperties[]) => {\r\n    return keyframes.map(properties => {\r\n        let {\r\n            translate,\r\n            translate3d,\r\n            translateX,\r\n            translateY,\r\n            translateZ,\r\n            rotate,\r\n            rotate3d,\r\n            rotateX,\r\n            rotateY,\r\n            rotateZ,\r\n            scale,\r\n            scale3d,\r\n            scaleX,\r\n            scaleY,\r\n            scaleZ,\r\n            skew,\r\n            skewX,\r\n            skewY,\r\n            perspective,\r\n\r\n            easing,\r\n            iterations,\r\n            offset,\r\n            ...rest\r\n        } = properties;\r\n\r\n        translate = UnitPXCSSValue(translate as TypeSingleValueCSSProperty);\r\n        translate3d = UnitPXCSSValue(translate3d as TypeSingleValueCSSProperty);\r\n        translateX = UnitPXCSSValue(translateX)[0];\r\n        translateY = UnitPXCSSValue(translateY)[0];\r\n        translateZ = UnitPXCSSValue(translateZ)[0];\r\n\r\n        rotate = UnitDEGCSSValue(rotate as TypeSingleValueCSSProperty);\r\n        rotate3d = UnitLessCSSValue(rotate3d as TypeSingleValueCSSProperty);\r\n        rotateX = UnitDEGCSSValue(rotateX)[0];\r\n        rotateY = UnitDEGCSSValue(rotateY)[0];\r\n        rotateZ = UnitDEGCSSValue(rotateZ)[0];\r\n\r\n        scale = UnitLessCSSValue(scale as TypeSingleValueCSSProperty);\r\n        scale3d = UnitLessCSSValue(scale3d as TypeSingleValueCSSProperty);\r\n        scaleX = UnitLessCSSValue(scaleX)[0];\r\n        scaleY = UnitLessCSSValue(scaleY)[0];\r\n        scaleZ = UnitLessCSSValue(scaleZ)[0];\r\n\r\n        skew = UnitDEGCSSValue(skew as TypeSingleValueCSSProperty);\r\n        skewX = UnitDEGCSSValue(skewX)[0];\r\n        skewY = UnitDEGCSSValue(skewY)[0];\r\n\r\n        perspective = UnitPXCSSValue(perspective)[0];\r\n\r\n        return [\r\n            rest,\r\n            translate, translate3d, translateX, translateY, translateZ,\r\n            rotate, rotate3d, rotateX, rotateY, rotateZ,\r\n            scale, scale3d, scaleX, scaleY, scaleZ,\r\n            skew, skewX, skewY,\r\n            perspective\r\n        ];\r\n    }).map(([rest, ...transformFunctions]) => {\r\n        let transform = createTransformProperty(transformFunctions);\r\n        return Object.assign({},\r\n            isValid(transform) ? { transform } : null,\r\n            rest);\r\n    });\r\n}", "import { EventEmitter, TypeEventInput, TypeListenerCallback } from \"@okikio/emitter\";\r\nimport { Manager } from \"@okikio/manager\";\r\n\r\nimport { TypeAnimationTarget, TypeAnimationOptionTypes, TypeCallbackArgs, TypeComputedAnimationOptions, IAnimationOptions, TypeComputedOptions, TypeKeyFrameOptionsType, TypeCSSLikeKeyframe, ICSSComputedTransformableProperties, TypeAnimationEvents, TypePlayStates } from \"./types\";\r\nimport { KeyframeParse, parseOffset } from \"./builtin-effects\";\r\nimport { isValid, ParseTransformableCSSProperties, ParseTransformableCSSKeyframes } from \"./css-properties\";\r\n\r\nexport * from \"./types\";\r\nexport * from \"./builtin-effects\";\r\nexport * from \"./css-properties\";\r\n\r\n/* DOM */\r\nexport const getElements = (selector: string | Node): Node[] => {\r\n    return typeof selector === \"string\" ? Array.from(document.querySelectorAll(selector as string)) : [selector];\r\n};\r\n\r\nexport const flatten = (arr: TypeAnimationTarget[]) => [].concat(...arr);\r\nexport const getTargets = (targets: TypeAnimationTarget): Node[] => {\r\n    if (Array.isArray(targets)) {\r\n        return flatten((targets as TypeAnimationTarget[]).map(getTargets));\r\n    }\r\n    if (typeof targets == \"string\" || targets instanceof Node)\r\n        return getElements(targets);\r\n    if (targets instanceof NodeList || targets instanceof HTMLCollection)\r\n        return Array.from(targets);\r\n    return [];\r\n};\r\n\r\n/* VALUES */\r\nexport const computeOption = (value: TypeAnimationOptionTypes, args: TypeCallbackArgs, context: Animate): TypeComputedAnimationOptions => {\r\n    if (typeof value === \"function\") {\r\n        return value.apply(context, args);\r\n    } else return value;\r\n};\r\n\r\n/**\r\n * Acts like array.map(...) but for functions\r\n */\r\nexport const mapObject = (obj: object, fn: (value, key, obj) => any) => {\r\n    let keys = Object.keys(obj);\r\n    let key, value, result = {};\r\n    for (let i = 0, len = keys.length; i < len; i++) {\r\n        key = keys[i];\r\n        value = obj[key];\r\n        result[key] = fn(value, key, obj);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const mapAnimationOptions = (options: IAnimationOptions, args: TypeCallbackArgs, animate: Animate): TypeComputedOptions => {\r\n    return mapObject(options, (value) => computeOption(value, args, animate));\r\n};\r\n\r\n/**\r\n * From: [https://easings.net]\r\n *\r\n * Read More about easings on [MDN](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/easing)\r\n *\r\n * ```ts\r\n * {\r\n *     \"in\": \"ease-in\",\r\n *     \"out\": \"ease-out\",\r\n *     \"in-out\": \"ease-in-out\",\r\n *\r\n *     // Sine\r\n *     \"in-sine\": \"cubic-bezier(0.47, 0, 0.745, 0.715)\",\r\n *     \"out-sine\": \"cubic-bezier(0.39, 0.575, 0.565, 1)\",\r\n *     \"in-out-sine\": \"cubic-bezier(0.445, 0.05, 0.55, 0.95)\",\r\n *\r\n *     // Quad\r\n *     \"in-quad\": \"cubic-bezier(0.55, 0.085, 0.68, 0.53)\",\r\n *     \"out-quad\": \"cubic-bezier(0.25, 0.46, 0.45, 0.94)\",\r\n *     \"in-out-quad\": \"cubic-bezier(0.455, 0.03, 0.515, 0.955)\",\r\n *\r\n *     // Cubic\r\n *     \"in-cubic\": \"cubic-bezier(0.55, 0.055, 0.675, 0.19)\",\r\n *     \"out-cubic\": \"cubic-bezier(0.215, 0.61, 0.355, 1)\",\r\n *     \"in-out-cubic\": \"cubic-bezier(0.645, 0.045, 0.355, 1)\",\r\n *\r\n *     // Quart\r\n *     \"in-quart\": \"cubic-bezier(0.895, 0.03, 0.685, 0.22)\",\r\n *     \"out-quart\": \"cubic-bezier(0.165, 0.84, 0.44, 1)\",\r\n *     \"in-out-quart\": \"cubic-bezier(0.77, 0, 0.175, 1)\",\r\n *\r\n *     // Quint\r\n *     \"in-quint\": \"cubic-bezier(0.755, 0.05, 0.855, 0.06)\",\r\n *     \"out-quint\": \"cubic-bezier(0.23, 1, 0.32, 1)\",\r\n *     \"in-out-quint\": \"cubic-bezier(0.86, 0, 0.07, 1)\",\r\n *\r\n *     // Expo\r\n *     \"in-expo\": \"cubic-bezier(0.95, 0.05, 0.795, 0.035)\",\r\n *     \"out-expo\": \"cubic-bezier(0.19, 1, 0.22, 1)\",\r\n *     \"in-out-expo\": \"cubic-bezier(1, 0, 0, 1)\",\r\n *\r\n *     // Circ\r\n *     \"in-circ\": \"cubic-bezier(0.6, 0.04, 0.98, 0.335)\",\r\n *     \"out-circ\": \"cubic-bezier(0.075, 0.82, 0.165, 1)\",\r\n *     \"in-out-circ\": \"cubic-bezier(0.785, 0.135, 0.15, 0.86)\",\r\n *\r\n *     // Back\r\n *     \"in-back\": \"cubic-bezier(0.6, -0.28, 0.735, 0.045)\",\r\n *     \"out-back\": \"cubic-bezier(0.175, 0.885, 0.32, 1.275)\",\r\n *     \"in-out-back\": \"cubic-bezier(0.68, -0.55, 0.265, 1.55)\"\r\n * }\r\n * ```\r\n */\r\nexport const EASINGS = {\r\n    \"in\": \"ease-in\",\r\n    \"out\": \"ease-out\",\r\n    \"in-out\": \"ease-in-out\",\r\n\r\n    // Sine\r\n    \"in-sine\": \"cubic-bezier(0.47, 0, 0.745, 0.715)\",\r\n    \"out-sine\": \"cubic-bezier(0.39, 0.575, 0.565, 1)\",\r\n    \"in-out-sine\": \"cubic-bezier(0.445, 0.05, 0.55, 0.95)\",\r\n\r\n    // Quad\r\n    \"in-quad\": \"cubic-bezier(0.55, 0.085, 0.68, 0.53)\",\r\n    \"out-quad\": \"cubic-bezier(0.25, 0.46, 0.45, 0.94)\",\r\n    \"in-out-quad\": \"cubic-bezier(0.455, 0.03, 0.515, 0.955)\",\r\n\r\n    // Cubic\r\n    \"in-cubic\": \"cubic-bezier(0.55, 0.055, 0.675, 0.19)\",\r\n    \"out-cubic\": \"cubic-bezier(0.215, 0.61, 0.355, 1)\",\r\n    \"in-out-cubic\": \"cubic-bezier(0.645, 0.045, 0.355, 1)\",\r\n\r\n    // Quart\r\n    \"in-quart\": \"cubic-bezier(0.895, 0.03, 0.685, 0.22)\",\r\n    \"out-quart\": \"cubic-bezier(0.165, 0.84, 0.44, 1)\",\r\n    \"in-out-quart\": \"cubic-bezier(0.77, 0, 0.175, 1)\",\r\n\r\n    // Quint\r\n    \"in-quint\": \"cubic-bezier(0.755, 0.05, 0.855, 0.06)\",\r\n    \"out-quint\": \"cubic-bezier(0.23, 1, 0.32, 1)\",\r\n    \"in-out-quint\": \"cubic-bezier(0.86, 0, 0.07, 1)\",\r\n\r\n    // Expo\r\n    \"in-expo\": \"cubic-bezier(0.95, 0.05, 0.795, 0.035)\",\r\n    \"out-expo\": \"cubic-bezier(0.19, 1, 0.22, 1)\",\r\n    \"in-out-expo\": \"cubic-bezier(1, 0, 0, 1)\",\r\n\r\n    // Circ\r\n    \"in-circ\": \"cubic-bezier(0.6, 0.04, 0.98, 0.335)\",\r\n    \"out-circ\": \"cubic-bezier(0.075, 0.82, 0.165, 1)\",\r\n    \"in-out-circ\": \"cubic-bezier(0.785, 0.135, 0.15, 0.86)\",\r\n\r\n    // Back\r\n    \"in-back\": \"cubic-bezier(0.6, -0.28, 0.735, 0.045)\",\r\n    \"out-back\": \"cubic-bezier(0.175, 0.885, 0.32, 1.275)\",\r\n    \"in-out-back\": \"cubic-bezier(0.68, -0.55, 0.265, 1.55)\"\r\n};\r\n\r\n/**\r\n * The keys of {@link EASINGS}\r\n *\r\n * @remark\r\n * \"in\", \"out\", \"in-out\", \"in-sine\", \"out-sine\", \"in-out-sine\", \"in-quad\", \"out-quad\", \"in-out-quad\", \"in-cubic\", \"out-cubic\", \"in-out-cubic\", \"in-quart\", \"out-quart\", \"in-out-quart\", \"in-quint\", \"out-quint\", \"in-out-quint\", \"in-expo\", \"out-expo\", \"in-out-expo\", \"in-circ\", \"out-circ\", \"in-out-circ\", \"in-back\", \"out-back\", \"in-out-back\"\r\n */\r\nexport const EasingKeys = Object.keys(EASINGS);\r\n\r\n/**\r\n * Converts users input into a usable easing function\r\n *\r\n * @param ease - easing functions; {@link EasingKeys}, cubic-bezier, steps, linear, etc...\r\n * @returns an easing function that `KeyframeEffect` can accept\r\n */\r\nexport const GetEase = (ease: keyof typeof EASINGS | string): string => {\r\n    let search = ease.replace(/^ease-/, \"\"); // Remove the \"ease-\" keyword\r\n    return EasingKeys.includes(search) ? EASINGS[search] : ease;\r\n};\r\n/**\r\n * The default options for every Animate instance\r\n *\r\n * ```ts\r\n * {\r\n *   keyframes: [],\r\n *\r\n *   loop: 1,\r\n *   delay: 0,\r\n *   speed: 1,\r\n *   endDelay: 0,\r\n *   easing: \"ease\",\r\n *   autoplay: true,\r\n *   duration: 1000,\r\n *   fillMode: \"none\",\r\n *   direction: \"normal\",\r\n *   padEndDelay: false,\r\n *   extend: {}\r\n * }\r\n * ```\r\n */\r\nexport const DefaultAnimationOptions: IAnimationOptions = {\r\n    keyframes: [],\r\n    offset: [],\r\n\r\n    loop: 1,\r\n    delay: 0,\r\n    speed: 1,\r\n    endDelay: 0,\r\n    easing: \"ease\",\r\n    timelineOffset: 0,\r\n    autoplay: true,\r\n    duration: 1000,\r\n    fillMode: \"none\",\r\n    direction: \"normal\",\r\n    padEndDelay: false,\r\n    extend: {}\r\n};\r\n\r\n\r\nexport const parseOptions = (options: IAnimationOptions): IAnimationOptions => {\r\n    let { options: animation, ...rest } = options;\r\n    let oldOptions = animation instanceof Animate ? animation.options : (Array.isArray(animation) ? animation?.[0]?.options : animation);\r\n    return Object.assign({}, oldOptions, rest);\r\n}\r\n\r\n/**\r\n * Return a copy of the object without the keys specified in the keys argument\r\n *\r\n * @param keys - arrays of keys to remove from the object\r\n * @param obj - the object in question\r\n * @returns\r\n * a copy of the object without certain key\r\n */\r\nexport const omit = (keys: string[], obj: { [key: string]: any }) => {\r\n    let rest = { ...obj };\r\n    while (keys.length) {\r\n        let { [keys.pop()]: omitted, ...remaining } = rest;\r\n        rest = remaining;\r\n    }\r\n    return rest;\r\n}\r\n\r\n/**\r\n * An animation library for the modern web, which. Inspired by animate plus, and animejs, [@okikio/animate](https://www.skypack.dev/view/@okikio/animate) is a Javascript animation library focused on performance and ease of use.\r\n *\r\n * You can check it out here: <https://codepen.io/okikio/pen/qBbdGaW?editors=0011>\r\n */\r\nexport class Animate {\r\n    /**\r\n     * Stores the options for the current animation\r\n     *\r\n     * @inheritDoc DefaultAnimationOptions\r\n     */\r\n    public options: IAnimationOptions = {};\r\n\r\n    /**\r\n     * The properties to animate\r\n     */\r\n    public properties: object = {};\r\n\r\n    /**\r\n     * The total duration of all Animation's\r\n     */\r\n    public totalDuration: number = 0;\r\n\r\n    /**\r\n     * The smallest delay out of all Animation's\r\n     */\r\n    public minDelay: number;\r\n\r\n    /**\r\n     * The smallest speed out of all Animation's\r\n     */\r\n    public maxSpeed: number;\r\n\r\n    /**\r\n     * The Element the mainAnimation runs on\r\n     */\r\n    public mainElement: HTMLElement;\r\n\r\n    /**\r\n     * Stores an animation that runs on the total duration of all the `Animation` instances, and as such it's the main Animation.\r\n     */\r\n    public mainAnimation: Animation;\r\n\r\n    /**\r\n     * The Keyframe Effect for the mainAnimation\r\n     */\r\n    public mainkeyframeEffect: KeyframeEffect;\r\n\r\n    /**\r\n     * Stores request frame calls\r\n     */\r\n    public animationFrame: number;\r\n\r\n    /**\r\n     * An event emitter\r\n     */\r\n    public emitter: EventEmitter = new EventEmitter();\r\n\r\n    /**\r\n     * Returns a promise that is fulfilled when the mainAnimation is finished\r\n     */\r\n    public promise: Promise<Animate[]>;\r\n\r\n    /**\r\n     * The list of Elements to Animate\r\n     */\r\n    public targets: Manager<number, Node> = new Manager();\r\n\r\n    /**\r\n     * The indexs of target Elements in Animate\r\n     */\r\n    public targetIndexes: WeakMap<Node, number> = new WeakMap();\r\n\r\n    /**\r\n     * A WeakMap of KeyFrameEffects\r\n     */\r\n    public keyframeEffects: WeakMap<HTMLElement, KeyframeEffect> = new WeakMap();\r\n\r\n    /**\r\n     * The options for individual animations\r\n     *\r\n     * A WeakMap that stores all the fully calculated options for individual Animation instances.\r\n     *\r\n     * _**Note**: the computedOptions are changed to their proper Animation instance options, so, some of the names are different, and options that can't be computed are not present. E.g. fillMode in the animation options is now just fill in the computedOptions.*_\r\n     *\r\n     * _**Note**: keyframes are not included, both the array form and the object form; the options, speed, extend, padEndDelay, and autoplay animation options are not included_\r\n     */\r\n    public computedOptions: WeakMap<HTMLElement, TypeComputedOptions> = new WeakMap();\r\n\r\n    /**\r\n     * A WeakMap of Animations\r\n     */\r\n    public animations: WeakMap<KeyframeEffect, Animation> = new WeakMap();\r\n\r\n    /**\r\n     * The keyframes for individual animations\r\n     *\r\n     * A WeakMap that stores all the fully calculated keyframes for individual Animation instances.\r\n     *\r\n     * _**Note**: the computedKeyframes are changed to their proper Animation instance options, so, some of the names are different, and options that can't be computed are not present. E.g. translateX, skew, etc..., they've all been turned into the transform property.*_\r\n     */\r\n    public computedKeyframes: WeakMap<HTMLElement, TypeKeyFrameOptionsType> = new WeakMap();\r\n    constructor(options: IAnimationOptions) {\r\n        this.loop = this.loop.bind(this);\r\n        this.onVisibilityChange = this.onVisibilityChange.bind(this);\r\n        this.on(\"error\", (err) => console.error(err));\r\n        this.updateOptions(options);\r\n\r\n        this.visibilityPlayState = this.getPlayState();\r\n        if (Animate.pauseOnPageHidden) {\r\n            document.addEventListener('visibilitychange', this.onVisibilityChange, false);\r\n        }\r\n\r\n        this.newPromise();\r\n    }\r\n\r\n    /**\r\n     * Tells all animate instances to pause when the page is hidden\r\n     *\r\n     * @static\r\n     * @type {Boolean}\r\n     * @memberof Animate\r\n     */\r\n    static pauseOnPageHidden: Boolean = true;\r\n\r\n    /**\r\n     * Store the last remebered playstate before page was hidden\r\n     *\r\n     * @protected\r\n     * @type {TypePlayStates}\r\n     * @memberof Animate\r\n     */\r\n    protected visibilityPlayState: TypePlayStates;\r\n\r\n    /**\r\n     * document `visibilitychange` event handler\r\n     */\r\n    protected onVisibilityChange() {\r\n        if (document.hidden) {\r\n            this.visibilityPlayState = this.getPlayState();\r\n            if (this.is(\"running\")) {\r\n                this.loop();\r\n                this.pause();\r\n            }\r\n        } else {\r\n            if (this.visibilityPlayState == \"running\" && this.is(\"paused\"))\r\n                this.play();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a new Promise that is resolved when the animation finishes\r\n     */\r\n    public newPromise(): Promise<Animate[]> {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            /*\r\n                Note that the `this` keyword is in an Array when it is resolved,\r\n                this is due to Promises not wanting to resolve references,\r\n                so, you can't resolve `this` directly, so, I chose to resolve `this` in an\r\n                Array\r\n\r\n                Note: the `resolve` method by default will only run once so to avoid\r\n            */\r\n            this?.emitter?.once?.(\"finish\", () => resolve([this]));\r\n            this?.emitter?.once?.(\"error\", err => reject(err));\r\n        });\r\n\r\n        return this.promise;\r\n    }\r\n\r\n    /**\r\n     * Fulfills the `this.promise` Promise\r\n     */\r\n    public then(\r\n        onFulfilled?: (value?: any) => any,\r\n        onRejected?: (reason?: any) => any\r\n    ): Animate {\r\n        onFulfilled = onFulfilled?.bind(this);\r\n        onRejected = onRejected?.bind(this);\r\n        this?.promise?.then?.(onFulfilled, onRejected);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Catches error that occur in the `this.promise` Promise\r\n     */\r\n    public catch(onRejected: (reason?: any) => any): Animate {\r\n        onRejected = onRejected?.bind(this);\r\n        this.promise?.catch?.(onRejected);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * If you don't care if the `this.promise` Promise has either been rejected or resolved\r\n     */\r\n    public finally(onFinally: () => any): Animate {\r\n        onFinally = onFinally?.bind(this);\r\n        this.promise?.finally?.(onFinally);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Represents an Animation Frame Loop\r\n     */\r\n    public loop(): void {\r\n        this.stopLoop();\r\n        this.animationFrame = window.requestAnimationFrame(this.loop);\r\n        this.emit(\"update\", this.getProgress(), this);\r\n    }\r\n\r\n    /**\r\n     * Cancels animation frame\r\n     */\r\n    public stopLoop() {\r\n        window.cancelAnimationFrame(this.animationFrame);\r\n    }\r\n\r\n    /**\r\n     * Calls a method that affects all animations **excluding** the mainAnimation; the method only allows the animation parameter\r\n    */\r\n    public allAnimations(method: (animation?: Animation, target?: HTMLElement) => void) {\r\n        this.targets.forEach((target: HTMLElement) => {\r\n            let keyframeEffect = this.keyframeEffects.get(target);\r\n            let animation = this.animations.get(keyframeEffect);\r\n            return method(animation, target);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calls a method that affects all animations **including** the mainAnimation; the method only allows the animation parameter\r\n    */\r\n    public all(method: (animation?: Animation, target?: HTMLElement) => void) {\r\n        this.mainAnimation && method(this.mainAnimation, this.mainElement);\r\n        this.allAnimations(method);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Register the begin event\r\n     */\r\n    protected beginEvent() {\r\n        if (this.getProgress() == 0)\r\n            this.emit(\"begin\", this);\r\n    }\r\n\r\n    /**\r\n     * Play Animation\r\n     */\r\n    public play(): Animate {\r\n        let playstate = this.getPlayState();\r\n        this.beginEvent();\r\n        this.all(anim => anim.play());\r\n        this.emit(\"play\", playstate, this);\r\n        if (!this.is(playstate))\r\n            this.emit(\"playstate-change\", playstate, this);\r\n        this.loop();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Pause Animation\r\n     */\r\n    public pause(): Animate {\r\n        let playstate = this.getPlayState();\r\n        this.all(anim => anim.pause());\r\n        this.emit(\"pause\", playstate, this);\r\n        if (!this.is(playstate))\r\n            this.emit(\"playstate-change\", playstate, this);\r\n        this.stopLoop();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reverse Animation\r\n     */\r\n    public reverse() {\r\n        this.all(anim => anim.reverse());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reset all Animations\r\n     */\r\n    public reset() {\r\n        this.setProgress(0);\r\n\r\n        if (this.options.autoplay) this.play();\r\n        else this.pause();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Cancels all Animations\r\n     */\r\n    public cancel() {\r\n        this.all(anim => anim.cancel());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Force complete all Animations\r\n     */\r\n    public finish() {\r\n        this.all(anim => anim.finish());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Cancels & Clears all Animations\r\n     */\r\n    public stop() {\r\n        this.cancel();\r\n        this.stopLoop();\r\n        document.removeEventListener('visibilitychange', this.onVisibilityChange, false);\r\n\r\n        this.targets.forEach((target: HTMLElement) => this.removeTarget(target));\r\n\r\n        this.emit(\"stop\");\r\n        this.emitter.clear();\r\n\r\n        this.mainkeyframeEffect = null;\r\n        this.mainAnimation = null;\r\n        this.mainElement = null;\r\n\r\n        this.promise = null;\r\n        this.computedOptions = null;\r\n        this.animations = null;\r\n        this.keyframeEffects = null;\r\n        this.emitter = null;\r\n        this.targets = null;\r\n        this.options = null;\r\n        this.properties = null;\r\n    }\r\n\r\n    /**\r\n     * Get a specific Animation from an Animate instance\r\n     */\r\n    public getAnimation(target: HTMLElement) {\r\n        let keyframeEffect = this.keyframeEffects.get(target);\r\n        return this.animations.get(keyframeEffect);\r\n    }\r\n\r\n    /**\r\n     * Returns the timings of an Animation, given a target\r\n     * E.g. { duration, endDelay, delay, iterations, iterationStart, direction, easing, fill, etc... }\r\n     */\r\n    public getTiming(target: HTMLElement): TypeComputedAnimationOptions {\r\n        let keyframeOptions = this.computedOptions.get(target) ?? {};\r\n        let timings = this.keyframeEffects.get(target).getTiming?.() ?? {};\r\n\r\n        return { ...keyframeOptions, ...timings };\r\n    }\r\n\r\n    /**\r\n     * Returns the current time of the Main Animation\r\n     */\r\n    public getCurrentTime(): number {\r\n        return this.mainAnimation.currentTime;\r\n    }\r\n\r\n    /**\r\n     * Returns the Animation progress as a fraction of the current time / duration * 100\r\n     */\r\n    public getProgress() {\r\n        return (this.getCurrentTime() / this.totalDuration) * 100;\r\n    }\r\n\r\n    /**\r\n     * Return the playback speed of the animation\r\n     */\r\n    public getSpeed(): number {\r\n        return this.mainAnimation.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Returns the current playing state\r\n     */\r\n    public getPlayState(): TypePlayStates {\r\n        return this.mainAnimation.playState;\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean determining if the `animate` instances playstate is equal to the `playstate` parameter.\r\n     */\r\n    public is(playstate: TypePlayStates) {\r\n        return this.getPlayState() == playstate;\r\n    }\r\n\r\n    /**\r\n     * Set the current time of the Main Animation\r\n     */\r\n    public setCurrentTime(time: number): Animate {\r\n        this.all(anim => (anim.currentTime = time));\r\n        this.emit(\"update\", this.getProgress());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the Animation progress as a value from 0 to 100\r\n     */\r\n    public setProgress(percent: number): Animate {\r\n        let time = (percent / 100) * this.totalDuration;\r\n        this.setCurrentTime(time);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the playback speed of an Animation\r\n     */\r\n    public setSpeed(speed: number = 1): Animate {\r\n        this.maxSpeed = speed;\r\n        this.all(anim => {\r\n            if (anim.updatePlaybackRate)\r\n                anim.updatePlaybackRate(speed);\r\n            else anim.playbackRate = speed;\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of computed options\r\n     */\r\n    protected createArrayOfComputedOptions(optionsFromParam: IAnimationOptions, len: number) {\r\n        let result: TypeComputedAnimationOptions = [];\r\n        this.targets.forEach((target: HTMLElement, i) => {\r\n            // Basically if there is already a computedOption for the target element use it, but don't ovveride any new options\r\n            let oldComputedOptions: IAnimationOptions = this.computedOptions.get(target) ?? {};\r\n            let getOption = (key: string) => {\r\n                let computedKey = key;\r\n                if (key == \"loop\") computedKey = \"iterations\";\r\n                if (key == \"fillMode\") computedKey = \"fill\";\r\n                return optionsFromParam[key] ?? oldComputedOptions[computedKey] ?? this.options[key];\r\n            };\r\n\r\n            let animationOptions = Object.assign({\r\n                easing: getOption(\"easing\"),\r\n                iterations: getOption(\"loop\"),\r\n                direction: getOption(\"direction\"),\r\n                endDelay: getOption(\"endDelay\"),\r\n                duration: getOption(\"duration\"),\r\n                speed: getOption(\"speed\"),\r\n                delay: getOption(\"delay\"),\r\n                timelineOffset: getOption(\"timelineOffset\"),\r\n                keyframes: getOption(\"keyframes\"),\r\n            }, getOption(\"extend\") ?? {});\r\n\r\n            // let oldComputedOptions = this.computedOptions.get(target)\r\n            // Allows the use of functions as the values, for both the keyframes and the animation object\r\n            // It adds the capability of advanced stagger animation, similar to the animejs stagger functions\r\n            let computedOptions = mapAnimationOptions(animationOptions as IAnimationOptions, [i, len, target], this);\r\n\r\n            if (typeof computedOptions.easing == \"string\")\r\n                computedOptions.easing = GetEase(computedOptions.easing);\r\n\r\n            if (computedOptions.iterations === true)\r\n                computedOptions.iterations = Infinity;\r\n\r\n            computedOptions.fill = getOption(\"fillMode\");\r\n\r\n            // Add timelineOffset to delay, this is future proofing;\r\n            // if you want to create a custom timeline similar to animejs this will help you\r\n            // I don't intend to make a timeline function for this project\r\n            let {\r\n                timelineOffset,\r\n                speed,\r\n                endDelay,\r\n                delay,\r\n                duration,\r\n                iterations,\r\n                ...remainingComputedOptions\r\n            } = computedOptions;\r\n\r\n            iterations = Number(iterations);\r\n            duration = Number(duration);\r\n            endDelay = Number(endDelay);\r\n            speed = Number(speed);\r\n            delay = Number(delay) + Number(timelineOffset);\r\n\r\n            let tempDurations = delay + (duration * iterations) + endDelay;\r\n\r\n            // Set the totalDuration to be the Animation with the largest totalDuration\r\n            if (this.totalDuration < tempDurations)\r\n                this.totalDuration = tempDurations;\r\n\r\n            result[i] = {\r\n                ...remainingComputedOptions,\r\n                speed,\r\n                tempDurations,\r\n                endDelay,\r\n                delay,\r\n                duration,\r\n                iterations,\r\n            };\r\n\r\n            if (!isValid(this.minDelay) || delay < this.minDelay) this.minDelay = delay;\r\n            if (!isValid(this.maxSpeed) || speed < this.maxSpeed) this.maxSpeed = speed;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates animations out of an array of computed options\r\n     */\r\n    protected createAnimations(param: { arrOfComputedOptions: any; padEndDelay: any; oldCSSProperties: any; onfinish: any; oncancel: any; }, len: number) {\r\n        let {\r\n            arrOfComputedOptions,\r\n            padEndDelay,\r\n            oldCSSProperties,\r\n            onfinish,\r\n            oncancel\r\n        } = param;\r\n\r\n        this.targets.forEach((target: HTMLElement, i) => {\r\n            let { speed, keyframes, tempDurations, ...computedOptions } = arrOfComputedOptions[i];\r\n\r\n            // You cannot use the `padEndDelay` option and set a value for `endDelay`, the `endDelay` value will\r\n            // replace the padded endDelay\r\n\r\n            // This ensures all `animations` match up to the total duration, and don't finish too early,\r\n            // if animations finish too early, when the `.play()` method is called, some animations\r\n            // that are finished will restart, while the rest will continue playing.\r\n            // This is mostly for progress control, but depending on your usage may truly benefit you\r\n            if (padEndDelay && computedOptions.endDelay == 0 &&\r\n                Math.abs(computedOptions.iterations) != Math.abs(Infinity)) {\r\n                computedOptions.endDelay = this.totalDuration - tempDurations;\r\n            }\r\n\r\n            let computedKeyframes: Keyframe[] | PropertyIndexedKeyframes;\r\n            let animationKeyframe: TypeKeyFrameOptionsType;\r\n\r\n            // Accept keyframes as a keyframes Object, or a method,\r\n            // if there are no animations in the keyframes array,\r\n            // uses css properties from the options object\r\n            let arrKeyframes = keyframes as (Keyframe[] | TypeCSSLikeKeyframe);\r\n            if (typeof arrKeyframes == \"object\") arrKeyframes = KeyframeParse(arrKeyframes);\r\n\r\n            // If `computedKeyframes` have been previously computed for this target element replace\r\n            // the old uncomputed CSS properties with it, otherwise, use the uncomputed property\r\n            let oldComputedKeyframe = this.computedKeyframes.get(target) ?? {};\r\n            let fullProperties = Object.assign({}, oldCSSProperties, oldComputedKeyframe);\r\n\r\n            // Replace old CSS properties with new CSS properties if there is a new value for the CSS property\r\n            // As in the new CSS property is not null or null\r\n            let properties = mapObject(fullProperties, (value, key) => (this.properties[key] ?? value));\r\n\r\n            // Prefer arrays of keyframes over pure CSS Properties\r\n            animationKeyframe = isValid(arrKeyframes) ? arrKeyframes : properties as PropertyIndexedKeyframes;\r\n\r\n            if (!Array.isArray(animationKeyframe)) {\r\n                // Remove `keyframes` animation option, it's not a valid CSS property\r\n                let remaining: IAnimationOptions = omit([\"keyframes\"], animationKeyframe);\r\n                let { offset, ...CSSProperties } = mapAnimationOptions(remaining, [i, len, target], this);\r\n\r\n                // transform, is often used so, to make them easier to use we parse them for strings, number, and/or arrays of both;\r\n                // for transform we parse the translate, skew, scale, and perspective functions (including all their varients) as CSS properties;\r\n                // it then turns these properties into valid `PropertyIndexedKeyframes`\r\n                // Read the documentation for `ParseTransformableCSSProperties`\r\n                CSSProperties = ParseTransformableCSSProperties(CSSProperties as ICSSComputedTransformableProperties);\r\n\r\n                let _offset = offset as (string | number)[];\r\n                computedKeyframes = Object.assign({},\r\n                    CSSProperties,\r\n                    !isValid(_offset) ? null : { offset: _offset.map(parseOffset) }\r\n                ) as PropertyIndexedKeyframes;\r\n            } else {\r\n                computedKeyframes = animationKeyframe.map((keyframe: Keyframe) => {\r\n                    // Remove `speed` & `loop`, they are not valid CSS properties\r\n                    let { easing, offset, ...remaining } = omit([\"speed\", \"loop\"], keyframe);\r\n\r\n                    return Object.assign({ },\r\n                        remaining,\r\n                        typeof easing == \"string\" ? { easing: GetEase(easing) } : null,\r\n                        typeof offset == \"string\" || typeof offset == \"number\"\r\n                            ? { offset: parseOffset(offset) } : null\r\n                    );\r\n                });\r\n\r\n                // Transform transformable CSS properties in each keyframe of the keyframe array\r\n                computedKeyframes = ParseTransformableCSSKeyframes(computedKeyframes) as Keyframe[];\r\n            }\r\n\r\n            let animation: Animation, keyFrameEffect: KeyframeEffect;\r\n            if (this.keyframeEffects.has(target)) {\r\n                // Update the animation, if the target already is already being animated\r\n                keyFrameEffect = this.keyframeEffects.get(target);\r\n                animation = this.animations.get(keyFrameEffect);\r\n\r\n                keyFrameEffect?.setKeyframes?.(computedKeyframes);\r\n                keyFrameEffect?.updateTiming?.(computedOptions as KeyframeAnimationOptions);\r\n            } else {\r\n                // Create animation and add it to the Animations Set\r\n                keyFrameEffect = new KeyframeEffect(target, computedKeyframes, computedOptions as KeyframeAnimationOptions);\r\n                animation = new Animation(keyFrameEffect, computedOptions.timeline);\r\n\r\n                this.keyframeEffects.set(target, keyFrameEffect);\r\n                this.animations.set(keyFrameEffect, animation);\r\n            }\r\n\r\n            animation.playbackRate = speed;\r\n\r\n            // Support for on finish\r\n            animation.onfinish = () => {\r\n                typeof onfinish == \"function\" && onfinish.call(this, target, i, len, animation);\r\n            };\r\n\r\n            // // Support for on cancel\r\n            animation.oncancel = () => {\r\n                typeof oncancel == \"function\" && oncancel.call(this, target, i, len, animation);\r\n            };\r\n\r\n            // Set the calculated options & keyframes for each individual animation\r\n            this.computedOptions.set(target, computedOptions);\r\n            this.computedKeyframes.set(target, computedKeyframes);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update the options for all targets\r\n     *\r\n     * _**Note**: `KeyframeEffect` support is really low, so, I am suggest that you avoid using the `updateOptions` method, until browser support for `KeyframeEffect.updateTiming(...)` and `KeyframeEffefct.setKeyframes(...)` is better_\r\n     *\r\n     * @beta\r\n     */\r\n    public updateOptions(options: IAnimationOptions = {}) {\r\n        try {\r\n            let optionsFromParam = parseOptions(options);\r\n            this.options = Object.assign({}, DefaultAnimationOptions, this.options, optionsFromParam);\r\n\r\n            // This removes all none CSS properties from `properties`\r\n            let sharedTimingKeys = [\"easing\", \"loop\", \"endDelay\", \"duration\", \"speed\", \"delay\", \"timelineOffset\", \"direction\", \"extend\", \"fillMode\", \"offset\"];\r\n            let {\r\n                // These values cannot be functions\r\n                padEndDelay,\r\n                onfinish,\r\n                oncancel,\r\n                autoplay,\r\n                target,\r\n                targets,\r\n\r\n                /**\r\n                 * Theses are the CSS properties to be animated as Keyframes\r\n                 */\r\n                ...oldCSSProperties\r\n            } = omit(sharedTimingKeys, this.options);\r\n\r\n            // This removes all none CSS properties from `optionsFromParam`\r\n            this.properties = omit([...sharedTimingKeys, \"keyframes\", \"padEndDelay\", \"onfinish\", \"oncancel\", \"autoplay\", \"target\", \"targets\"], optionsFromParam);\r\n\r\n            // Avoid duplicate elements\r\n            let oldTargets = this.targets.values();\r\n            let targetSet = [...new Set([...oldTargets, ...getTargets(targets), ...getTargets(target)])];\r\n            this.targets.clear();\r\n            targetSet.forEach((value, i) => {\r\n                this.targets.set(i, value);\r\n                this.targetIndexes.set(value, i);\r\n            });\r\n\r\n            let len = this.targets.size;\r\n            let arrOfComputedOptions = this.createArrayOfComputedOptions(optionsFromParam, len);\r\n            this.createAnimations({\r\n                arrOfComputedOptions,\r\n                padEndDelay,\r\n                oldCSSProperties,\r\n                onfinish,\r\n                oncancel\r\n            }, len);\r\n\r\n            this.maxSpeed = this.maxSpeed ?? this.options.speed as number;\r\n            this.minDelay = this.minDelay ??  this.options.delay as number;\r\n            this.totalDuration = this.totalDuration ?? this.options.duration as number;\r\n\r\n            if (!this.mainAnimation) {\r\n                this.mainkeyframeEffect = new KeyframeEffect(this.mainElement, [\r\n                    { opacity: \"0\" },\r\n                    { opacity: \"1\" }\r\n                ], {\r\n                    // Why waste performance on an animation no one can see?\r\n                    duration: this.totalDuration,\r\n                    easing: \"linear\"\r\n                });\r\n\r\n                this.mainAnimation = new Animation(this.mainkeyframeEffect, this.options.timeline);\r\n            } else {\r\n                this.mainkeyframeEffect?.updateTiming?.({\r\n                    duration: this.totalDuration\r\n                });\r\n\r\n                if (!this.mainkeyframeEffect.setKeyframes || !this.mainkeyframeEffect.updateTiming)\r\n                    console.warn(\"@okikio/animate - `KeyframeEffect.setKeyframes` and/or `KeyframeEffect.updateTiming` are not supported in this browser.\");\r\n            }\r\n\r\n            this.mainAnimation.playbackRate = this.maxSpeed;\r\n            this.mainAnimation.onfinish = () => {\r\n                this.emit(\"finish\", this);\r\n                if (this.mainAnimation) {\r\n                    let playstate = this.getPlayState();\r\n                    if (!this.is(playstate))\r\n                        this.emit(\"playstate-change\", playstate, this);\r\n                    this.stopLoop();\r\n                }\r\n            };\r\n\r\n            this.mainAnimation.oncancel = () => {\r\n                this.emit(\"cancel\", this);\r\n                if (this.mainAnimation) {\r\n                    let playstate = this.getPlayState();\r\n                    if (!this.is(playstate))\r\n                        this.emit(\"playstate-change\", playstate, this);\r\n                    this.stopLoop();\r\n                }\r\n            };\r\n\r\n            if (autoplay) {\r\n                // By the time events are registered the animation would have started and there wouldn't have be a `begin` event listener to actually emit\r\n                // So, this defers the emitting for a 0ms time allowing the rest of the js to run, the `begin` event to be registered thus\r\n                // the `begin` event can be emitter\r\n                let timer: number | void = window.setTimeout(() => {\r\n                    this.emit(\"begin\", this);\r\n                    timer = window.clearTimeout(timer as number);\r\n                }, 0);\r\n\r\n                this.play();\r\n            } else this.pause();\r\n        } catch (err) {\r\n            this.emit(\"error\", err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a target to the Animate instance, and update the animation options with the change\r\n     *\r\n     * _**Note**: `KeyframeEffect` support is really low, so, I am suggest that you avoid using the `add` method, until browser support for `KeyframeEffect.updateTiming(...)` and `KeyframeEffefct.setKeyframes(...)` is better_\r\n     *\r\n     * @beta\r\n     */\r\n    public add(target: HTMLElement) {\r\n        let progress = this.getProgress();\r\n        let running = this.is(\"running\");\r\n        let paused = this.is(\"paused\");\r\n\r\n        this.updateOptions({ target });\r\n        this.setProgress(progress);\r\n\r\n        if (running) this.play();\r\n        else if (paused) this.pause();\r\n    }\r\n\r\n    /**\r\n     * Removes a target from an Animate instance\r\n     *\r\n     * _**Note**: it doesn't update the current running options, you need to use the `Animate.prototype.remove(...)` method if you want to also update the running options_\r\n     */\r\n    public removeTarget(target: HTMLElement) {\r\n        let keyframeEffect = this.keyframeEffects.get(target);\r\n        this.animations.delete(keyframeEffect);\r\n        keyframeEffect = null;\r\n\r\n        this.computedKeyframes.delete(target);\r\n        this.computedOptions.delete(target);\r\n        this.keyframeEffects.delete(target);\r\n\r\n        let index = this.targetIndexes.get(target);\r\n        this.targets.delete(index);\r\n        this.targetIndexes.delete(target);\r\n    }\r\n\r\n    /**\r\n     * Removes a target from an Animate instance, and update the animation options with the change\r\n     *\r\n     * _**Note**: `KeyframeEffect` support is really low, so, I am suggest that you avoid using the `remove` method, until browser support for `KeyframeEffect.updateTiming(...)` and `KeyframeEffefct.setKeyframes(...)` is better_\r\n     *\r\n     * @beta\r\n     */\r\n    public remove(target: HTMLElement) {\r\n        this.removeTarget(target);\r\n\r\n        let targetSet = new Set([].concat(this.targets.values()));\r\n\r\n        this.options.target = [...targetSet];\r\n        this.options.targets = [];\r\n        targetSet.clear();\r\n        targetSet = null;\r\n\r\n        let progress = this.getProgress();\r\n        let running = this.is(\"running\");\r\n        let paused = this.is(\"paused\");\r\n\r\n        this.updateOptions();\r\n\r\n        if (running) this.play();\r\n        else if (paused) this.pause();\r\n\r\n        this.setProgress(progress);\r\n    }\r\n\r\n    /**\r\n     * Adds a listener for a given event\r\n     */\r\n    public on(events: TypeAnimationEvents[] | TypeAnimationEvents | TypeEventInput, callback?: TypeListenerCallback | object, scope?: object): Animate {\r\n        this?.emitter?.on(events, callback, scope ?? this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a listener from an event\r\n     */\r\n    public off(events: TypeAnimationEvents[] | TypeAnimationEvents | TypeEventInput, callback?: TypeListenerCallback | object, scope?: object): Animate {\r\n        this?.emitter?.off(events, callback, scope ?? this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Call all listeners within an event\r\n     */\r\n    public emit(events: TypeAnimationEvents[] | TypeAnimationEvents | string | any[], ...args: any): Animate {\r\n        this?.emitter?.emit(events, ...args);\r\n        return this;\r\n    }\r\n\r\n    /** Returns the Animate options, as JSON  */\r\n    public toJSON(): IAnimationOptions {\r\n        return this.options;\r\n    }\r\n\r\n    /**\r\n     * The Symbol.toStringTag well-known symbol is a string valued property that is used\r\n     * in the creation of the default string description of an object.\r\n     * It is accessed internally by the Object.prototype.toString() method.\r\n     */\r\n    get [Symbol.toStringTag]() {\r\n        return `Animate`;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a new Animate instance\r\n *\r\n * @remark\r\n * `@okikio/animate` create animations by creating instances of `Animate`, a class that acts as a wrapper around the Web Animation API. To create new instances of the `Animate` class, you can either import the `Animate` class and do this, `new Animate({ ... })` or import the `animate` (lowercase) method and do this, `animate({ ... })`. The `animate` method creates new instances of the `Animate` class and passes the options it recieves as arguments to the `Animate` class.\r\n *\r\n * The `Animate` class recieves a set of targets to animate, it then creates a list of Web Animation API `Animation` instances, along side a main animation, which is small `Animation` instance that is set to animate the opacity of a non visible element, the `Animate` class then plays each `Animation` instances keyframes including the main animation.\r\n\r\n * The main animation is there to ensure accuracy in different browser vendor implementation of the Web Animation API. The main animation is stored in `Animate.prototype.mainAnimation: Animation`, the other `Animation` instances are stored in a `Manager` (from [@okikio/manager](https://www.npmjs.com/package/@okikio/manager)) `Animate.prototype.animations: Manager<HTMLElement, Animation>`.\r\n\r\n * @example\r\n * ```ts\r\n * import animate from \"@okikio/animate\";\r\n *\r\n * // Do note, on the web you need to do this, if you installed it via the script tag:\r\n * // const { animate } = window.animate;\r\n *\r\n * (async () => {\r\n *     let [options] = await animate({\r\n *         target: \".div\",\r\n *         // NOTE: If you turn this on you have to comment out the transform property. The keyframes property is a different format for animation you cannot you both styles of formatting in the same animation\r\n *         // keyframes: [\r\n *         //     { transform: \"translateX(0px)\" },\r\n *         //     { transform: \"translateX(300px)\" }\r\n *         // ],\r\n *         transform: [\"translateX(0px)\", \"translateX(300px)\"],\r\n *         easing: \"out\",\r\n *         duration(i) {\r\n *             return (i + 1) * 500;\r\n *         },\r\n *         loop: 1,\r\n *         speed: 2,\r\n *         fillMode: \"both\",\r\n *         direction: \"normal\",\r\n *         autoplay: true,\r\n *         delay(i) {\r\n *             return (i + 1) * 100;\r\n *         },\r\n *         endDelay(i) {\r\n *             return (i + 1) * 100;\r\n *         },\r\n *     });\r\n *\r\n *     animate({\r\n *         options,\r\n *         transform: [\"translateX(300px)\", \"translateX(0px)\"],\r\n *     });\r\n * })();\r\n *\r\n * // or you can use the .then() method\r\n * animate({\r\n *     target: \".div\",\r\n *     // NOTE: If you turn this on you have to comment out the transform property. The keyframes property is a different format for animation you cannot you both styles of formatting in the same animation\r\n *     // keyframes: [\r\n *     //     { transform: \"translateX(0px)\" },\r\n *     //     { transform: \"translateX(300px)\" }\r\n *     // ],\r\n *     transform: [\"translateX(0px)\", \"translateX(300px)\"],\r\n *     easing: \"out\",\r\n *     duration(i) {\r\n *         return (i + 1) * 500;\r\n *     },\r\n *     loop: 1,\r\n *     speed: 2,\r\n *     fillMode: \"both\",\r\n *     direction: \"normal\",\r\n *     delay(i) {\r\n *         return (i + 1) * 100;\r\n *     },\r\n *     autoplay: true,\r\n *     endDelay(i) {\r\n *         return (i + 1) * 100;\r\n *     }\r\n * }).then((options) => {\r\n *     animate({\r\n *         options,\r\n *         transform: [\"translateX(300px)\", \"translateX(0px)\"]\r\n *     });\r\n * });\r\n * ```\r\n *\r\n * [Preview this example &#8594;](https://codepen.io/okikio/pen/mdPwNbJ?editors=0010)\r\n *\r\n * @packageDocumentation\r\n */\r\nexport const animate = (options: IAnimationOptions = {}): Animate => {\r\n    return new Animate(options);\r\n};\r\n\r\nexport default animate;\r\n", "import { animate, IAnimationOptions, methodCall, UnitPXCSSValue } from \"@okikio/native\";\r\n\r\n\r\nlet playbackFn = (containerSel, anims) => {\r\n    let playstateEl = document.querySelector(`${containerSel} #playstate-toggle`) as HTMLInputElement;\r\n    let progressEl = document.querySelector(`${containerSel} #progress`) as HTMLInputElement;\r\n\r\n    let progressOutputEl = document.querySelector(`${containerSel} #progress-output`);\r\n    let oldState: AnimationPlayState;\r\n\r\n    let updatePlayState = () => {\r\n        oldState = anims[0].getPlayState();\r\n        playstateEl.setAttribute(\"data-playstate\", oldState);\r\n    };\r\n\r\n    anims[0]\r\n        .on(\"finish begin\", updatePlayState)\r\n        .on(\"update\", (progress) => {\r\n            progressEl.value = `` + progress.toFixed(2);\r\n            progressOutputEl.textContent = `${Math.round(progress)}%`;\r\n        });\r\n\r\n    let clickFn = () => {\r\n        if (anims[0].is(\"running\")) methodCall(anims, \"pause\");\r\n        else if (anims[0].is(\"finished\")) methodCall(anims, \"reset\");\r\n        else methodCall(anims, \"play\");\r\n\r\n        updatePlayState();\r\n    };\r\n\r\n    let inputFn = () => {\r\n        let percent = +progressEl.value;\r\n        methodCall(anims, \"pause\");\r\n        methodCall(anims, \"setProgress\", percent);\r\n    }\r\n\r\n    let changeFn = () => {\r\n        oldState !== \"paused\" ? methodCall(anims, \"play\") : methodCall(anims, \"pause\");\r\n\r\n        updatePlayState();\r\n    }\r\n\r\n    playstateEl.addEventListener(\"click\", clickFn);\r\n    progressEl.addEventListener(\"input\", inputFn);\r\n    progressEl.addEventListener(\"change\", changeFn);\r\n\r\n    anims[0].on(\"stop\", () => {\r\n        playstateEl.removeEventListener(\"click\", clickFn);\r\n        progressEl.removeEventListener(\"input\", inputFn);\r\n        progressEl.removeEventListener(\"change\", changeFn);\r\n        anims = null;\r\n    })\r\n\r\n}\r\n\r\nlet random = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n/* Properties Section */\r\n// Playback Controls Demo\r\nexport let anim, motionPath, getTotalLength;\r\nexport let run = () => {\r\n    // Based on an example by animateplus\r\n    (() => {\r\n        let containerSel = \".morph-demo\";\r\n        let pathEl = document.querySelectorAll(`${containerSel} path`);\r\n\r\n        if (pathEl.length) {\r\n            let anim = animate({\r\n                target: pathEl,\r\n                duration: 1800,\r\n                easing: \"ease\",\r\n                loop: 4,\r\n                direction: \"alternate\",\r\n                \"d\": `path(\"M2,5 S2,14 4,5 S7,8 8,4\")`,\r\n                stroke: `rgb(96, 165, 250)`,\r\n            });\r\n\r\n            playbackFn(containerSel, [anim]);\r\n        }\r\n    })();\r\n\r\n    (() => {\r\n        let containerSel = \".playback-demo\";\r\n        let DOMNodes = document.querySelectorAll(`${containerSel} .el`);\r\n        if (DOMNodes.length) {\r\n            anim = animate({\r\n                target: DOMNodes,\r\n                backgroundColor() {\r\n                    let [r, g, b] = [\r\n                        random(0, 255),\r\n                        random(0, 255),\r\n                        random(0, 255)\r\n                    ]\r\n                    return `rgb(${r}, ${g}, ${b})`;\r\n                },\r\n\r\n                translateX: () => random(50, 400),\r\n                translateY(_, total) {\r\n                    return (random(-50, 50) * total);\r\n                },\r\n                scale() {\r\n                    return 1 + random(0.025, 1.75);\r\n                },\r\n                opacity(_, total) {\r\n                    return [0.5, 0.5 + Math.min(random(0.025, total) / total, 0.5)];\r\n                },\r\n                rotate: () => random(-360, 360),\r\n                borderRadius: () => `${random(10, 35)}%`,\r\n                duration: () => random(1200, 1800),\r\n                delay: () => random(0, 400),\r\n\r\n                // It is best to use the onfinish() method, but in this situation fillMode works best\r\n                fillMode: \"both\",\r\n                easing: \"in-out-back\",\r\n                loop: 2,\r\n                speed: (i) => 1.5 - (i * 0.125),\r\n                direction: \"alternate\",\r\n\r\n                padEndDelay: true,\r\n                autoplay: true\r\n            });\r\n\r\n            let addBtn = document.querySelector(\"#add-el\") as HTMLElement;\r\n            let removeBtn = document.querySelector(\"#remove-el\") as HTMLElement;\r\n            let elPlacement = document.querySelector(\".el-placement\") as HTMLElement;\r\n\r\n            let contain = document.createElement(\"div\");\r\n            contain.className = \"contain\";\r\n            contain.innerHTML = `\r\n            <div class=\"el\"></div>\r\n            <div class=\"el-initial\"></div>`.trim();\r\n\r\n            addBtn.onclick = () => {\r\n                let _contain = contain.cloneNode(true) as HTMLElement;\r\n                let el = _contain.querySelector(\".el\");\r\n                elPlacement.appendChild(_contain);\r\n\r\n                anim.add(el);\r\n\r\n                let transition = animate({\r\n                    target: _contain,\r\n                    opacity: [0, 1],\r\n                    height: [0, \"4vmin\"],\r\n                    marginBottom: UnitPXCSSValue([0, 5]),\r\n                    fillMode: \"forwards\",\r\n                    duration: 400,\r\n                    easing: \"out\"\r\n                }).then(() => {\r\n                    transition.stop();\r\n                    transition = null;\r\n                    _contain = null;\r\n                    el = null;\r\n                });\r\n\r\n            };\r\n\r\n            removeBtn.onclick = () => {\r\n                let contain = elPlacement.querySelector(\".contain\");\r\n                let el = contain?.querySelector(\".el\");\r\n\r\n                anim.remove(el);\r\n\r\n                let transition = animate({\r\n                    target: contain,\r\n                    opacity: 0,\r\n                    height: 0,\r\n                    marginBottom: 0,\r\n                    fillMode: \"forwards\",\r\n                    duration: 400,\r\n                    easing: \"out\"\r\n                }).then(() => {\r\n                    transition.stop();\r\n                    contain?.remove();\r\n\r\n                    transition = null;\r\n                    contain = null;\r\n                    el = null;\r\n                });\r\n            };\r\n\r\n            playbackFn(containerSel, [anim]);\r\n        }\r\n    })();\r\n\r\n    (() => {\r\n        let options: IAnimationOptions = {\r\n            padEndDelay: true,\r\n            easing: \"linear\",\r\n            duration: 2000,\r\n            loop: 4,\r\n            speed: 1,\r\n        };\r\n\r\n        let containerSel = \".motion-path-demo\";\r\n        let el = document.querySelector('.motion-path .el-1') as HTMLElement;\r\n        if (el) {\r\n            motionPath = animate({\r\n                target: el,\r\n                \"offsetDistance\": [\"0%\", \"100%\"],\r\n                ...options\r\n            });\r\n        }\r\n\r\n        let path = document.querySelector('.motion-path path') as SVGPathElement;\r\n        let el2 = document.querySelector('.motion-path .el-2') as HTMLElement;\r\n        if (path && el2) {\r\n\r\n            let pts: Set<number[]> = new Set();\r\n            let rotateArr: number[] = [];\r\n            let len = path.getTotalLength();\r\n\r\n            let ptAtZero = path.getPointAtLength(0);\r\n            for (var i = 0; i < len; i++) {\r\n                let { x, y } = path.getPointAtLength(i);\r\n                pts.add([x, y]);\r\n\r\n                let { x: x0, y: y0 } = i - 1 >= 1 ? path.getPointAtLength(i - 1) : ptAtZero;\r\n                let { x: x1, y: y1 } = i + 1 >= 1 ? path.getPointAtLength(i + 1) : ptAtZero;\r\n                let calc = +(Math.atan2(y0 - y1, x0 - x1) * 180 / Math.PI);\r\n                rotateArr.push(calc);\r\n            }\r\n\r\n            getTotalLength = animate({\r\n                target: el2,\r\n                translate: [...pts],\r\n                rotate: rotateArr,\r\n                fillMode: \"both\",\r\n                ...options,\r\n            });\r\n\r\n            playbackFn(containerSel, [motionPath, getTotalLength]);\r\n        }\r\n    })();\r\n};\r\n\r\nexport let stop = () => {\r\n    anim?.stop();\r\n    motionPath?.stop();\r\n    getTotalLength?.stop();\r\n\r\n}\r\n"],
  "mappings": "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",
  "names": []
}

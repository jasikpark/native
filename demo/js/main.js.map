{
  "version": 3,
  "sources": ["packages/native/src/config.ts", "packages/manager/src/api.ts", "packages/native/src/manager.ts", "packages/native/src/url.ts", "packages/native/src/service.ts", "packages/native/src/history.ts", "packages/native/src/page.ts", "packages/native/src/transition.ts", "packages/emitter/src/api.ts", "packages/native/src/app.ts", "packages/native/src/pjax.ts", "packages/native/src/router.ts", "packages/animate/src/api.ts", "build/ts/toArr.ts", "build/ts/services/IntroAnimation.ts", "build/ts/transitions/Fade.ts", "build/ts/transitions/BigTransition.ts", "build/ts/transitions/Slide.ts", "build/ts/services/Navbar.ts", "build/ts/main.ts"],
  "sourcesContent": ["export interface ICONFIG {\r\n    prefix?: string;\r\n    wrapperAttr?: string;\r\n    noAjaxLinkAttr?: string;\r\n    noPrefetchAttr?: \"no-prefetch\";\r\n    headers?: string[][];\r\n    preventSelfAttr?: string;\r\n    preventAllAttr?: string;\r\n    transitionAttr?: string;\r\n    blockAttr?: string;\r\n    timeout?: number;\r\n    maxPages?: number;\r\n    resizeDelay?: number;\r\n    [key: string]: any;\r\n}\r\n\r\nexport const CONFIG_DEFAULTS: ICONFIG = {\r\n    wrapperAttr: \"wrapper\",\r\n    noAjaxLinkAttr: \"no-ajax-link\",\r\n    noPrefetchAttr: \"no-prefetch\",\r\n    headers: [\r\n        [\"x-partial\", \"true\"]\r\n    ],\r\n    preventSelfAttr: `prevent=\"self\"`,\r\n    preventAllAttr: `prevent=\"all\"`,\r\n    transitionAttr: \"transition\",\r\n    blockAttr: `block`,\r\n    timeout: 30000,\r\n    maxPages: 5,\r\n    resizeDelay: 100\r\n};\r\n\r\nexport type ConfigKeys = keyof typeof CONFIG_DEFAULTS | string;\r\nexport const newConfig = (config: ICONFIG): ICONFIG => {\r\n    return Object.assign({ ...CONFIG_DEFAULTS }, config);\r\n};\r\n\r\n/** Converts string into properly formatted data attributes */\r\nexport const toAttr = (config: ICONFIG, value: string, brackets: boolean = true): string => {\r\n    let { prefix } = config;\r\n    let attr = `data${prefix ? \"-\" + prefix : \"\"}-${value}`;\r\n    return brackets ? `[${attr}]` : attr;\r\n};\r\n\r\n/** Selects config vars, and formats them for use, or simply returns the current configurations for the framework */\r\nexport const getConfig = (config: ICONFIG, value?: ConfigKeys, brackets: boolean = true): any => {\r\n    if (typeof value !== \"string\")\r\n        return config;\r\n\r\n    let prop = config[value];\r\n    if (typeof prop === \"string\")\r\n        return toAttr(config, prop, brackets);\r\n    return prop;\r\n};\r\n", "/** Manages complex lists of named data, eg. A page can be stored in a list by of other pages with the url being how the page is stored in the list. Managers use Maps to store data */\r\nexport class Manager<K, V> {\r\n\t/** The complex list of named data, to which the Manager controls */\r\n\tpublic map: Map<K, V>;\r\n\tconstructor(value?: Array<[K, V]>) {\r\n\t\tthis.map = new Map(value);\r\n\t}\r\n\r\n\t/** Returns the Manager classes base Map */\r\n\tpublic getMap(): Map<K, V> {\r\n\t\treturn this.map;\r\n\t}\r\n\r\n\t/** Get a value stored in the Manager */\r\n\tpublic get(key: K): V {\r\n\t\treturn this.map.get(key);\r\n\t}\r\n\r\n\t/** Returns the keys of all items stored in the Manager as an Array */\r\n\tpublic keys(): Array<K> {\r\n\t\treturn Array.from(this.map.keys());\r\n\t}\r\n\r\n\t/** Returns the values of all items stored in the Manager as an Array */\r\n\tpublic values(): Array<V> {\r\n\t\treturn Array.from(this.map.values());\r\n\t}\r\n\r\n\t/** Set a value to the Manager using a key */\r\n\tpublic set(key: K, value: V): Manager<K, V> {\r\n\t\tthis.map.set(key, value);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Adds a value to Manager, and uses the current size of the Manager as it's key, it works best when all the key in the Manager are numbers */\r\n\tpublic add(value: V): Manager<K, V> {\r\n\t\tlet size = this.size;\r\n\t\t// @ts-ignore\r\n\t\tlet num: K = size as K;\r\n\t\tthis.set(num, value);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Returns the total number of items stored in the Manager */\r\n\tpublic get size(): number {\r\n\t\treturn this.map.size;\r\n\t}\r\n\r\n\t/** An alias for size */\r\n\tpublic get length(): number {\r\n\t\treturn this.map.size;\r\n\t}\r\n\r\n\t/** Returns the last item in the Manager who's index is a certain distance from the last item in the Manager */\r\n\tpublic last(distance: number = 1): V | undefined {\r\n\t\tlet key = this.keys()[this.size - distance];\r\n\t\treturn this.get(key);\r\n\t}\r\n\r\n\t/** Removes a value stored in the Manager via a key, returns true if an element in the Map object existed and has been removed, or false if the element does not exist */\r\n\tpublic delete(key: K): boolean {\r\n\t\treturn this.map.delete(key);\r\n\t}\r\n\r\n\t/** Removes a value stored in the Manager via a key, returns the Manager class, allowing for chains */\r\n\tpublic remove(key: K): Manager<K, V> {\r\n\t\tthis.map.delete(key);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Clear the Manager of all its contents */\r\n\tpublic clear(): Manager<K, V> {\r\n\t\tthis.map.clear();\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Checks if the Manager contains a certain key */\r\n\tpublic has(key: K): boolean {\r\n\t\treturn this.map.has(key);\r\n\t}\r\n\r\n\t/** Returns a new Iterator object that contains an array of [key, value] for each element in the Map object in insertion order. */\r\n\tpublic entries(): IterableIterator<[K, V]> {\r\n\t\treturn this.map.entries();\r\n\t}\r\n\r\n\t/** Iterates through the Managers contents, calling a callback function every iteration */\r\n\tpublic forEach(\r\n\t\tcallback: (value?: V, key?: K, map?: Map<K, V>) => void,\r\n\t\tcontext?: object\r\n\t): Manager<K, V> {\r\n\t\tthis.map.forEach(callback, context);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Allows for iteration via for..of, learn more: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators] */\r\n\tpublic [Symbol.iterator](): IterableIterator<[K, V]> {\r\n\t\treturn this.entries();\r\n\t}\r\n}\r\n\r\n/**\r\n * Calls the method of a certain name for all items that are currently installed\r\n */\r\nexport const methodCall = (manager: Manager<any, any>, method: string, ...args: any): void => {\r\n\tmanager.forEach((item) => {\r\n\t\t// @ts-ignore\r\n\t\titem[method](...args);\r\n\t});\r\n};\r\n\r\n/**\r\n * Asynchronously calls the method of a certain name for all items that are currently installed, similar to methodCall\r\n */\r\nexport const asyncMethodCall = async (manager: Manager<any, any>, method: string, ...args: any): Promise<void> => {\r\n\tfor (let [, item] of manager) {\r\n\t\t// @ts-ignore\r\n\t\tawait item[method](...args);\r\n\t}\r\n};\r\n\r\nexport default Manager;\r\n", "import { Manager, methodCall, asyncMethodCall } from \"@okikio/manager\";\r\nimport { ICONFIG } from \"./config\";\r\nimport { IApp } from \"./app\";\r\nimport { EventEmitter } from \"@okikio/emitter\";\r\n\r\nexport type IAdvancedManager = AdvancedManager<any, ManagerItem>;\r\n\r\n/** The base class for AdvancedManager items */\r\nexport class ManagerItem {\r\n    /** The AdvancedManager the ManagerItem is attached to */\r\n    public manager: IAdvancedManager;\r\n\r\n    /** The App the ManagerItem is attached to */\r\n    public app: IApp;\r\n\r\n    /** The Config of the App the ManagerItem is attached to */\r\n    public config: ICONFIG;\r\n\r\n    /** The EventEmitter of the App the ManagerItem is attached to */\r\n    public emitter: EventEmitter;\r\n\r\n    /** The key to where ManagerItem is stored in an AdvancedManager */\r\n    public key: any;\r\n\r\n    constructor() { }\r\n\r\n    /** Run after the Manager Item has been registered */\r\n    public install(): any { }\r\n\r\n    /** Register the current Manager Item's manager */\r\n    public register(manager: IAdvancedManager, key: any): ManagerItem {\r\n        this.manager = manager;\r\n        this.app = manager.app;\r\n        this.config = manager.config;\r\n        this.emitter = manager.emitter;\r\n        this.key = key;\r\n        this.install();\r\n        return this;\r\n    }\r\n\r\n    /** Run before the ManagerItem has been unregistered */\r\n    public uninstall(): any { }\r\n\r\n    /** Basically removes a ManagerItem, in order to recover the ManagerItem, it needs to be re-added to an AdvancedManager */\r\n    public unregister() {\r\n        this.uninstall();\r\n\r\n        this.manager.remove(this.key);\r\n        this.key = undefined;\r\n        this.manager = undefined;\r\n        this.app = undefined;\r\n        this.config = undefined;\r\n        this.emitter = undefined;\r\n    }\r\n}\r\n\r\n/** A tweak to the Manager class that makes it self aware of the App class it's instantiated in */\r\nexport class AdvancedManager<K, V extends ManagerItem> extends Manager<K, V> {\r\n    /** The App the AdvancedManager is attached to */\r\n    public app: IApp;\r\n\r\n    /** The Config of the App the AdvancedManager is attached to */\r\n    public config: ICONFIG;\r\n\r\n    /** The EventEmitter of the App the AdvancedManager is attached to */\r\n    public emitter: EventEmitter;\r\n\r\n    /** Register App details */\r\n    constructor(app: IApp) {\r\n        super();\r\n        this.app = app;\r\n        this.config = app.config;\r\n        this.emitter = app.emitter;\r\n    }\r\n\r\n    /** Add a ManagerItem to AdvancedManager at a specified key */\r\n    public set(key: K, value: V) {\r\n        super.set(key, value);\r\n        value.register(this, key);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport * from \"@okikio/manager\";\r\n", "export const newURL = (url: string | URL | Location = window.location.href): URL => {\r\n    return url instanceof URL ? url : new URL(url as unknown as string, window.location.origin);\r\n};\r\n\r\n/** Returns the pathname with the hash at the end */\r\nexport const getHashedPath = (url: URL | string): string => {\r\n    let _url = newURL(url);\r\n    return `${_url.pathname}${_url.hash}`;\r\n};\r\n\r\n/** Returns the actual hash without the hashtag */\r\nexport const getHash = (url: URL | string): string => newURL(url).hash.slice(1);\r\n\r\n/** Removes the hash from the full URL for a clean URL string */\r\nexport const clean = (url: URL | string): string => newURL(url).toString().replace(/(\\/#.*|\\/|#.*)$/, '');\r\n\r\n/** Compares two URLs to each other */\r\nexport const equal = (a: URL | string, b: URL | string): boolean => (clean(a) === clean(b));\r\n\r\n", "import { AdvancedManager, ManagerItem, methodCall } from \"./manager\";\r\nimport { IApp } from \"./app\";\r\n\r\n/** Controls specific kinds of actions that require JS */\r\nexport class Service extends ManagerItem {\r\n\t/** Called before the start of a Service, represents a constructor of sorts */\r\n\tpublic init(...args: any): any;\r\n\tpublic init(): any { }\r\n\r\n\t/** Called on start of Service */\r\n\tpublic boot(...args: any): any;\r\n\tpublic boot(): any {\r\n\t\tthis.initEvents();\r\n\t}\r\n\r\n\t/** Initialize events */\r\n\tpublic initEvents(): void { }\r\n\r\n\t/** Stop events */\r\n\tpublic stopEvents(): void { }\r\n\r\n\t/** Stop services */\r\n\tpublic stop(): void {\r\n\t\tthis.stopEvents();\r\n\t\tthis.unregister();\r\n\t}\r\n}\r\n\r\n/** The Service Manager controls the lifecycle of all Services in an App */\r\nexport class ServiceManager extends AdvancedManager<string, Service> {\r\n\tconstructor(app: IApp) {\r\n\t\tsuper(app);\r\n\t}\r\n\r\n\t/** Call the init method for all Services */\r\n\tpublic init(): ServiceManager {\r\n\t\tmethodCall(this, \"init\");\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Call the boot method for all Services */\r\n\tpublic boot(): ServiceManager {\r\n\t\tmethodCall(this, \"boot\");\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Call the stop method for all Services */\r\n\tpublic stop(): ServiceManager {\r\n\t\tmethodCall(this, \"stop\");\r\n\t\treturn this;\r\n\t}\r\n}\r\n", "import { Service } from \"./service\";\r\nimport { getHashedPath, newURL } from \"./url\";\r\n\r\nexport type Trigger = HTMLAnchorElement | \"HistoryManager\" | \"popstate\" | \"back\" | \"forward\";\r\nexport interface ICoords {\r\n\treadonly x: number;\r\n\treadonly y: number;\r\n}\r\n\r\nexport interface IStateData {\r\n\tscroll: ICoords;\r\n\t[key: string]: any;\r\n}\r\n\r\nexport interface IState {\r\n\turl: string;\r\n\tindex?: number;\r\n\ttransition: string;\r\n\tdata: IStateData;\r\n}\r\n\r\nexport interface IHistoryItem {\r\n\tindex: number;\r\n\tstates: IState[];\r\n}\r\n\r\nexport interface IHistoryManager extends Service {\r\n\tstates: IState[],\r\n\tpointer: number,\r\n\r\n\tinit(): any,\r\n\tget(index: number): IState,\r\n\tadd(value?: IState, historyAction?: \"replace\" | \"push\"): HistoryManager,\r\n\tremove(index?: number): HistoryManager,\r\n\treplace(newStates: IState[]): HistoryManager,\r\n\tset(i: number, state: IState): IState,\r\n\tcurrent: IState,\r\n\tlast: IState,\r\n\tprevious: IState | null,\r\n\tlength: number,\r\n}\r\n\r\n/** A quick snapshot of page scroll coordinates */\r\nexport const newCoords = (x: number = window.scrollX, y: number = window.scrollY): ICoords => ({ x, y });\r\n\r\n/** Creates a state; a state represents the current status of the page consisting of properties like: url, transition, and data */\r\nexport const newState = (state: IState = {\r\n\turl: getHashedPath(newURL()),\r\n\tindex: 0,\r\n\ttransition: \"default\",\r\n\tdata: {\r\n\t\tscroll: newCoords(),\r\n\t\ttrigger: \"HistoryManager\"\r\n\t}\r\n}): IState => (state);\r\n\r\n/** Keeps a record of the history of the App; it stores only the states of Pages */\r\nexport class HistoryManager extends Service implements IHistoryManager {\r\n\tpublic states: IState[];\r\n\tpublic pointer = -1;\r\n\r\n\t/** Initializes the states array, and replace the history pushState data with the states array */\r\n\tinit() {\r\n\t\tthis.states = [];\r\n\r\n\t\tlet state = newState();\r\n\t\tthis.add(state, \"replace\");\r\n\t}\r\n\r\n\t/** Get a state based on it's index */\r\n\tpublic get(index: number) {\r\n\t\treturn this.states[index];\r\n\t}\r\n\r\n\t/** Add a state to HistoryManager and change the history pushState data based on the historyAction specified */\r\n\tpublic add(value?: IState, historyAction: \"replace\" | \"push\" = \"push\"): HistoryManager {\r\n\t\tlet state = newState(value);\r\n\t\tlet len = this.length;\r\n\t\tthis.states.push({ ...state });\r\n\t\tthis.pointer = len;\r\n\r\n\t\tlet item: IHistoryItem = {\r\n\t\t\tindex: this.pointer,\r\n\t\t\tstates: [...this.states]\r\n\t\t};\r\n\t\tchangeState(historyAction, state, item);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic remove(index?: number) {\r\n\t\tif (index) {\r\n\t\t\tthis.states.splice(index, 1);\r\n\t\t} else {\r\n\t\t\tthis.states.pop();\r\n\t\t}\r\n\r\n\t\tthis.pointer--;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Replaces the states array with another states array, this is later used when going back and forward in page history */\r\n\tpublic replace(newStates: IState[]) {\r\n\t\tthis.states = newStates;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Set state by index. */\r\n\tpublic set(i: number, state: IState) {\r\n\t\treturn (this.states[i] = state);\r\n\t}\r\n\r\n\t/** Get the current state */\r\n\tget current(): IState {\r\n\t\treturn this.get(this.pointer);\r\n\t}\r\n\r\n\t/** Get the last state (top of the history stack). */\r\n\tget last(): IState {\r\n\t\treturn this.get(this.length - 1);\r\n\t}\r\n\r\n\t/** Get the previous state. */\r\n\tget previous(): IState | null {\r\n\t\treturn this.pointer < 1 ? null : this.get(this.pointer - 1);\r\n\t}\r\n\r\n\tget length() {\r\n\t\treturn this.states.length;\r\n\t}\r\n}\r\n\r\n/** Either push or replace history state */\r\nexport const changeState = (action: \"push\" | \"replace\", state: IState, item: object) => {\r\n\tlet href = getHashedPath(state.url);\r\n\tlet args = [item, \"\", href];\r\n\tif (window.history) {\r\n\t\tswitch (action) {\r\n\t\t\tcase \"push\":\r\n\t\t\t\twindow.history.pushState.apply(window.history, args);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"replace\":\r\n\t\t\t\twindow.history.replaceState.apply(window.history, args);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n};\r\n", "import { Manager, ManagerItem, AdvancedManager } from \"./manager\";\r\nimport { equal, newURL } from \"./url\";\r\nimport { getConfig } from \"./config\";\r\nimport { Service } from \"./service\";\r\n\r\nexport interface IPage extends ManagerItem {\r\n    dom: Document,\r\n    wrapper: HTMLElement,\r\n    title: string,\r\n    head: Element,\r\n    body: Element,\r\n    url: URL,\r\n    data: string,\r\n    wrapperAttr: string,\r\n\r\n    build(): any,\r\n    install(): void,\r\n    uninstall(): any,\r\n}\r\n\r\n/**\r\n * Parses strings to DOM\r\n */\r\nexport const PARSER: DOMParser = new DOMParser();\r\n\r\n/** A page represents the DOM elements that create each page */\r\nexport class Page extends ManagerItem implements IPage {\r\n    /** Holds the DOM of the current page */\r\n    public dom: Document;\r\n\r\n    /** Holds the wrapper element to be swapped out of each Page */\r\n    public wrapper: HTMLElement;\r\n\r\n    /** Holds the title of each page */\r\n    public title: string;\r\n\r\n    /** Holds the head element of each page */\r\n    public head: Element;\r\n\r\n    /** Holds the body element of each page */\r\n    public body: Element;\r\n\r\n    /** The URL of the current page */\r\n    public url: URL;\r\n\r\n    /** The payload of a page request */\r\n    public data: string;\r\n\r\n    /** Attr that identifies the wrapper */\r\n    public wrapperAttr: string;\r\n\r\n    constructor(url: URL = newURL(), dom: string | Document = document) {\r\n        super();\r\n        this.url = url;\r\n\r\n        if (typeof dom === \"string\") {\r\n            this.data = dom;\r\n        } else this.dom = dom || document;\r\n    }\r\n\r\n    /** Builds the page's dom, and sets the title, head, body, and wrapper properties of the Page class */\r\n    public build() {\r\n        if (!(this.dom instanceof Node)) {\r\n            this.dom = PARSER.parseFromString(this.data, \"text/html\");\r\n        }\r\n\r\n        if (!(this.body instanceof Node)) {\r\n            let { title, head, body } = this.dom;\r\n            this.title = title;\r\n            this.head = head;\r\n            this.body = body;\r\n            this.wrapper = this.body.querySelector(this.wrapperAttr);\r\n        }\r\n    }\r\n\r\n    public install() {\r\n        this.wrapperAttr = getConfig(this.config, \"wrapperAttr\");\r\n    }\r\n\r\n    public uninstall() {\r\n        this.url = undefined;\r\n        this.title = undefined;\r\n        this.head = undefined;\r\n        this.body = undefined;\r\n        this.dom = undefined;\r\n        this.wrapper = undefined;\r\n        this.data = undefined;\r\n        this.wrapperAttr = undefined;\r\n    }\r\n}\r\n\r\nexport interface IPageManager extends Service {\r\n    loading: Manager<string, Promise<string>>,\r\n    pages: AdvancedManager<string, Page>;\r\n\r\n    install(): any,\r\n\r\n    get(key): Page,\r\n    add(value): PageManager,\r\n    set(key, value): PageManager,\r\n    remove(key): PageManager,\r\n    has(key): boolean,\r\n    clear(): PageManager,\r\n    size: number,\r\n    keys(): any[],\r\n\r\n    load(_url: URL | string): Promise<Page>,\r\n    request(url: string): Promise<string>,\r\n}\r\n\r\n/** Controls which page to load */\r\nexport class PageManager extends Service implements IPageManager {\r\n    /** Stores all fetch requests that are currently loading */\r\n    public loading: Manager<string, Promise<string>> = new Manager();\r\n\r\n    pages: AdvancedManager<string, Page>;\r\n\r\n    /** Instantiate pages, and add the current page to pages */\r\n    install() {\r\n        this.pages = new AdvancedManager(this.app);\r\n\r\n        let URLString = newURL().pathname;\r\n        this.set(URLString, new Page());\r\n        URLString = undefined;\r\n    }\r\n\r\n    get(key) { return this.pages.get(key); }\r\n    add(value) { this.pages.add(value); return this; }\r\n    set(key, value) { this.pages.set(key, value); return this; }\r\n    remove(key) { this.pages.remove(key); return this; }\r\n    has(key) { return this.pages.has(key); }\r\n    clear() { this.pages.clear(); return this; }\r\n    get size() { return this.pages.size; }\r\n    keys() { return this.pages.keys(); }\r\n\r\n    /** Load from cache or by requesting URL via a fetch request, avoid requesting for the same thing twice by storing the fetch request in \"this.loading\" */\r\n    public async load(_url: URL | string = newURL()): Promise<Page> {\r\n        let url: URL = newURL(_url);\r\n        let urlString: string = url.pathname;\r\n        let page: Page, request: Promise<string>;\r\n\r\n        if (this.has(urlString)) {\r\n            page = this.get(urlString);\r\n            return Promise.resolve(page);\r\n        }\r\n\r\n        if (!this.loading.has(urlString)) {\r\n            request = this.request(urlString);\r\n            this.loading.set(urlString, request);\r\n        } else request = this.loading.get(urlString);\r\n\r\n        let response = await request;\r\n        this.loading.remove(urlString);\r\n\r\n        page = new Page(url, response);\r\n        this.set(urlString, page);\r\n\r\n        if (this.size > getConfig(this.config, \"maxPages\")) {\r\n            let currentUrl = newURL();\r\n            let keys = this.keys();\r\n            let first = equal(currentUrl, keys[0]) ? keys[1] : keys[0];\r\n            let page = this.get(first);\r\n            page.unregister();\r\n            page = undefined;\r\n            keys = undefined;\r\n            currentUrl = undefined;\r\n            first = undefined;\r\n        }\r\n\r\n        return page;\r\n    }\r\n\r\n    /** Starts a fetch request */\r\n    public async request(url: string): Promise<string> {\r\n        const headers = new Headers(getConfig(this.config, \"headers\"));\r\n        const timeout = window.setTimeout(() => {\r\n            window.clearTimeout(timeout);\r\n            throw \"Request Timed Out!\";\r\n        }, getConfig(this.config, \"timeout\"));\r\n\r\n        try {\r\n            let response = await fetch(url, {\r\n                mode: 'same-origin',\r\n                method: \"GET\",\r\n                headers,\r\n                cache: \"default\",\r\n                credentials: \"same-origin\",\r\n            });\r\n\r\n            window.clearTimeout(timeout);\r\n            if (response.status >= 200 && response.status < 300) {\r\n                return await response.text();\r\n            }\r\n\r\n            const err = new Error(response.statusText || \"\" + response.status);\r\n            throw err;\r\n        } catch (err) {\r\n            window.clearTimeout(timeout);\r\n            throw err;\r\n        }\r\n    }\r\n}\r\n", "import { Manager } from \"./manager\";\r\nimport { ICoords, newCoords, Trigger } from \"./history\";\r\nimport { IPage } from \"./page\";\r\nimport { getConfig } from \"./config\";\r\nimport { Service } from \"./service\";\r\nimport { newURL } from \"./url\";\r\n\r\n/**\r\n * The async function type, allows for smooth transition between Promises\r\n */\r\nexport type asyncFn = (err?: any, value?: any) => void;\r\nexport interface ITransition {\r\n    oldPage?: IPage;\r\n    newPage?: IPage;\r\n    trigger?: Trigger;\r\n    scroll?: { x: number; y: number };\r\n    scrollable?: boolean;\r\n    in: (data: ITransitionData) => any;\r\n    out: (data: ITransitionData) => any;\r\n    [key: string]: any;\r\n}\r\nexport interface ITransitionData {\r\n    from?: IPage;\r\n    to?: IPage;\r\n    trigger?: Trigger;\r\n    scroll?: ICoords;\r\n    done: asyncFn;\r\n}\r\nexport interface ITransitionManager extends Service {\r\n    transitions: Manager<string, ITransition>,\r\n\r\n    get(key: string): ITransition,\r\n    set(key: string, value: ITransition): TransitionManager,\r\n    add(value: ITransition): TransitionManager,\r\n    has(key: string): boolean,\r\n\r\n    boot(): any,\r\n    animate(name: string, data: any): Promise<ITransition>,\r\n}\r\n\r\n/** Auto scrolls to an elements position if the element has an hash */\r\nexport const hashAction = (coords?: ICoords, hash: string = window.location.hash) => {\r\n    try {\r\n        let _hash = hash[0] == \"#\" ? hash : newURL(hash).hash;\r\n        if (_hash.length > 1) {\r\n            let el = document.getElementById(_hash.slice(1));\r\n            if (el) {\r\n                let { left, top } = el.getBoundingClientRect();\r\n                let scrollLeft = window.scrollX;\r\n                let scrollTop = window.scrollY;\r\n                let x = left + scrollLeft;\r\n                let y = top + scrollTop;\r\n\r\n                console.log(x, y);\r\n                return newCoords(x, y);\r\n            }\r\n        }\r\n    } catch (e) {\r\n        console.warn(\"[hashAction] error\", e);\r\n    }\r\n\r\n    return coords ?? newCoords(0, 0);\r\n};\r\n\r\n// The Default Transition\r\nconst Default: ITransition = {\r\n    name: \"default\",\r\n    scrollable: true,\r\n\r\n    out({ done }: ITransitionData) {\r\n        done();\r\n    },\r\n    in({ scroll, done }: ITransitionData) {\r\n        window.scroll(scroll.x, scroll.y);\r\n        done();\r\n    }\r\n};\r\n\r\n/** Controls which Transition between pages to use */\r\nexport class TransitionManager extends Service implements ITransitionManager {\r\n    transitions: Manager<string, ITransition>;\r\n    private _arg: Array<[string, ITransition]>;\r\n    constructor(transitions?: Array<[string, ITransition]>) {\r\n        super();\r\n        this._arg = transitions;\r\n    }\r\n\r\n    /** On Service install set Config */\r\n    public install() {\r\n        super.install();\r\n\r\n        let transitions = this._arg && this._arg.length ? this._arg : (getConfig(this.config, \"transitions\") ?? []);\r\n\r\n        // Manager like Maps use the most recent [key, value] Array it knows, replacing the default transition\r\n        // With any other transitions called [\"default\", ...]\r\n        transitions = [[\"default\", Default]].concat(transitions);\r\n        this.transitions = new Manager(transitions);\r\n    }\r\n\r\n    get(key: string) { return this.transitions.get(key); }\r\n    set(key: string, value: ITransition) { this.transitions.set(key, value); return this; }\r\n    add(value: ITransition) { this.transitions.add(value); return this; }\r\n    has(key: string) { return this.transitions.has(key); }\r\n\r\n    /** Starts a transition */\r\n    public async animate(name: string, data: any): Promise<ITransition> {\r\n        let transition: ITransition = this.transitions.get(name);\r\n        let scroll = data.scroll;\r\n        let ignoreHashAction = data.ignoreHashAction;\r\n        if (!(\"wrapper\" in data.oldPage) || !(\"wrapper\" in data.newPage))\r\n            throw `[Page] either oldPage or newPage aren't instances of the Page Class.\\n ${{\r\n                newPage: data.newPage,\r\n                oldPage: data.oldPage,\r\n            }}`;\r\n\r\n        // Replace the title\r\n        document.title = `` + data.newPage.title;\r\n\r\n        let fromWrapper = data.oldPage.wrapper;\r\n        let toWrapper = data.newPage.wrapper;\r\n\r\n        if (!(fromWrapper instanceof Node) || !(toWrapper instanceof Node))\r\n            throw `[Wrapper] the wrapper from the ${!(toWrapper instanceof Node) ? \"next\" : \"current\"\r\n            } page cannot be found. The wrapper must be an element that has the attribute ${getConfig(this.config,\r\n                \"wrapperAttr\"\r\n            )}.`;\r\n\r\n        // Give the Transition all the background data it may require\r\n        transition.init && transition?.init(data);\r\n\r\n        this.emitter.emit(\"BEFORE_TRANSITION_OUT\");\r\n\r\n        // Start the out point of the Transition\r\n        if (transition.out) {\r\n            await new Promise((done) => {\r\n                let outMethod: Promise<any> = transition.out.call(transition, {\r\n                    ...data,\r\n                    from: data.oldPage,\r\n                    trigger: data.trigger,\r\n                    done,\r\n                });\r\n\r\n                outMethod?.then(done);\r\n            });\r\n        }\r\n\r\n        this.emitter.emit(\"AFTER_TRANSITION_OUT\");\r\n\r\n        // Add the new wrapper before the old one\r\n        await new Promise<void>((done) => {\r\n            fromWrapper.insertAdjacentElement(\"beforebegin\", toWrapper);\r\n            this.emitter.emit(\"CONTENT_INSERT\");\r\n\r\n            if (!ignoreHashAction && !/back|popstate|forward/.test(data.trigger as string)) {\r\n                scroll = hashAction(scroll);\r\n            }\r\n            done();\r\n        });\r\n\r\n        // Replace the old wrapper with the new one\r\n        await new Promise<void>((done) => {\r\n            fromWrapper.remove();\r\n            fromWrapper = undefined;\r\n            toWrapper = undefined;\r\n            this.emitter.emit(\"CONTENT_REPLACED\");\r\n            done();\r\n        });\r\n\r\n        this.emitter.emit(\"BEFORE_TRANSITION_IN\");\r\n\r\n        // Start the in point of the Transition (only the in method has access to the hashAction's scroll position)\r\n        if (transition.in) {\r\n            await new Promise(async (done) => {\r\n                let inMethod: Promise<any> = transition.in.call(transition, {\r\n                    ...data,\r\n                    from: data.oldPage,\r\n                    to: data.newPage,\r\n                    trigger: data.trigger,\r\n                    scroll,\r\n                    done,\r\n                });\r\n\r\n                inMethod?.then(done);\r\n            });\r\n        }\r\n\r\n        this.emitter.emit(\"AFTER_TRANSITION_IN\");\r\n        return transition;\r\n    }\r\n}\r\n", "import { Manager, methodCall } from \"@okikio/manager\";\r\n\r\nexport type ListenerCallback = ((...args: any) => void);\r\nexport interface IListener {\r\n    readonly callback: ListenerCallback;\r\n    readonly scope: object;\r\n    readonly name: string;\r\n}\r\n\r\n/** Represents a new event listener consisting of properties like: callback, scope, name */\r\nexport const newListener = ({\r\n    callback = () => { },\r\n    scope = null,\r\n    name = \"event\",\r\n}: IListener): IListener => ({ callback, scope, name });\r\n\r\n/** Represents a new event  */\r\nexport class Event extends Manager<number, IListener> {\r\n    /** The name of the event */\r\n    public name: string;\r\n    constructor(name: string = \"event\") {\r\n        super();\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport type EventInput = string | object | Array<string>;\r\n\r\n/**\r\n * An Event Emitter\r\n * */\r\nexport class EventEmitter extends Manager<string, Event> {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /** Gets event, if event doesn't exist create a new one */\r\n    public getEvent(name: string): Event {\r\n        let event = this.get(name);\r\n        if (!(event instanceof Event)) {\r\n            this.set(name, new Event(name));\r\n            return this.get(name);\r\n        }\r\n\r\n        return event;\r\n    }\r\n\r\n    /** Adds a listener to a given event */\r\n    public on(\r\n        events: EventInput,\r\n        callback?: ListenerCallback | object,\r\n        scope?: object\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (typeof events == \"undefined\") return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\r\n\r\n        let _name: string;\r\n        let _callback: ListenerCallback;\r\n        let isObject = typeof events == \"object\" && !Array.isArray(events);\r\n\r\n        let _scope: object = isObject ? callback : scope;\r\n        if (!isObject) _callback = (callback as ListenerCallback);\r\n\r\n        // Loop through the list of events\r\n        Object.keys(events).forEach(key => {\r\n            // Select the name of the event from the list\r\n            // Remember events can be {String | Object | Array<string>}\r\n\r\n            // Check If events is an Object (JSON like Object, and not an Array)\r\n            if (isObject) {\r\n                _name = key;\r\n                _callback = events[key];\r\n            } else {\r\n                _name = events[key];\r\n            }\r\n\r\n            let event = this.getEvent(_name);\r\n            event.add(newListener({\r\n                name: _name,\r\n                callback: _callback,\r\n                scope: _scope\r\n            }));\r\n        }, this);\r\n        return this;\r\n    }\r\n\r\n    /** Removes a listener from an event */\r\n    public removeListener(\r\n        name: string,\r\n        callback: ListenerCallback,\r\n        scope: object\r\n    ): Event {\r\n        let event: Event = this.get(name);\r\n        if (event instanceof Event && callback) {\r\n            let listener = newListener({ name, callback, scope });\r\n\r\n            event.forEach((value: IListener, i: number) => {\r\n                if (\r\n                    value.callback === listener.callback &&\r\n                    value.scope === listener.scope\r\n                ) return event.remove(i);\r\n            });\r\n        }\r\n\r\n        return event;\r\n    }\r\n\r\n    /** Remove a listener from a given event, or just completely remove an event */\r\n    public off(\r\n        events: EventInput,\r\n        callback?: ListenerCallback | object,\r\n        scope?: object\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (typeof events == \"undefined\") return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\r\n\r\n        let _name: string;\r\n        let _callback: ListenerCallback;\r\n        let isObject = typeof events == \"object\" && !Array.isArray(events);\r\n\r\n        let _scope: object = isObject ? callback : scope;\r\n        if (!isObject) _callback = (callback as ListenerCallback);\r\n\r\n        // Loop through the list of events\r\n        Object.keys(events).forEach(key => {\r\n            // Select the name of the event from the list\r\n            // Remember events can be {String | Object | Array<any>}\r\n\r\n            // Check If events is an Object (JSON like Object, and not an Array)\r\n            if (isObject) {\r\n                _name = key;\r\n                _callback = events[key];\r\n            } else {\r\n                _name = events[key];\r\n            }\r\n\r\n            if (typeof _callback === \"function\") {\r\n                this.removeListener(_name, _callback, _scope);\r\n            } else this.remove(_name);\r\n        }, this);\r\n        return this;\r\n    }\r\n\r\n    /** Call all listeners within an event */\r\n    public emit(\r\n        events: string | Array<any>,\r\n        ...args: any\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (typeof events == \"undefined\") return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\r\n\r\n        // Loop through the list of events\r\n        events.forEach((event: string) => {\r\n            let _event: Event = this.get(event);\r\n\r\n            if (_event instanceof Event) {\r\n                _event.forEach((listener: IListener) => {\r\n                    let { callback, scope } = listener;\r\n                    callback.apply(scope, args);\r\n                });\r\n            }\r\n        }, this);\r\n        return this;\r\n    }\r\n\r\n    /** Clears events and event listeners */\r\n    public clear() {\r\n        methodCall(this, \"clear\");\r\n        super.clear();\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default EventEmitter;\r\n", "import { EventEmitter, ListenerCallback, EventInput } from \"@okikio/emitter\";\r\nimport { ServiceManager, Service } from \"./service\";\r\nimport { newConfig, ICONFIG, getConfig } from \"./config\";\r\n\r\nexport interface IApp {\r\n    services: ServiceManager,\r\n    emitter: EventEmitter,\r\n    config: ICONFIG,\r\n    register(config: ICONFIG): App,\r\n    get(key: string): Service,\r\n    set(key: string, service: Service): App,\r\n    add(value: Service): App,\r\n    boot(): App,\r\n    stop(): App,\r\n    on(events: EventInput, callback?: ListenerCallback): App,\r\n    off(events: EventInput, callback?: ListenerCallback): App,\r\n    emit(events: string | any[], ...args: any): App,\r\n}\r\n\r\n/** The App class starts the entire process, it controls all managers and all services */\r\nexport class App implements IApp {\r\n    /** An instance of the ServiceManager */\r\n    public services: ServiceManager;\r\n\r\n    /** An instance of an EventEmitter */\r\n    public emitter: EventEmitter;\r\n\r\n    /** The current Configuration's for the App */\r\n    public config: ICONFIG;\r\n\r\n    private canResize = true;\r\n    private canScroll = true;\r\n    constructor(config: object = {}) {\r\n        this._resize = this._resize.bind(this);\r\n        this._scroll = this._scroll.bind(this);\r\n        this._ready = this._ready.bind(this);\r\n        this.register(config);\r\n    }\r\n\r\n    /** Create new instances of the ServiceManager, EventEmitter and the configurations */\r\n    public register(config: ICONFIG = {}): App {\r\n        this.config = newConfig(config);\r\n        this.emitter = new EventEmitter();\r\n        this.services = new ServiceManager(this);\r\n\r\n        document.addEventListener(\"DOMContentLoaded\", this._ready);\r\n        window.addEventListener(\"load\", this._ready);\r\n        window.addEventListener(\"resize\", this._resize, { passive: true });\r\n        window.addEventListener(\"scroll\", this._scroll, { passive: true });\r\n        return this;\r\n    }\r\n\r\n    private _ready() {\r\n        document.removeEventListener(\"DOMContentLoaded\", this._ready);\r\n        window.removeEventListener(\"load\", this._ready);\r\n        this.emitter.emit(\"READY ready\");\r\n    }\r\n\r\n    private _resize() {\r\n        if (this.canResize) {\r\n            let timer: number | void, raf: number | void;\r\n            this.canResize = false;\r\n            raf = window.requestAnimationFrame(() => {\r\n                this.emitter.emit(\"RESIZE resize\");\r\n\r\n                // set a timeout to un-throttle\r\n                timer = window.setTimeout(() => {\r\n                    this.canResize = true;\r\n                    timer = window.clearTimeout(timer as number);\r\n                    raf = window.cancelAnimationFrame(raf as number);\r\n                }, getConfig(this.config, \"resizeDelay\"));\r\n            });\r\n        }\r\n    }\r\n\r\n    private _scroll() {\r\n        if (this.canScroll) {\r\n            let raf: number | void;\r\n            this.canScroll = false;\r\n            raf = requestAnimationFrame(() => {\r\n                this.emitter.emit(\"SCROLL scroll\");\r\n\r\n                this.canScroll = true;\r\n                raf = window.cancelAnimationFrame(raf as number);\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Shortcuts to adding, setting, and getting Services */\r\n    public get(key: string): Service {\r\n        return this.services.get(key);\r\n    }\r\n\r\n    public set(key: string, value: Service): App {\r\n        this.services.set(key, value);\r\n        return this;\r\n    }\r\n\r\n    public add(value: Service): App {\r\n        this.services.add(value);\r\n        return this;\r\n    }\r\n\r\n    /** Initialize and boot all Services */\r\n    public boot(): App {\r\n        this.services.init();\r\n        this.services.boot();\r\n        return this;\r\n    }\r\n\r\n    /** Stops all Services and clears the even emitter of all events and listeners */\r\n    public stop(): App {\r\n        this.services.stop();\r\n        this.emitter.clear();\r\n        return this;\r\n    }\r\n\r\n    /** Shortcuts to the App EventEmitter on, off, and emit methods */\r\n    public on(events: EventInput, callback?: ListenerCallback): App {\r\n        this.emitter.on(events, callback, this);\r\n        return this;\r\n    }\r\n\r\n    public off(events: EventInput, callback?: ListenerCallback): App {\r\n        this.emitter.off(events, callback, this);\r\n        return this;\r\n    }\r\n\r\n    public emit(events: string | any[], ...args: any): App {\r\n        this.emitter.emit(events, ...args);\r\n        return this;\r\n    }\r\n}\r\n", "import { newState, Trigger, newCoords, IHistoryItem, IHistoryManager } from \"./history\";\r\nimport { Service } from \"./service\";\r\nimport { IPage, IPageManager } from \"./page\";\r\nimport { newURL, getHashedPath, equal } from \"./url\";\r\nimport { getConfig } from \"./config\";\r\nimport { hashAction, ITransitionManager } from \"./transition\";\r\n\r\nexport type LinkEvent = MouseEvent | TouchEvent;\r\nexport type StateEvent = LinkEvent | PopStateEvent;\r\nexport type IgnoreURLsList = Array<RegExp | string>;\r\n/**\r\n * Creates a barbajs like PJAX Service, for the native framework\r\n * Based on barbajs and StartingBlocks\r\n */\r\nexport class PJAX extends Service {\r\n    /** URLs to ignore when prefetching */\r\n    public ignoreURLs: IgnoreURLsList;\r\n\r\n    /** Whether or not to disable prefetching */\r\n    public prefetchIgnore: boolean;\r\n\r\n    /** Current state of transitions */\r\n    public isTransitioning: boolean;\r\n\r\n    /** Ignore extra clicks of an anchor element if a transition has already started */\r\n    public stopOnTransitioning: boolean;\r\n\r\n    /** On page change (excluding popstate events) keep current scroll position */\r\n    public stickyScroll: boolean;\r\n\r\n    /** Force load a page if an error occurs */\r\n    public forceOnError: boolean;\r\n\r\n    /** Ignore hash action if set to true */\r\n    public ignoreHashAction: boolean;\r\n\r\n    public install() {\r\n        super.install();\r\n\r\n        this.ignoreURLs = getConfig(this.config, \"ignoreURLs\") ?? [];\r\n        this.prefetchIgnore = getConfig(this.config, \"prefetchIgnore\") ?? false;\r\n        this.stopOnTransitioning = getConfig(this.config, \"stopOnTransitioning\") ?? false;\r\n        this.stickyScroll = getConfig(this.config, \"stickyScroll\") ?? false;\r\n        this.forceOnError = getConfig(this.config, \"forceOnError\") ?? false;\r\n        this.ignoreHashAction = getConfig(this.config, \"ignoreHashAction\") ?? false\r\n    }\r\n\r\n    /** Sets the transition state to either true or false */\r\n    public transitionStart() {\r\n        this.isTransitioning = true;\r\n    }\r\n\r\n    public transitionStop() {\r\n        this.isTransitioning = false;\r\n    }\r\n\r\n    public init() {\r\n        /**\r\n         * Bind the event listeners to the PJAX class\r\n         *\r\n         * @memberof PJAX\r\n         */\r\n        this.onHover = this.onHover.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n        this.onStateChange = this.onStateChange.bind(this);\r\n    }\r\n\r\n    /** Starts the PJAX Service */\r\n    public boot() {\r\n        if (\"scrollRestoration\" in window.history) {\r\n            // Back off, browser, I got this...\r\n            window.history.scrollRestoration = \"manual\";\r\n        }\r\n\r\n        super.boot();\r\n    }\r\n\r\n    /** Gets the transition to use for a certain anchor */\r\n    public getTransitionName(el: HTMLAnchorElement): string | null {\r\n        if (!el || !el.getAttribute) return null;\r\n        let transitionAttr = el.getAttribute(\r\n            getConfig(this.config, \"transitionAttr\", false)\r\n        );\r\n\r\n        if (typeof transitionAttr === \"string\") return transitionAttr;\r\n        return null;\r\n    }\r\n\r\n    /** Checks to see if the anchor is valid */\r\n    public validLink(\r\n        el: HTMLAnchorElement,\r\n        event: LinkEvent | KeyboardEvent,\r\n        href: string\r\n    ): boolean {\r\n        let pushStateSupport = !window.history.pushState;\r\n        let exists = !el || !href;\r\n        let eventMutate =\r\n            (event as KeyboardEvent).metaKey ||\r\n            (event as KeyboardEvent).ctrlKey ||\r\n            (event as KeyboardEvent).shiftKey ||\r\n            (event as KeyboardEvent).altKey;\r\n        let newTab =\r\n            el.hasAttribute(\"target\") &&\r\n            (el as HTMLAnchorElement).target === \"_blank\";\r\n        let crossOrigin =\r\n            (el as HTMLAnchorElement).protocol !== location.protocol ||\r\n            (el as HTMLAnchorElement).hostname !== location.hostname;\r\n        let download = typeof el.getAttribute(\"download\") === \"string\";\r\n        let preventSelf = el.matches(getConfig(this.config, \"preventSelfAttr\"));\r\n        let preventAll = Boolean(\r\n            el.closest(getConfig(this.config, \"preventAllAttr\"))\r\n        );\r\n        let sameURL = getHashedPath(newURL()) === getHashedPath(newURL(href));\r\n        return !(\r\n            exists ||\r\n            pushStateSupport ||\r\n            eventMutate ||\r\n            newTab ||\r\n            crossOrigin ||\r\n            download ||\r\n            preventSelf ||\r\n            preventAll ||\r\n            sameURL\r\n        );\r\n    }\r\n\r\n    /** Returns the href of an Anchor element */\r\n    public getHref(el: HTMLAnchorElement): string | null {\r\n        if (\r\n            el &&\r\n            el.tagName &&\r\n            el.tagName.toLowerCase() === \"a\" &&\r\n            typeof el.href === \"string\"\r\n        )\r\n            return el.href;\r\n        return null;\r\n    }\r\n\r\n    /** Check if event target is a valid anchor with an href, if so, return the anchor */\r\n    public getLink(event: LinkEvent): HTMLAnchorElement {\r\n        let el = event.target as HTMLAnchorElement;\r\n        let href: string = this.getHref(el);\r\n\r\n        while (el && !href) {\r\n            el = (el as HTMLElement).parentNode as HTMLAnchorElement;\r\n            href = this.getHref(el);\r\n        }\r\n\r\n        // Check for a valid link\r\n        if (!el || !this.validLink(el, event, href)) return;\r\n        return el;\r\n    }\r\n\r\n    /** When an element is clicked, get valid anchor element, go for a transition */\r\n    public onClick(event: LinkEvent) {\r\n        let el = this.getLink(event);\r\n        if (!el) return;\r\n\r\n        if (this.isTransitioning && this.stopOnTransitioning) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            return;\r\n        }\r\n\r\n        let href = this.getHref(el);\r\n        this.emitter.emit(\"ANCHOR_CLICK CLICK\", event);\r\n        this.go({ href, trigger: el, event });\r\n    }\r\n\r\n    /** Returns the direction of the State change as a String, either the Back button or the Forward button */\r\n    public getDirection(value: number): Trigger {\r\n        if (Math.abs(value) > 1) {\r\n            // Ex 6-0 > 0 -> forward, 0-6 < 0 -> back\r\n            return value > 0 ? \"forward\" : \"back\";\r\n        } else {\r\n            if (value === 0) {\r\n                return \"popstate\";\r\n            } else {\r\n                // Ex 6-5 > 0 -> back, 5-6 < 0 -> forward\r\n                return value > 0 ? \"back\" : \"forward\";\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Force a page to go to a certain URL */\r\n    public force(href: string): void {\r\n        window.location.assign(href);\r\n    }\r\n\r\n    /**\r\n     * If transition is running force load page.\r\n     * Stop if currentURL is the same as new url.\r\n     * On state change, change the current state history, to reflect the direction of said state change\r\n     * Load page and page transition.\r\n     */\r\n    public go({\r\n        href,\r\n        trigger = \"HistoryManager\",\r\n        event,\r\n    }: {\r\n        href: string;\r\n        trigger?: Trigger;\r\n        event?: StateEvent;\r\n    }): Promise<void> {\r\n        // If transition is already running and the go method is called again, force load page\r\n        if (this.isTransitioning && this.stopOnTransitioning ||\r\n            !(this.manager.has(\"TransitionManager\") &&\r\n                this.manager.has(\"HistoryManager\") &&\r\n                this.manager.has(\"PageManager\"))) {\r\n            this.force(href);\r\n            return;\r\n        }\r\n\r\n        const history = this.manager.get(\"HistoryManager\") as IHistoryManager;\r\n        let scroll = newCoords(0, 0);\r\n        let currentState = history.current;\r\n        let currentURL = currentState.url;\r\n        if (equal(currentURL, href)) {\r\n            return;\r\n        }\r\n\r\n        let transitionName: string;\r\n        if (event && (event as PopStateEvent).state) {\r\n            this.emitter.emit(\"POPSTATE\", event);\r\n\r\n            // If popstate, get back/forward direction.\r\n            let { state }: { state: IHistoryItem } = event as PopStateEvent;\r\n            let { index } = state;\r\n            let currentIndex = currentState.index;\r\n            let difference = currentIndex - index;\r\n\r\n            history.replace(state.states);\r\n            history.pointer = index;\r\n\r\n            let _state = history.get(index);\r\n            transitionName = _state.transition;\r\n            scroll = _state.data.scroll;\r\n\r\n            trigger = this.getDirection(difference);\r\n            console.log(trigger == \"forward\" && history)\r\n\r\n            // Based on the direction of the state change either remove or add a state\r\n            this.emitter.emit(trigger === \"back\" ? `POPSTATE_BACK` : `POPSTATE_FORWARD`, event);\r\n        } else {\r\n            // Add new state\r\n            transitionName = this.getTransitionName(trigger as HTMLAnchorElement);\r\n\r\n            scroll = newCoords();\r\n            let state = newState({\r\n                url: href,\r\n                transition: transitionName,\r\n                data: { scroll },\r\n            });\r\n\r\n            !this.stickyScroll && (scroll = newCoords(0, 0));\r\n\r\n            history.add(state);\r\n            this.emitter.emit(\"HISTORY_NEW_ITEM\", event);\r\n        }\r\n\r\n        if (event) {\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        }\r\n\r\n        this.emitter.emit(\"GO\", event);\r\n        return this.load({\r\n            oldHref: currentURL,\r\n            href,\r\n            trigger,\r\n            transitionName,\r\n            scroll,\r\n        });\r\n    }\r\n\r\n    /** Load the new Page as well as a Transition; starts the Transition */\r\n    public async load({\r\n        oldHref,\r\n        href,\r\n        trigger,\r\n        transitionName = \"default\",\r\n        scroll = { x: 0, y: 0 },\r\n    }: {\r\n        oldHref: string;\r\n        href: string;\r\n        trigger: Trigger;\r\n        transitionName?: string;\r\n        scroll: { x: number; y: number };\r\n    }): Promise<any> {\r\n        try {\r\n            const pages = this.manager.get(\"PageManager\") as IPageManager;\r\n            let newPage: IPage, oldPage: IPage;\r\n            this.emitter.emit(\"NAVIGATION_START\", {\r\n                oldHref,\r\n                href,\r\n                trigger,\r\n                transitionName,\r\n            });\r\n\r\n            // Load & Build both the old and new pages\r\n            try {\r\n                this.transitionStart();\r\n                oldPage = await pages.load(oldHref);\r\n                !(oldPage.dom instanceof Element) && oldPage.build();\r\n\r\n                this.emitter.emit(\"PAGE_LOADING\", { href, oldPage, trigger });\r\n                newPage = await pages.load(href);\r\n                await newPage.build();\r\n                this.emitter.emit(\"PAGE_LOAD_COMPLETE\", {\r\n                    newPage,\r\n                    oldPage,\r\n                    trigger,\r\n                });\r\n            } catch (err) {\r\n                console.warn(`[PJAX] Page load error: ${err}`);\r\n            }\r\n\r\n            // Transition Between Pages\r\n            try {\r\n                const TransitionManager = this.manager.get(\"TransitionManager\") as ITransitionManager;\r\n                this.emitter.emit(\"TRANSITION_START\", transitionName);\r\n\r\n                let transition = await TransitionManager.animate(TransitionManager.has(transitionName) ? transitionName : \"default\", {\r\n                    oldPage,\r\n                    newPage,\r\n                    trigger,\r\n                    scroll,\r\n                    ignoreHashAction: this.ignoreHashAction\r\n                });\r\n\r\n                if (!transition.scrollable) {\r\n                    if (!this.ignoreHashAction && !/back|popstate|forward/.test(trigger as string)) scroll = hashAction(scroll);\r\n                    window.scroll(scroll.x, scroll.y);\r\n                }\r\n\r\n                this.emitter.emit(\"TRANSITION_END\", { transition });\r\n            } catch (err) {\r\n                console.warn(`[PJAX] Transition error: ${err}`);\r\n            }\r\n\r\n            // Navigation is over\r\n            this.emitter.emit(\"NAVIGATION_END\", {\r\n                oldPage,\r\n                newPage,\r\n                trigger,\r\n                transitionName,\r\n            });\r\n        } catch (err) {\r\n            if (this.forceOnError) this.force(href);\r\n            else console.warn(err);\r\n        } finally {\r\n            this.transitionStop(); // Sets isTransitioning to false\r\n        }\r\n    }\r\n\r\n    /** Check to see if the URL is to be ignored, uses either RegExp of Strings to check */\r\n    public ignoredURL({ pathname }: URL): boolean {\r\n        return (\r\n            this.ignoreURLs.length &&\r\n            this.ignoreURLs.some((url) => {\r\n                return typeof url === \"string\"\r\n                    ? url === pathname\r\n                    : (url as RegExp).exec(pathname) !== null;\r\n            })\r\n        );\r\n    }\r\n\r\n    /** When you hover over an anchor, prefetch the event target's href */\r\n    public onHover(event: LinkEvent): Promise<void> {\r\n        let el = this.getLink(event);\r\n        if (!el || !this.manager.has(\"PageManager\")) return;\r\n\r\n        const pages = this.manager.get(\"PageManager\") as IPageManager;\r\n        let url = newURL(this.getHref(el));\r\n        let urlString: string = url.pathname;\r\n\r\n        // If Url is ignored or already in cache, don't do any think\r\n        if (this.ignoredURL(url) || pages.has(urlString)) return;\r\n        this.emitter.emit(\"ANCHOR_HOVER HOVER\", event);\r\n\r\n        try {\r\n            pages.load(url);\r\n        } catch (err) {\r\n            console.warn(\"[PJAX] prefetch error,\", err);\r\n        }\r\n    }\r\n\r\n    /** When History state changes, get url from State, go for a Transition. */\r\n    public onStateChange(event: PopStateEvent): void {\r\n        this.go({ href: window.location.href, trigger: \"popstate\", event });\r\n    }\r\n\r\n    /** Initialize DOM Events */\r\n    public initEvents() {\r\n        if (this.prefetchIgnore !== true) {\r\n            document.addEventListener(\"mouseover\", this.onHover);\r\n            document.addEventListener(\"touchstart\", this.onHover);\r\n        }\r\n\r\n        document.addEventListener(\"click\", this.onClick);\r\n        window.addEventListener(\"popstate\", this.onStateChange);\r\n    }\r\n\r\n    /** Stop DOM Events */\r\n    public stopEvents() {\r\n        if (this.prefetchIgnore !== true) {\r\n            document.removeEventListener(\"mouseover\", this.onHover);\r\n            document.removeEventListener(\"touchstart\", this.onHover);\r\n        }\r\n\r\n        document.removeEventListener(\"click\", this.onClick);\r\n        window.removeEventListener(\"popstate\", this.onStateChange);\r\n    }\r\n}\r\n", "import { Service } from \"./service\";\r\nimport { Manager } from \"./manager\";\r\nimport { newURL, getHashedPath } from \"./url\";\r\nimport { IHistoryManager } from \"./history\";\r\n\r\nexport type RouteMethod = (...args: any) => any;\r\nexport type RouteStyle = string | RegExp | boolean;\r\nexport interface IRouteToFrom {\r\n    to: RouteStyle,\r\n    from: RouteStyle\r\n}\r\nexport type RoutePath = IRouteToFrom | RouteStyle;\r\nexport interface IRoute {\r\n    path: RoutePath,\r\n    method: RouteMethod\r\n}\r\n\r\n/** Controls what happens when certain url paths match a set of criteria */\r\nexport class Router extends Service {\r\n    /** List of routes */\r\n    protected routes: Manager<IRouteToFrom, RouteMethod>;\r\n    constructor(routes: IRoute[] = []) {\r\n        super();\r\n        this.routes = new Manager();\r\n        for (let route of routes) {\r\n            this.add(route);\r\n        }\r\n    }\r\n\r\n    /** Add a new route to watch for */\r\n    public add({ path, method }: IRoute): Router {\r\n        let key = this.parse(path);\r\n        this.routes.set(key, method);\r\n        return this;\r\n    }\r\n\r\n    /** Convert strings into path match functions */\r\n    public parsePath(path: RouteStyle): RegExp | boolean {\r\n        if (typeof path === \"string\") return new RegExp(path, \"i\");\r\n        else if (path instanceof RegExp || typeof path === \"boolean\")\r\n            return path;\r\n        throw \"[Router] only regular expressions, strings and booleans are accepted as paths.\";\r\n    }\r\n\r\n    /** Determines if a strings counts has a path */\r\n    public isPath(input: RouteStyle): boolean {\r\n        return (\r\n            typeof input === \"string\" ||\r\n            input instanceof RegExp ||\r\n            typeof input === \"boolean\"\r\n        );\r\n    }\r\n\r\n    /** Parse the multiple different formats for paths, into a { from, to } object */\r\n    public parse(input: RoutePath): IRouteToFrom {\r\n        let route = input as IRouteToFrom;\r\n        let toFromPath: IRouteToFrom = {\r\n            from: /(.*)/g,\r\n            to: /(.*)/g,\r\n        };\r\n\r\n        if (this.isPath(input as RouteStyle))\r\n            toFromPath = {\r\n                from: true,\r\n                to: input as RouteStyle,\r\n            };\r\n        else if (this.isPath(route.from) && this.isPath(route.to as RouteStyle))\r\n            toFromPath = route;\r\n        else\r\n            throw \"[Router] path is neither a string, regular expression, or a { from, to } object.\";\r\n\r\n        let { from, to } = toFromPath;\r\n        return {\r\n            from: this.parsePath(from),\r\n            to: this.parsePath(to),\r\n        };\r\n    }\r\n\r\n    /** Test if route paths are true, if so run their methods */\r\n    public route() {\r\n        if (this.manager.has(\"HistoryManager\")) {\r\n            let history = this.manager.get(\"HistoryManager\") as IHistoryManager;\r\n            let from: string = getHashedPath(newURL((history.length > 1 ? history.previous : history.current).url));\r\n            let to: string = getHashedPath(newURL());\r\n\r\n            this.routes.forEach((method: RouteMethod, path: IRouteToFrom) => {\r\n                let fromRegExp = path.from as RegExp | boolean;\r\n                let toRegExp = path.to as RegExp | boolean;\r\n\r\n                if (\r\n                    typeof fromRegExp === \"boolean\" &&\r\n                    typeof toRegExp === \"boolean\"\r\n                ) {\r\n                    throw `[Router] path ({ from: ${fromRegExp}, to: ${toRegExp} }) is not valid, remember paths can only be strings, regular expressions, or a boolean; however, both the from and to paths cannot be both booleans.`;\r\n                }\r\n\r\n                let fromParam: RegExpExecArray | RegExp | boolean = fromRegExp;\r\n                let toParam: RegExpExecArray | RegExp | boolean = toRegExp;\r\n\r\n                if (fromRegExp instanceof RegExp && fromRegExp.test(from))\r\n                    fromParam = fromRegExp.exec(from);\r\n                if (toRegExp instanceof RegExp && toRegExp.test(to))\r\n                    toParam = toRegExp.exec(to);\r\n\r\n                if (\r\n                    (Array.isArray(toParam) && Array.isArray(fromParam)) ||\r\n                    (Array.isArray(toParam) &&\r\n                        typeof fromParam == \"boolean\" &&\r\n                        fromParam) ||\r\n                    (Array.isArray(fromParam) &&\r\n                        typeof toParam == \"boolean\" &&\r\n                        toParam)\r\n                )\r\n                    method({ from: fromParam, to: toParam, path: { from, to } });\r\n            });\r\n        } else {\r\n            console.warn(\"[Route] HistoryManager is missing.\");\r\n        }\r\n    }\r\n\r\n    /** Add listeners for PJAX Events */\r\n    public initEvents() {\r\n        this.emitter.on(\"READY\", this.route, this);\r\n        this.emitter.on(\"CONTENT_REPLACED\", this.route, this);\r\n    }\r\n\r\n    /** Remove listeners for PJAX Events */\r\n    public stopEvents() {\r\n        this.emitter.off(\"READY\", this.route, this);\r\n        this.emitter.off(\"CONTENT_REPLACED\", this.route, this);\r\n    }\r\n}\r\n", "import { EventEmitter, EventInput, ListenerCallback } from \"@okikio/emitter\";\r\nimport { Manager } from \"@okikio/manager\";\r\n\r\n// DOM\r\nexport type AnimationTarget = string | Node | NodeList | HTMLCollection | HTMLElement[] | AnimationTarget[];\r\nexport const getElements = (selector: string | Node): Node[] => {\r\n    return typeof selector === \"string\" ? Array.from(document.querySelectorAll(selector as string)) : [selector];\r\n};\r\n\r\nconst flatten = (arr: AnimationTarget[]) => [].concat(...arr);\r\nexport const getTargets = (targets: AnimationTarget): Node[] => {\r\n    if (Array.isArray(targets)) {\r\n        return flatten((targets as AnimationTarget[]).map(getTargets));\r\n    }\r\n    if (typeof targets == \"string\" || targets instanceof Node)\r\n        return getElements(targets);\r\n    if (targets instanceof NodeList || targets instanceof HTMLCollection)\r\n        return Array.from(targets);\r\n    return [];\r\n};\r\n\r\n// VALUES\r\nexport type closureArgs = [number, number, HTMLElement];\r\nexport type genericTypes = boolean | object | string | number;\r\nexport type KeyFrameOptionsType = Keyframe[] | PropertyIndexedKeyframes;\r\nexport type ComputedAnimationOptions = genericTypes | genericTypes[] | KeyFrameOptionsType;\r\nexport type Closure = (index?: number, total?: number, element?: HTMLElement) => ComputedAnimationOptions;\r\nexport type AnimationOptionTypes = Closure | ComputedAnimationOptions;\r\nexport type ComputedOptions = { [key: string]: ComputedAnimationOptions };\r\n\r\n\r\nexport const computeOption = (value: AnimationOptionTypes, args: closureArgs, context: Animate): ComputedAnimationOptions => {\r\n    if (typeof value === \"function\") {\r\n        return value.apply(context, args);\r\n    } else { return value; }\r\n};\r\n\r\nexport const mapAnimationOptions = (obj: AnimationOptions, args: closureArgs, options: Animate) => {\r\n    let key: string, value: AnimationOptionTypes, result: ComputedOptions = {};\r\n    let keys = Object.keys(obj);\r\n    for (let i = 0, len = keys.length; i < len; i++) {\r\n        key = keys[i];\r\n        value = obj[key];\r\n        result[key] = computeOption(value, args, options);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\n/** From: [https://easings.net] */\r\nexport const easings = {\r\n    \"in\": \"ease-in\",\r\n    \"out\": \"ease-out\",\r\n    \"in-out\": \"ease-in-out\",\r\n\r\n    // Sine\r\n    \"in-sine\": \"cubic-bezier(0.47, 0, 0.745, 0.715)\",\r\n    \"out-sine\": \"cubic-bezier(0.39, 0.575, 0.565, 1)\",\r\n    \"in-out-sine\": \"cubic-bezier(0.445, 0.05, 0.55, 0.95)\",\r\n\r\n    // Quad\r\n    \"in-quad\": \"cubic-bezier(0.55, 0.085, 0.68, 0.53)\",\r\n    \"out-quad\": \"cubic-bezier(0.25, 0.46, 0.45, 0.94)\",\r\n    \"in-out-quad\": \"cubic-bezier(0.455, 0.03, 0.515, 0.955)\",\r\n\r\n    // Cubic\r\n    \"in-cubic\": \"cubic-bezier(0.55, 0.055, 0.675, 0.19)\",\r\n    \"out-cubic\": \"cubic-bezier(0.215, 0.61, 0.355, 1)\",\r\n    \"in-out-cubic\": \"cubic-bezier(0.645, 0.045, 0.355, 1)\",\r\n\r\n    // Quart\r\n    \"in-quart\": \"cubic-bezier(0.895, 0.03, 0.685, 0.22)\",\r\n    \"out-quart\": \"cubic-bezier(0.165, 0.84, 0.44, 1)\",\r\n    \"in-out-quart\": \"cubic-bezier(0.77, 0, 0.175, 1)\",\r\n\r\n    // Quint\r\n    \"in-quint\": \"cubic-bezier(0.755, 0.05, 0.855, 0.06)\",\r\n    \"out-quint\": \"cubic-bezier(0.23, 1, 0.32, 1)\",\r\n    \"in-out-quint\": \"cubic-bezier(0.86, 0, 0.07, 1)\",\r\n\r\n    // Expo\r\n    \"in-expo\": \"cubic-bezier(0.95, 0.05, 0.795, 0.035)\",\r\n    \"out-expo\": \"cubic-bezier(0.19, 1, 0.22, 1)\",\r\n    \"in-out-expo\": \"cubic-bezier(1, 0, 0, 1)\",\r\n\r\n    // Circ\r\n    \"in-circ\": \"cubic-bezier(0.6, 0.04, 0.98, 0.335)\",\r\n    \"out-circ\": \"cubic-bezier(0.075, 0.82, 0.165, 1)\",\r\n    \"in-out-circ\": \"cubic-bezier(0.785, 0.135, 0.15, 0.86)\",\r\n\r\n    // Back\r\n    \"in-back\": \"cubic-bezier(0.6, -0.28, 0.735, 0.045)\",\r\n    \"out-back\": \"cubic-bezier(0.175, 0.885, 0.32, 1.275)\",\r\n    \"in-out-back\": \"cubic-bezier(0.68, -0.55, 0.265, 1.55)\"\r\n};\r\n\r\nexport const easingKeys = Object.keys(easings);\r\nexport const getEase = (ease: string) => {\r\n    let search = ease.replace(/^ease-/, \"\"); // Remove the \"ease-\" keyword\r\n    return easingKeys.includes(search) ? easings[search] : ease;\r\n};\r\n\r\nexport interface AnimationOptions {\r\n    target?: AnimationTarget,\r\n    targets?: AnimationTarget,\r\n\r\n    autoplay?: boolean,\r\n    options?: AnimationOptions,\r\n    speed?: number | Closure,\r\n    delay?: number | Closure,\r\n    easing?: keyof typeof easings | Closure | string,\r\n    endDelay?: number | Closure,\r\n    duration?: number | string | Closure,\r\n    keyframes?: Keyframe[] | object[] | Closure,\r\n    loop?: number | boolean | Closure, // iterations: number,\r\n    onfinish?: (element?: HTMLElement, index?: number, total?: number, animation?: Animation) => any,\r\n    oncancel?: (element?: HTMLElement, index?: number, total?: number, animation?: Animation) => any,\r\n    extend?: EffectTiming | Closure,\r\n    [property: string]: AnimationOptionTypes,\r\n\r\n    direction?: PlaybackDirection,\r\n    fillMode?: FillMode,\r\n    timeline?: AnimationTimeline,\r\n    padEndDelay?: Boolean;\r\n};\r\n\r\nexport const DefaultAnimationOptions: AnimationOptions = {\r\n    keyframes: [],\r\n\r\n    loop: 1, // iterations: number,\r\n    delay: 0,\r\n    speed: 1,\r\n    endDelay: 0,\r\n    easing: \"ease\",\r\n    autoplay: true,\r\n    duration: 1000,\r\n    fillMode: \"none\",\r\n    direction: \"normal\",\r\n    padEndDelay: false,\r\n    extend: {}\r\n};\r\n\r\nexport type AnimationEvents = \"update\" | \"play\" | \"pause\" | \"begin\" | \"cancel\" | \"finish\" | \"error\" | \"stop\" | \"playstate-change\";\r\nexport type PlayStates = \"idle\" | \"running\" | \"paused\" | \"finished\";\r\n\r\nexport const parseOptions = (options: AnimationOptions): AnimationOptions => {\r\n    let { options: animation, ...rest } = options;\r\n    let oldOptions = animation instanceof Animate ? animation.getOptions() : (Array.isArray(animation) ? animation?.[0]?.getOptions() : animation);\r\n    return Object.assign({}, oldOptions, rest);\r\n}\r\n\r\n/** You can check it out here: https://codepen.io/okikio/pen/qBbdGaW?editors=0011 */\r\nexport class Animate {\r\n    /**\r\n     * Stores the options for the current animation\r\n     */\r\n    public options: AnimationOptions = {};\r\n\r\n    /**\r\n     * The Array of Elements to Animate\r\n     */\r\n    public targets: Node[] = [];\r\n\r\n    /**\r\n     * The properties to animate\r\n     */\r\n    public properties: object = {};\r\n\r\n    /**\r\n     * A Manager of Animations\r\n     */\r\n    public animations: Manager<HTMLElement, Animation> = new Manager();\r\n\r\n    /**\r\n     * A Manager of KeyFrameEffects\r\n     */\r\n    public keyframeEffects: Manager<Animation, KeyframeEffect> = new Manager();\r\n\r\n    /**\r\n     * The total duration of all Animation's\r\n     */\r\n    public totalDuration: number = 0;\r\n\r\n    /**\r\n     * The smallest delay out of all Animation's\r\n     */\r\n    public minDelay: number = 0;\r\n\r\n    /**\r\n     * The largest speed out of all Animation's\r\n     */\r\n    public maxSpeed: number = 0;\r\n\r\n    /**\r\n     * The options for individual animations\r\n     */\r\n    public computedOptions: Manager<Animation, ComputedOptions> = new Manager();\r\n\r\n    /**\r\n     * The Element the main animation uses\r\n     */\r\n    public mainElement: HTMLElement;\r\n\r\n    /**\r\n     * Stores an animation that runs on the total duration of the all other Animations, and as such it's the main Animation\r\n     */\r\n    public mainAnimation: Animation;\r\n\r\n    /**\r\n     * Stores request frame calls\r\n     */\r\n    public animationFrame: number;\r\n\r\n    /**\r\n     * An event emitter\r\n     */\r\n    public emitter: EventEmitter = new EventEmitter();\r\n\r\n    /**\r\n     * Returns a promise that is fulfilled when the mainAnimation is finished\r\n     */\r\n    public promise: Promise<AnimationOptions>;\r\n    constructor(options: AnimationOptions) {\r\n        this.loop = this.loop.bind(this);\r\n\r\n        try {\r\n            this.options = Object.assign({}, DefaultAnimationOptions, parseOptions(options));\r\n\r\n            let {\r\n                loop,\r\n                delay,\r\n                speed,\r\n                easing,\r\n                endDelay,\r\n                duration,\r\n                direction,\r\n                fillMode,\r\n                onfinish,\r\n                oncancel,\r\n                keyframes,\r\n                autoplay,\r\n                target,\r\n                targets: _targets,\r\n                padEndDelay,\r\n                extend,\r\n                ...properties\r\n            } = this.options;\r\n\r\n            let targets = new Set([...getTargets(_targets), ...getTargets(target)]);\r\n            this.targets = [...targets];\r\n            this.properties = properties;\r\n\r\n            let delayArr = [];\r\n            let speedArr = [];\r\n            let len = this.targets.length;\r\n            let listofAnimationOptions = [];\r\n            for (let i = 0; i < len; i++) {\r\n                let target = this.targets[i] as HTMLElement;\r\n                let animationOptions: AnimationOptions = {\r\n                    easing: typeof easing == \"string\" ? getEase(easing) : easing,\r\n                    iterations: loop === true ? Infinity : (loop as number),\r\n                    direction,\r\n                    endDelay,\r\n                    duration,\r\n                    speed,\r\n                    delay,\r\n                    fill: fillMode,\r\n                    ...extend\r\n                };\r\n\r\n                // Allows the use of functions as the values, for both the keyframes and the animation object\r\n                // It adds the capability of advanced stagger animation, similar to the anime js stagger functions\r\n                animationOptions = mapAnimationOptions(animationOptions, [i, len, target], this);\r\n                listofAnimationOptions[i] = animationOptions;\r\n\r\n                // Set the Animate classes duration to be the Animation with the largest totalDuration\r\n                let tempDurations = +animationOptions.delay +\r\n                    (+animationOptions.duration * +animationOptions.iterations) +\r\n                    +animationOptions.endDelay;\r\n                if (this.totalDuration < tempDurations) this.totalDuration = tempDurations;\r\n                delayArr.push(animationOptions.delay);\r\n                speedArr.push(animationOptions.speed);\r\n            }\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                let target = this.targets[i] as HTMLElement;\r\n                let { speed: $speed, ...animationOptions }: AnimationOptions = listofAnimationOptions[i];\r\n                let animationKeyframe: KeyFrameOptionsType;\r\n\r\n                let tempDurations = +animationOptions.delay +\r\n                    (+animationOptions.duration * +animationOptions.iterations) +\r\n                    +animationOptions.endDelay;\r\n\r\n                // You cannot use the `padEndDelay` option and set a value for `endDelay`, the `endDelay` value will\r\n                // replace the padded endDelay\r\n\r\n                // This is feature ensures all `animations` match up to the total duration, and don't finish too early,\r\n                // if animations finish too early when the `.play()` method is called specific animations\r\n                // that are finished will restart while the rest of the animations will continue playing.\r\n                if (padEndDelay && animationOptions.endDelay == 0 && Math.abs(+animationOptions.iterations) != Math.abs(Infinity)) {\r\n                    animationOptions.endDelay = this.totalDuration - tempDurations;\r\n                }\r\n\r\n                // Accept keyframes as a keyframes Object, or a method,\r\n                // if there are no animations in the keyframes array,\r\n                // uses css properties from the options object\r\n                let arrKeyframes = computeOption(keyframes, [i, len, target], this) as Keyframe[];\r\n                animationKeyframe = arrKeyframes.length ? arrKeyframes as Keyframe[] : (properties as PropertyIndexedKeyframes);\r\n\r\n                if (!Array.isArray(animationKeyframe))\r\n                    animationKeyframe = mapAnimationOptions(animationKeyframe as AnimationOptions, [i, len, target], this) as PropertyIndexedKeyframes;\r\n\r\n                // Add animation to the Animations Set\r\n                let keyFrameEffect = new KeyframeEffect(target, animationKeyframe, animationOptions as KeyframeAnimationOptions);\r\n                let animation = new Animation(keyFrameEffect, animationOptions.timeline);\r\n                animation.playbackRate = $speed as number;\r\n\r\n                // Support for on finish\r\n                animation.onfinish = () => {\r\n                    typeof onfinish == \"function\" && onfinish.call(this, target, i, len, animation);\r\n                };\r\n\r\n                // Support for on cancel\r\n                animation.oncancel = () => {\r\n                    typeof oncancel == \"function\" && oncancel.call(this, target, i, len, animation);\r\n                };\r\n\r\n                // The calculated options for each individual animation\r\n                this.computedOptions.set(animation, animationOptions);\r\n                this.animations.set(target, animation);\r\n                this.keyframeEffects.set(animation, keyFrameEffect);\r\n            }\r\n\r\n            let mainkeyframeEffect = new KeyframeEffect(this.mainElement, [\r\n                { opacity: \"0\" },\r\n                { opacity: \"1\" }\r\n            ], {\r\n                // Why waste performance on an animation no one can see?\r\n                duration: this.totalDuration,\r\n                easing: \"linear\"\r\n            });\r\n\r\n            this.minDelay = Math.min(...delayArr);\r\n            this.maxSpeed = Math.max(...speedArr);\r\n            this.mainAnimation = new Animation(mainkeyframeEffect, this.options.timeline);\r\n            this.mainAnimation.playbackRate = this.maxSpeed;\r\n            this.mainAnimation.onfinish = () => {\r\n                let playstate = this.getPlayState();\r\n                this.emit(\"finish\", playstate, this);\r\n                if (!this.is(playstate))\r\n                    this.emit(\"playstate-change\", playstate, this);\r\n                this.stopLoop();\r\n            };\r\n\r\n            this.mainAnimation.oncancel = () => {\r\n                let playstate = this.getPlayState();\r\n                this.emit(\"cancel\", playstate, this);\r\n                if (!this.is(playstate))\r\n                    this.emit(\"playstate-change\", playstate, this);\r\n                this.stopLoop();\r\n            };\r\n\r\n            // this.setSpeed(speed);\r\n            if (autoplay) this.play();\r\n            else this.pause();\r\n\r\n            this.newPromise();\r\n        } catch (err) {\r\n            this.emit(\"error\", err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a new Promise that is resolve when this.finish is called\r\n     */\r\n    public newPromise(): Promise<AnimationOptions> {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            /*\r\n                Note that the `this` keyword is in an Array when it is resolved,\r\n                this is due to Promises not wanting to resolve references,\r\n                so, you can't resolve `this` directly, so, I chose to resolve `this` in an\r\n                Array\r\n            */\r\n            this.on(\"finish\", () => resolve([this]));\r\n            this.on(\"error\", err => reject(err));\r\n        });\r\n        return this.promise;\r\n    }\r\n\r\n    /**\r\n     * Fulfills the this.promise Promise\r\n     */\r\n    public then(\r\n        onFulfilled?: (value?: any) => any,\r\n        onRejected?: (reason?: any) => any\r\n    ): Animate {\r\n        onFulfilled = onFulfilled?.bind(this);\r\n        onRejected = onRejected?.bind(this);\r\n        this.promise.then(onFulfilled, onRejected);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Catches error that occur in the this.promise Promise\r\n     */\r\n    public catch(onRejected: (reason?: any) => any): Animate {\r\n        onRejected = onRejected?.bind(this);\r\n        this.promise.catch(onRejected);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * If you don't care if the this.promise Promise has either been rejected or resolved\r\n     */\r\n    public finally(onFinally: () => any): Animate {\r\n        onFinally = onFinally?.bind(this);\r\n        this.promise.finally(onFinally);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Represents an Animation Frame Loop\r\n     */\r\n    public loop(): void {\r\n        this.stopLoop();\r\n        this.emit(\"update\", this.getProgress(), this);\r\n        this.animationFrame = window.requestAnimationFrame(this.loop);\r\n    }\r\n\r\n    /**\r\n     * Cancels animation frame\r\n     */\r\n    public stopLoop() {\r\n        window.cancelAnimationFrame(this.animationFrame);\r\n    }\r\n\r\n    /**\r\n     * Calls a method that affects all animations **excluding** the mainAnimation; the method only allows the animation parameter\r\n    */\r\n    public allAnimations(method: (animation?: Animation, target?: HTMLElement) => void) {\r\n        this.animations.forEach(method);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calls a method that affects all animations **including** the mainAnimation; the method only allows the animation parameter\r\n    */\r\n    public all(method: (animation?: Animation, target?: HTMLElement) => void) {\r\n        method(this.mainAnimation, this.mainElement);\r\n        this.allAnimations(method);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Register the begin event\r\n     */\r\n    protected beginEvent() {\r\n        if (this.getProgress() == 0) {\r\n            let timer: number | void = window.setTimeout(() => {\r\n                this.emit(\"begin\", this);\r\n                timer = window.clearTimeout(timer as number);\r\n            }, this.minDelay);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Play Animation\r\n     */\r\n    public play(): Animate {\r\n        let playstate = this.getPlayState();\r\n        this.beginEvent();\r\n        this.all(anim => anim.play());\r\n        this.emit(\"play\", playstate, this);\r\n        if (!this.is(playstate))\r\n            this.emit(\"playstate-change\", playstate, this);\r\n        this.loop();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Pause Animation\r\n     */\r\n    public pause(): Animate {\r\n        let playstate = this.getPlayState();\r\n        this.all(anim => anim.pause());\r\n        this.emit(\"pause\", playstate, this);\r\n        if (!this.is(playstate))\r\n            this.emit(\"playstate-change\", playstate, this);\r\n        this.stopLoop();\r\n        this.animationFrame = undefined;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reset all Animations\r\n     */\r\n    public reset() {\r\n        this.setProgress(0);\r\n        this.beginEvent();\r\n\r\n        if (this.options.autoplay) this.play();\r\n        else this.pause();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Cancels all Animations\r\n     */\r\n    public cancel() {\r\n        this.all(anim => anim.cancel());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Force complete all Animations\r\n     */\r\n    public finish() {\r\n        this.all(anim => anim.finish());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Cancels & Clears all Animations\r\n     */\r\n    public stop() {\r\n        this.cancel();\r\n        this.computedOptions.clear();\r\n        this.animations.clear();\r\n        this.keyframeEffects.clear();\r\n        while (this.targets.length) this.targets.pop();\r\n        this.mainAnimation = undefined;\r\n        this.mainElement = undefined;\r\n        this.emit(\"stop\");\r\n        this.emitter.clear();\r\n    }\r\n\r\n    /**\r\n     * Returns an Array of targets\r\n     */\r\n    public getTargets(): Node[] {\r\n        return this.targets;\r\n    }\r\n\r\n    /**\r\n     * Get a specific Animation from an Animate instance\r\n     */\r\n    public getAnimation(element: HTMLElement): Animation {\r\n        return this.animations.get(element);\r\n    }\r\n\r\n    /**\r\n     * Get a specific Animation's KeyframeEffect from an Animate instance\r\n     */\r\n    public getKeyframeEffect(animation: Animation): KeyframeEffect {\r\n        return this.keyframeEffects.get(animation);\r\n    }\r\n\r\n    /**\r\n     * Returns the timings of an Animation, given a target\r\n     * E.g. { duration, endDelay, delay, iterations, iterationStart, direction, easing, fill, etc... }\r\n     */\r\n    public getTiming(target: HTMLElement | Animation): AnimationOptions & EffectTiming {\r\n        let animation = target instanceof Animation ? target : this.getAnimation(target);\r\n        let keyframeOptions = this.computedOptions.get(animation) ?? {};\r\n        let timings = this.getKeyframeEffect(animation)?.getTiming() ?? {};\r\n        let options = this.getOptions();\r\n\r\n        return { ...DefaultAnimationOptions, ...options, ...timings, ...keyframeOptions };\r\n    }\r\n\r\n    /**\r\n     * Returns the total duration of Animation\r\n     */\r\n    public getTotalDuration(): number {\r\n        return this.totalDuration;\r\n    }\r\n\r\n    /**\r\n     * Returns the current time of the Main Animation\r\n     */\r\n    public getCurrentTime(): number {\r\n        return this.mainAnimation.currentTime;\r\n    }\r\n\r\n    /**\r\n     * Returns the Animation progress as a fraction of the current time / duration * 100\r\n     */\r\n    public getProgress() {\r\n        return (this.getCurrentTime() / this.totalDuration) * 100;\r\n    }\r\n\r\n    /**\r\n     * Return the playback speed of the animation\r\n     */\r\n    public getSpeed(): number {\r\n        return this.mainAnimation.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Returns the current playing state\r\n     */\r\n    public getPlayState(): PlayStates {\r\n        return this.mainAnimation.playState;\r\n    }\r\n\r\n    /**\r\n     * Get the options of an Animate instance\r\n     */\r\n    public getOptions(): AnimationOptions {\r\n        return this.options;\r\n    }\r\n\r\n    /**\r\n     * Get the computed options object for a specific target\r\n     */\r\n    public getComputedOption(target: HTMLElement | Animation): AnimationOptions {\r\n        let animation = target instanceof Animation ? target : this.getAnimation(target);\r\n        return this.computedOptions.get(animation);\r\n    }\r\n\r\n    /**\r\n     * Check if the current playstate is \"running\", \"finished\", etc...\r\n     */\r\n    public is(playstate: PlayStates) {\r\n        return this.getPlayState() == playstate;\r\n    }\r\n\r\n    /**\r\n     * Set the current time of the Main Animation\r\n     */\r\n    public setCurrentTime(time: number): Animate {\r\n        this.all(anim => { anim.currentTime = time; });\r\n        this.emit(\"update\", this.getProgress());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the Animation progress as a value from 0 to 100\r\n     */\r\n    public setProgress(percent: number): Animate {\r\n        let time = (percent / 100) * this.totalDuration;\r\n        this.setCurrentTime(time);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the playback speed of an Animation\r\n     */\r\n    public setSpeed(speed: number = 1): Animate {\r\n        this.maxSpeed = speed;\r\n        this.all(anim => { anim.playbackRate = speed; });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a listener for a given event\r\n     */\r\n    public on(events: AnimationEvents[] | AnimationEvents | EventInput, callback?: ListenerCallback | object, scope?: object): Animate {\r\n        this.emitter.on(events, callback, scope ?? this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a listener from an event\r\n     */\r\n    public off(events: AnimationEvents[] | AnimationEvents | EventInput, callback?: ListenerCallback | object, scope?: object): Animate {\r\n        this.emitter.off(events, callback, scope ?? this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Call all listeners within an event\r\n     */\r\n    public emit(events: AnimationEvents[] | AnimationEvents | string | any[], ...args: any): Animate {\r\n        this.emitter.emit(events, ...args);\r\n        return this;\r\n    }\r\n\r\n    /** Returns the Animate options, as JSON  */\r\n    public toJSON(): AnimationOptions {\r\n        return this.getOptions();\r\n    }\r\n\r\n    /**\r\n     * The Symbol.toStringTag well-known symbol is a string valued property that is used\r\n     * in the creation of the default string description of an object.\r\n     * It is accessed internally by the Object.prototype.toString() method.\r\n     */\r\n    get [Symbol.toStringTag]() {\r\n        return `Animate`;\r\n    }\r\n}\r\n\r\n/** Creates a new Animate instance */\r\nexport const animate = (options: AnimationOptions = {}): Animate => {\r\n    return new Animate(options);\r\n};\r\n\r\nexport * from \"./builtin-effects\";\r\nexport default animate;\r\n\r\n/**\r\n * KeyframeEffect support is really low, so, I am removing the updateOption & updateAllOptions method\r\n *\r\n    // Update the options for a specific target element set in the constructor\r\n    public updateOption(target: HTMLElement, options: AnimationOptions = {}, loopthrough = true) {\r\n        let {\r\n            loop,\r\n            delay,\r\n            speed,\r\n            easing,\r\n            endDelay,\r\n            duration,\r\n            direction,\r\n            fillMode,\r\n            onfinish,\r\n            oncancel,\r\n            target: _,\r\n            keyframes,\r\n            autoplay,\r\n            padEndDelay,\r\n            extend,\r\n            ...properties\r\n        } = Object.assign({}, DefaultAnimationOptions, this.getOptions(), parseOptions(options));\r\n\r\n        let len = this.targets.length;\r\n        let animationKeyframe: Keyframe[] | PropertyIndexedKeyframes;\r\n        let i = this.targets.indexOf(target);\r\n\r\n        let animationOptions: AnimationOptions = {\r\n            easing: typeof easing == \"string\" ? getEase(easing) : easing,\r\n            iterations: loop === true ? Infinity : (loop as number),\r\n            direction,\r\n            endDelay,\r\n            duration,\r\n            delay,\r\n            fill: fillMode,\r\n            ...extend\r\n        };\r\n\r\n        // Allows the use of functions as the values, for both the keyframes and the animation object\r\n        // It adds the capability of advanced stagger animation, similar to the anime js stagger functions\r\n        animationOptions = mapObject(animationOptions, [i, len, target], this);\r\n\r\n        // Set the Animate classes duration to be the Animation with the largest totalDuration\r\n        let tempDurations = animationOptions.delay +\r\n            (animationOptions.duration * animationOptions.iterations) +\r\n            animationOptions.endDelay;\r\n        if (this.totalDuration < tempDurations) this.totalDuration = tempDurations;\r\n        if (animationOptions.delay < this.minDelay) this.minDelay = animationOptions.delay;\r\n\r\n        // You cannot use the `padEndDelay` option and set a value for `endDelay`, the `endDelay` value will\r\n        // replace the padded `endDelay`\r\n\r\n        // This is feature ensures all `animations` match up to the total duration, and don't finish too early,\r\n        // if animations finish too early when the `.play()` method is called specific animations\r\n        // that are finished will restart while the rest of the animations will continue playing.\r\n        if (padEndDelay && animationOptions.endDelay == 0 && Math.abs(animationOptions.iterations) != Math.abs(Infinity)) {\r\n            animationOptions.endDelay = this.totalDuration - tempDurations;\r\n\r\n            // Make sure all the other animations have an up to date endDelay padding\r\n            if (loopthrough) {\r\n                this.allAnimations((animation) => {\r\n                    let keyFrameEffect = this.getKeyframeEffect(animation);\r\n                    let timing = keyFrameEffect?.getComputedTiming();\r\n                    let tempDuration = timing?.delay +\r\n                        ((+timing?.duration) * timing?.iterations);\r\n\r\n                    keyFrameEffect?.updateTiming?.({\r\n                        endDelay: this.totalDuration - tempDuration\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        // Accept keyframes as a keyframes Object, or a method,\r\n        // if there are no animations in the keyframes array,\r\n        // uses css properties from the options object\r\n        let arrKeyframes = computeValue((keyframes as Keyframe[]), [i, len, target], this);\r\n        animationKeyframe = arrKeyframes.length ? arrKeyframes :\r\n            (properties as PropertyIndexedKeyframes);\r\n\r\n        if (!(arrKeyframes.length > 0))\r\n            animationKeyframe = mapObject(animationKeyframe, [i, len, target], this);\r\n\r\n        let animation: Animation, keyFrameEffect: KeyframeEffect;\r\n        if (!this.animations.has(target)) {\r\n            // Add animation to the Animations Set\r\n            keyFrameEffect = new KeyframeEffect(target, animationKeyframe, animationOptions as KeyframeAnimationOptions);\r\n            animation = new Animation(keyFrameEffect, animationOptions.timeline);\r\n        } else {\r\n            animation = this.getAnimation(target);\r\n            keyFrameEffect = this.getKeyframeEffect(animation);\r\n\r\n            keyFrameEffect?.setKeyframes?.(animationKeyframe);\r\n            keyFrameEffect?.updateTiming?.(animationOptions as KeyframeAnimationOptions);\r\n\r\n            if (!keyFrameEffect.setKeyframes || !keyFrameEffect.updateTiming)\r\n                console.error(\"@okikio/animate - `KeyframeEffect.setKeyframes` and/or `KeyframeEffect.updateTiming` are not supported in this browser.\");\r\n        }\r\n\r\n        // Support for on finish\r\n        animation.onfinish = () => {\r\n            typeof onfinish == \"function\" && onfinish.call(this, target, i, len, animation);\r\n        };\r\n\r\n        // Support for on finish\r\n        animation.oncancel = () => {\r\n            typeof oncancel == \"function\" && oncancel.call(this, target, i, len, animation);\r\n        };\r\n\r\n        // The calculated options for each individual option\r\n        this.computedOptions.set(animation, animationOptions);\r\n        this.animations.set(target, animation);\r\n        this.keyframeEffects.set(animation, keyFrameEffect);\r\n    }\r\n\r\n    // Update the options for all targets set in the constructor\r\n    public updateAllOptions(options: AnimationOptions = {}) {\r\n        try {\r\n            this.options = Object.assign({}, DefaultAnimationOptions, parseOptions(options));\r\n\r\n            let {\r\n                loop,\r\n                delay,\r\n                speed,\r\n                easing,\r\n                endDelay,\r\n                duration,\r\n                direction,\r\n                fillMode,\r\n                onfinish,\r\n                oncancel,\r\n                keyframes,\r\n                autoplay,\r\n                target,\r\n                padEndDelay,\r\n                extend,\r\n                ...properties\r\n            } = this.options;\r\n\r\n            let targets = new Set([...this.getTargets(), ...getTargets(target)]);\r\n            this.targets = [...targets];\r\n            this.properties = properties;\r\n\r\n            let delays = [];\r\n            let len = this.targets.length;\r\n            let listofAnimationOptions = [];\r\n            for (let i = 0; i < len; i++) {\r\n                let target = this.targets[i] as HTMLElement;\r\n                let animationOptions: AnimationOptions = {\r\n                    easing: typeof easing == \"string\" ? getEase(easing) : easing,\r\n                    iterations: loop === true ? Infinity : (loop as number),\r\n                    direction,\r\n                    endDelay,\r\n                    duration,\r\n                    delay,\r\n                    fill: fillMode,\r\n                    ...extend\r\n                };\r\n\r\n                // Allows the use of functions as the values, for both the keyframes and the animation object\r\n                // It adds the capability of advanced stagger animation, similar to the anime js stagger functions\r\n                animationOptions = mapObject(animationOptions, [i, len, target], this);\r\n                listofAnimationOptions[i] = animationOptions;\r\n\r\n                // Set the Animate classes duration to be the Animation with the largest totalDuration\r\n                let tempDurations = animationOptions.delay +\r\n                    (animationOptions.duration * animationOptions.iterations) +\r\n                    animationOptions.endDelay;\r\n                if (this.totalDuration < tempDurations) this.totalDuration = tempDurations;\r\n                delays.push(animationOptions.delay);\r\n            }\r\n\r\n            this.minDelay = Math.min(...delays);\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                let target = this.targets[i] as HTMLElement;\r\n                let animationOptions: AnimationOptions = listofAnimationOptions[i];\r\n                this.updateOption(target, animationOptions, false);\r\n            }\r\n\r\n            let mainkeyframeEffect: KeyframeEffect;\r\n            if (!this.mainAnimation) {\r\n                mainkeyframeEffect = new KeyframeEffect(this.mainElement, [\r\n                    { opacity: \"0\" },\r\n                    { opacity: \"1\" }\r\n                ], {\r\n                    // Why waste performance on an animation no one can see?\r\n                    duration: this.totalDuration,\r\n                    easing: \"linear\"\r\n                });\r\n\r\n                this.mainAnimation = new Animation(mainkeyframeEffect, this.options.timeline);\r\n                this.mainAnimation.onfinish = () => {\r\n                    this.emit(\"finish\", this);\r\n                    this.stopLoop();\r\n                };\r\n\r\n                this.mainAnimation.oncancel = () => {\r\n                    this.emit(\"cancel\", this);\r\n                    this.stopLoop();\r\n                };\r\n            } else {\r\n                mainkeyframeEffect?.updateTiming?.({\r\n                    duration: this.totalDuration\r\n                });\r\n            }\r\n\r\n            this.setSpeed(speed);\r\n            if (autoplay) this.play();\r\n            else this.pause();\r\n\r\n            this.promise = this.newPromise();\r\n        } catch (err) {\r\n            this.emit(\"error\", err);\r\n        }\r\n    }\r\n */", "export const toArr = (input: any): any[] => Array.from(input);\r\nexport default toArr;", "import { Service, animate } from \"@okikio/native\";\r\nimport toArr from \"../toArr\";\r\n\r\nexport class IntroAnimation extends Service {\r\n    public elements: Array<Element>;\r\n    public rootElement: HTMLElement;\r\n\r\n    public init() {\r\n        super.init();\r\n\r\n        // Elements\r\n        this.elements = toArr(document.querySelectorAll('.intro-animation'));\r\n    }\r\n\r\n    public newPage() {\r\n        this.init();\r\n        this.prepareToShow();\r\n    }\r\n\r\n    public initEvents() {\r\n        this.emitter.on(\"CONTENT_REPLACED\", this.newPage, this);\r\n        this.emitter.on(\"BEFORE_TRANSITION_IN\", this.show, this);\r\n    }\r\n\r\n    public stopEvents() {\r\n        this.emitter.off(\"CONTENT_REPLACED\", this.newPage, this);\r\n        this.emitter.off(\"BEFORE_TRANSITION_IN\", this.show, this);\r\n    }\r\n\r\n    public stop() {\r\n        requestAnimationFrame(() => {\r\n            for (let el of this.elements) {\r\n                (el as HTMLElement).style.opacity = '1';\r\n            }\r\n        });\r\n\r\n        super.stop();\r\n    }\r\n\r\n    public prepareToShow() {\r\n        requestAnimationFrame(() => {\r\n            for (let el of this.elements) {\r\n                (el as HTMLElement).style.opacity = '0';\r\n            }\r\n        });\r\n    }\r\n\r\n    public async show() {\r\n        let [anim] = await animate({\r\n            target: (this.elements as HTMLElement[]),\r\n            opacity: [0, 1],\r\n            // @ts-ignore\r\n            delay(i: number) {\r\n                return 300 * (i + 1);\r\n            },\r\n            onfinish(el: { style: { transform: string; opacity: string; }; }) {\r\n                el.style.opacity = \"1\";\r\n            },\r\n            easing: \"ease\",\r\n            duration: 850\r\n        });\r\n        anim.stop();\r\n        return anim;\r\n    }\r\n}\r\n", "import { ITransition, ITransitionData, animate } from \"@okikio/native\";\r\n\r\n//== Transition\r\nexport const Fade: ITransition = {\r\n    name: \"default\",\r\n    duration: 500,\r\n    scrollable: true,\r\n\r\n    out({ from }: ITransitionData) {\r\n        let { duration } = this;\r\n        let fromWrapper = from.wrapper;\r\n        return animate({\r\n            target: fromWrapper,\r\n            opacity: [1, 0],\r\n            duration,\r\n        }).on(\"finish\", function () {\r\n            window.scroll(0, 0);\r\n            this.stop();\r\n        });\r\n    },\r\n\r\n    in({ to, scroll }: ITransitionData) {\r\n        let { duration } = this;\r\n        let toWrapper = to.wrapper;\r\n\r\n        window.scroll(scroll.x, scroll.y);\r\n        return animate({\r\n            target: toWrapper,\r\n            opacity: [0, 1],\r\n            duration\r\n        }).then(function () {\r\n            this.stop();\r\n        });\r\n    }\r\n};\r\n", "import { ITransition, ITransitionData, animate } from \"@okikio/native\";\r\nimport toArr from \"../toArr\";\r\n\r\n//== Transitions\r\nexport const BigTransition: ITransition = {\r\n    name: \"big\",\r\n    delay: 200,\r\n    durationPerAnimation: 700,\r\n    scrollable: true,\r\n\r\n    init() {\r\n        this.mainElement = document.getElementById('big-transition');\r\n        this.logoElement = this.mainElement.querySelector('#logo');\r\n        this.horizontalElements = toArr(this.mainElement.querySelectorAll('#big-transition-horizontal div'));\r\n        this.maxLength = this.horizontalElements.length;\r\n    },\r\n\r\n    out({ from, scroll }: ITransitionData) {\r\n        let { durationPerAnimation: duration, delay } = this;\r\n        let fromWrapper = from.wrapper;\r\n\r\n        let wrapperStyle = Object.assign({}, fromWrapper.style);\r\n        return new Promise<void>(async resolve => {\r\n            this.mainElement.style.opacity = \"1\";\r\n            this.mainElement.style.visibility = \"visible\";\r\n            let anim1 = animate({\r\n                target: fromWrapper,\r\n                opacity: [1, 0],\r\n                duration,\r\n                onfinish(el: { style: { opacity: string; }; }) {\r\n                    el.style.opacity = '0';\r\n                }\r\n            });\r\n\r\n            anim1.then(function () { this.stop(); });\r\n\r\n            let [anim2] = await animate({\r\n                target: this.horizontalElements,\r\n                keyframes: [\r\n                    { transform: \"scaleX(0)\" },\r\n                    { transform: \"scaleX(1)\" },\r\n                ],\r\n                // @ts-ignore\r\n                delay(i: number) {\r\n                    return delay * (i + 1);\r\n                },\r\n                onfinish(el: { style: { transform: string; }; }) {\r\n                    el.style.transform = `scaleX(1)`;\r\n                },\r\n                easing: \"out-cubic\",\r\n                duration: 500\r\n            });\r\n\r\n            fromWrapper.style.opacity = '1';\r\n            Object.assign(fromWrapper.style, wrapperStyle);\r\n            this.logoElement.style.visibility = \"visible\";\r\n\r\n            let loaderDuration = 500;\r\n            let [anim3] = await animate({\r\n                target: this.logoElement,\r\n                opacity: [0, 1],\r\n                duration: loaderDuration,\r\n                onfinish(el: { style: { opacity: string; }; }) {\r\n                    el.style.opacity = `1`;\r\n                },\r\n            });\r\n\r\n            let [anim4] = await animate({\r\n                options: anim3,\r\n                opacity: [1, 0],\r\n                onfinish(el: { style: { opacity: string; }; }) {\r\n                    el.style.opacity = `0`;\r\n                },\r\n                delay: 1500\r\n            });\r\n            this.logoElement.style.visibility = \"hidden\";\r\n            // anim2.stop() // -> anim2.stop() Breaks the Animation\r\n            anim3.stop();\r\n            anim4.stop();\r\n            resolve();\r\n        });\r\n    },\r\n\r\n    in({ to, scroll }: ITransitionData) {\r\n        let { durationPerAnimation: duration, delay } = this;\r\n        let toWrapper = to.wrapper;\r\n\r\n        window.scroll(scroll.x, scroll.y);\r\n        return new Promise<void>(async resolve => {\r\n            let anim1 = animate({\r\n                target: toWrapper,\r\n                opacity: [0, 1],\r\n                duration\r\n            }).then(() => {\r\n                anim1.stop();\r\n            });\r\n\r\n            let [anim2] = await animate({\r\n                target: this.horizontalElements,\r\n                keyframes: [\r\n                    { transform: \"scaleX(1)\" },\r\n                    { transform: \"scaleX(0)\" },\r\n                ],\r\n                // @ts-ignore\r\n                delay(i: number) {\r\n                    return delay * (i + 1);\r\n                },\r\n                onfinish(el: { style: { transform: string; }; }) {\r\n                    el.style.transform = `scaleX(0)`;\r\n                },\r\n                easing: \"out-cubic\",\r\n                duration: 500\r\n            });\r\n\r\n            this.mainElement.style.opacity = \"0\";\r\n            this.mainElement.style.visibility = \"hidden\";\r\n            anim2.stop();\r\n            resolve();\r\n        });\r\n    }\r\n}\r\n", "import { ITransition, ITransitionData, animate } from \"@okikio/native\";\r\n\r\n//== Transitions\r\nexport const Slide: ITransition = {\r\n    name: \"slide\",\r\n    duration: 500,\r\n    direction: \"right\",\r\n    scrollable: true,\r\n\r\n    init(data: ITransition) {\r\n        let trigger = (data.trigger as HTMLElement);\r\n        if (trigger instanceof Node && trigger.hasAttribute(\"data-direction\")) {\r\n            this.direction = trigger.getAttribute(\"data-direction\");\r\n        } else {\r\n            this.direction = \"right\";\r\n        }\r\n    },\r\n\r\n    out({ from }: ITransitionData) {\r\n        let { duration, direction } = this;\r\n        let fromWrapper = from.wrapper;\r\n\r\n        let anim = animate({\r\n            target: fromWrapper,\r\n            keyframes: [\r\n                { transform: \"translateX(0%)\", opacity: 1 },\r\n                { transform: `translateX(${direction === \"left\" ? \"-\" : \"\"}25%)`, opacity: 0 },\r\n            ],\r\n            duration,\r\n            easing: \"in-quint\"\r\n        });\r\n\r\n        return anim.on(\"begin\", () => {\r\n            document.body.classList.add(\"no-overflow-x\");\r\n        }).then(function () {\r\n            this.stop();\r\n        });\r\n    },\r\n\r\n    in({ to, scroll }: ITransitionData) {\r\n        let { duration } = this;\r\n        let toWrapper = to.wrapper;\r\n\r\n        window.scroll(scroll.x, scroll.y);\r\n        let anim = animate({\r\n            target: toWrapper,\r\n            keyframes: [\r\n                { transform: `translateX(${this.direction === \"right\" ? \"-\" : \"\"}25%)`, opacity: 0 },\r\n                { transform: \"translateX(0%)\", opacity: 1 },\r\n            ],\r\n            duration,\r\n            easing: \"out-quint\"\r\n        })\r\n\r\n        return anim.then(function () {\r\n            document.body.classList.remove(\"no-overflow-x\");\r\n            this.stop();\r\n        });\r\n    }\r\n};\r\n\r\nexport const SlideLeft: ITransition = {\r\n    ...Slide,\r\n\r\n    name: \"slide-left\",\r\n    direction: \"left\",\r\n    init(data: ITransition) { }\r\n};\r\n\r\nexport const SlideRight: ITransition = {\r\n    ...Slide,\r\n\r\n    name: \"slide-right\",\r\n    direction: \"right\",\r\n    init(data: ITransition) { }\r\n};\r\n", "import { Service } from \"@okikio/native\";\r\nimport { toArr } from \"../toArr\";\r\n\r\nexport class Navbar extends Service {\r\n    public navbar: HTMLElement;\r\n    public elements: HTMLElement[];\r\n    public menu: HTMLElement;\r\n    public collapseSection: HTMLElement;\r\n    public navbarList: HTMLElement;\r\n    public toggleStatus: boolean;\r\n\r\n    public init() {\r\n        // Elements\r\n        this.navbar = document.querySelector(\".navbar\") as HTMLElement;\r\n        this.collapseSection = this.navbar.querySelector(\".navbar-collapse.mobile\") as HTMLElement;\r\n        this.navbarList = this.navbar.querySelector(\".navbar-list\") as HTMLElement;\r\n        this.elements = toArr(this.navbar.querySelectorAll(\".navbar-list a\"));\r\n        this.menu = this.navbar.querySelector(\".navbar-toggle\") as HTMLElement;\r\n        this.toggleStatus = false;\r\n\r\n        this.fixTabindex();\r\n        this.toggleClick = this.toggleClick.bind(this);\r\n    }\r\n\r\n    public activateLink() {\r\n        let { href } = window.location;\r\n\r\n        for (let el of this.elements) {\r\n            let itemHref =\r\n                el.getAttribute(\"data-path\") ||\r\n                (el as HTMLAnchorElement).href;\r\n            if (!itemHref || itemHref.length < 1) return;\r\n\r\n            let URLmatch = new RegExp(itemHref).test(href);\r\n            let isActive = el.classList.contains(\"active\");\r\n            if (!(URLmatch && isActive)) {\r\n                el.classList.toggle(\"active\", URLmatch);\r\n            }\r\n        }\r\n\r\n        if (this.toggleStatus) {\r\n            this.toggleClick();\r\n        }\r\n    }\r\n\r\n    public fixTabindex() {\r\n        for (let el of this.elements) {\r\n            el.setAttribute(\"tabindex\", `${this.toggleStatus ? 0 : -1}`);\r\n        }\r\n    }\r\n\r\n    public toggleClick() {\r\n        this.collapseSection.style?.setProperty?.(\"--height\", `${this.navbarList.clientHeight}px`);\r\n        this.toggleStatus = !this.toggleStatus;\r\n        this.collapseSection.classList.toggle(\"collapse\", !this.toggleStatus);\r\n        this.collapseSection.classList.toggle(\"show\", this.toggleStatus);\r\n        this.fixTabindex();\r\n    }\r\n\r\n    public scroll() {\r\n        this.navbar.classList.toggle(\"shadow\", window.scrollY >= 5);\r\n    }\r\n\r\n    public initEvents() {\r\n        this.menu.addEventListener(\"click\", this.toggleClick);\r\n        this.emitter.on(\"scroll\", this.scroll, this);\r\n        this.emitter.on(\"READY\", this.activateLink, this);\r\n        this.emitter.on(\"GO\", this.activateLink, this);\r\n    }\r\n\r\n    public stopEvents() {\r\n        this.navbar.removeEventListener(\"click\", this.toggleClick);\r\n        this.emitter.off(\"scroll\", this.scroll, this);\r\n        this.emitter.off(\"READY\", this.activateLink, this);\r\n        this.emitter.off(\"GO\", this.activateLink, this);\r\n    }\r\n\r\n    public uninstall() {\r\n        while (this.elements.length) this.elements.pop();\r\n        this.elements = undefined;\r\n        this.menu = undefined;\r\n        this.navbar = undefined;\r\n    }\r\n}", "import { PJAX, App, TransitionManager, Router, HistoryManager, PageManager, animate, Animate } from \"@okikio/native\";\r\nimport { IntroAnimation } from \"./services/IntroAnimation\";\r\n\r\nimport { Fade } from \"./transitions/Fade\";\r\nimport { BigTransition } from \"./transitions/BigTransition\";\r\nimport { Slide, SlideLeft, SlideRight } from \"./transitions/Slide\";\r\n\r\nimport { toArr } from \"./toArr\";\r\nimport { Navbar } from \"./services/Navbar\";\r\n\r\nlet router: Router, pjax: PJAX;\r\nconst app: App = new App();\r\napp\r\n    .add(new IntroAnimation())\r\n    .set(\"HistoryManager\", new HistoryManager())\r\n    .set(\"PageManager\", new PageManager())\r\n    .set(\"TransitionManager\", new TransitionManager([\r\n        [\"default\", Fade],\r\n        [\"BigTransition\", BigTransition],\r\n        [\"Slide\", Slide],\r\n        [\"SlideLeft\", SlideLeft],\r\n        [\"SlideRight\", SlideRight]\r\n    ]))\r\n    .add(new Navbar())\r\n    .set(\"router\", router = new Router())\r\n    .add(pjax = new PJAX());\r\n\r\ntry {\r\n    router = app.get(\"router\") as Router;\r\n\r\n    // This isn't nessceary, but it changes the nav link in focus depending on the page\r\n    let navLink: HTMLElement[] = toArr(document.querySelectorAll(\".navbar .nav-link\"));\r\n    for (let item of navLink) {\r\n        let navItem = (item as HTMLAnchorElement);\r\n        router.add({\r\n            path: navItem.getAttribute(\"data-path\") || navItem.pathname,\r\n            method() {\r\n                let isActive = navItem.classList.contains(\"active\");\r\n                if (!isActive) navItem.classList.add(\"active\");\r\n                for (let nav of navLink) {\r\n                    if (nav !== navItem)\r\n                        nav.classList.remove(\"active\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    router.add({\r\n        path: /(index|\\/$)(\\.html)?/,\r\n        method() { }\r\n    });\r\n\r\n    // app.on(\"AFTER_SPLASHSCREEN_HIDE\", () => {\r\n    //     anim?.play();\r\n    // });\r\n\r\n    app.boot();\r\n} catch (err) {\r\n    console.warn(\"[App] boot failed,\", err);\r\n}\r\n"],
  "mappings": "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",
  "names": []
}

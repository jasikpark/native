{
  "version": 3,
  "sources": ["packages/native/src/config.ts", "packages/manager/src/api.ts", "packages/native/src/manager.ts", "packages/native/src/url.ts", "packages/native/src/service.ts", "packages/native/src/history.ts", "packages/native/src/page.ts", "packages/native/src/transition.ts", "packages/emitter/src/api.ts", "packages/native/src/app.ts", "packages/native/src/pjax.ts", "packages/native/src/router.ts", "packages/animate/src/builtin-effects.ts", "packages/animate/src/api.ts", "build/ts/toArr.ts", "build/ts/services/IntroAnimation.ts", "build/ts/transitions/Fade.ts", "build/ts/transitions/BigTransition.ts", "build/ts/transitions/Slide.ts", "build/ts/services/Navbar.ts", "build/ts/main.ts"],
  "sourcesContent": ["export interface ICONFIG {\r\n    prefix?: string;\r\n    wrapperAttr?: string;\r\n    noAjaxLinkAttr?: string;\r\n    noPrefetchAttr?: \"no-prefetch\";\r\n    headers?: string[][];\r\n    preventSelfAttr?: string;\r\n    preventAllAttr?: string;\r\n    transitionAttr?: string;\r\n    blockAttr?: string;\r\n    timeout?: number;\r\n    maxPages?: number;\r\n    resizeDelay?: number;\r\n    [key: string]: any;\r\n}\r\n\r\nexport const CONFIG_DEFAULTS: ICONFIG = {\r\n    wrapperAttr: \"wrapper\",\r\n    noAjaxLinkAttr: \"no-ajax-link\",\r\n    noPrefetchAttr: \"no-prefetch\",\r\n    headers: [\r\n        [\"x-partial\", \"true\"]\r\n    ],\r\n    preventSelfAttr: `prevent=\"self\"`,\r\n    preventAllAttr: `prevent=\"all\"`,\r\n    transitionAttr: \"transition\",\r\n    blockAttr: `block`,\r\n    timeout: 30000,\r\n    maxPages: 5,\r\n    resizeDelay: 100\r\n};\r\n\r\nexport type ConfigKeys = keyof typeof CONFIG_DEFAULTS | string;\r\nexport const newConfig = (config: ICONFIG): ICONFIG => {\r\n    return Object.assign({ ...CONFIG_DEFAULTS }, config);\r\n};\r\n\r\n/** Converts string into properly formatted data attributes */\r\nexport const toAttr = (config: ICONFIG, value: string, brackets: boolean = true): string => {\r\n    let { prefix } = config;\r\n    let attr = `data${prefix ? \"-\" + prefix : \"\"}-${value}`;\r\n    return brackets ? `[${attr}]` : attr;\r\n};\r\n\r\n/** Selects config vars, and formats them for use, or simply returns the current configurations for the framework */\r\nexport const getConfig = (config: ICONFIG, value?: ConfigKeys, brackets: boolean = true): any => {\r\n    if (typeof value !== \"string\")\r\n        return config;\r\n\r\n    let prop = config[value];\r\n    if (typeof prop === \"string\")\r\n        return toAttr(config, prop, brackets);\r\n    return prop;\r\n};\r\n", "/**\r\n * Acts as an enhanced version of the Map class with new features and changed behavior for convenience\r\n *\r\n * @typeParam K - the type of keys to store use to store values\r\n * @typeParam V - the type of values to store\r\n * */\r\nexport class Manager<K, V> {\r\n\t/** For backward compatability and performance reasons Manager use Map to store data */\r\n\tpublic map: Map<K, V>;\r\n\tconstructor(value?: Array<[K, V]>) {\r\n\t\tthis.map = new Map(value);\r\n\t}\r\n\r\n\t/** Returns the Manager classes base Map */\r\n\tpublic getMap(): Map<K, V> {\r\n\t\treturn this.map;\r\n\t}\r\n\r\n\t/** Get a value stored in the Manager */\r\n\tpublic get(key: K): V {\r\n\t\treturn this.map.get(key);\r\n\t}\r\n\r\n\t/** Returns the keys of all items stored in the Manager as an Array */\r\n\tpublic keys(): Array<K> {\r\n\t\treturn Array.from(this.map.keys());\r\n\t}\r\n\r\n\t/** Returns the values of all items stored in the Manager as an Array */\r\n\tpublic values(): Array<V> {\r\n\t\treturn Array.from(this.map.values());\r\n\t}\r\n\r\n\t/** Set a value to the Manager using a key */\r\n\tpublic set(key: K, value: V): Manager<K, V> {\r\n\t\tthis.map.set(key, value);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Adds a value to Manager, and uses the current size of the Manager as it's key, it works best when all the key in the Manager are numbers */\r\n\tpublic add(value: V): Manager<K, V> {\r\n\t\tlet size = this.size;\r\n\t\t// @ts-ignore\r\n\t\tlet num: K = size as K;\r\n\t\tthis.set(num, value);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Returns the total number of items stored in the Manager */\r\n\tpublic get size(): number {\r\n\t\treturn this.map.size;\r\n\t}\r\n\r\n\t/** An alias for size */\r\n\tpublic get length(): number {\r\n\t\treturn this.map.size;\r\n\t}\r\n\r\n\t/** Returns the last item in the Manager who's index is a certain distance from the last item in the Manager */\r\n\tpublic last(distance: number = 1): V | undefined {\r\n\t\tlet key = this.keys()[this.size - distance];\r\n\t\treturn this.get(key);\r\n\t}\r\n\r\n\t/** Removes a value stored in the Manager via a key, returns true if an element in the Map object existed and has been removed, or false if the element does not exist */\r\n\tpublic delete(key: K): boolean {\r\n\t\treturn this.map.delete(key);\r\n\t}\r\n\r\n\t/** Removes a value stored in the Manager via a key, returns the Manager class, allowing for chains */\r\n\tpublic remove(key: K): Manager<K, V> {\r\n\t\tthis.map.delete(key);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Clear the Manager of all its contents */\r\n\tpublic clear(): Manager<K, V> {\r\n\t\tthis.map.clear();\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Checks if the Manager contains a certain key */\r\n\tpublic has(key: K): boolean {\r\n\t\treturn this.map.has(key);\r\n\t}\r\n\r\n\t/** Returns a new Iterator object that contains an array of [key, value] for each element in the Map object in insertion order. */\r\n\tpublic entries(): IterableIterator<[K, V]> {\r\n\t\treturn this.map.entries();\r\n\t}\r\n\r\n\t/** Iterates through the Managers contents, calling a callback function every iteration */\r\n\tpublic forEach(\r\n\t\tcallback: (value?: V, key?: K, map?: Map<K, V>) => void,\r\n\t\tcontext?: object\r\n\t): Manager<K, V> {\r\n\t\tthis.map.forEach(callback, context);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Allows for iteration via for..of, learn more: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators] */\r\n\tpublic [Symbol.iterator](): IterableIterator<[K, V]> {\r\n\t\treturn this.entries();\r\n\t}\r\n}\r\n\r\n/**\r\n * Calls the method of a certain name for all items that are currently installed\r\n */\r\nexport const methodCall = (manager: Manager<any, any>, method: string, ...args: any): void => {\r\n\tmanager.forEach((item) => {\r\n\t\t// @ts-ignore\r\n\t\titem[method](...args);\r\n\t});\r\n};\r\n\r\n/**\r\n * Asynchronously calls the method of a certain name for all items that are currently installed, similar to methodCall\r\n */\r\nexport const asyncMethodCall = async (manager: Manager<any, any>, method: string, ...args: any): Promise<void> => {\r\n\tfor (let [, item] of manager) {\r\n\t\t// @ts-ignore\r\n\t\tawait item[method](...args);\r\n\t}\r\n};\r\n\r\nexport default Manager;\r\n", "import { Manager, methodCall } from \"@okikio/manager\";\r\nimport { ICONFIG } from \"./config\";\r\nimport { IApp } from \"./app\";\r\nimport { EventEmitter } from \"@okikio/emitter\";\r\n\r\nexport type IAdvancedManager = AdvancedManager<any, ManagerItem>;\r\n\r\n/** The base class for AdvancedManager items */\r\nexport class ManagerItem {\r\n    /** The AdvancedManager the ManagerItem is attached to */\r\n    public manager: IAdvancedManager;\r\n\r\n    /** The App the ManagerItem is attached to */\r\n    public app: IApp;\r\n\r\n    /** The Config of the App the ManagerItem is attached to */\r\n    public config: ICONFIG;\r\n\r\n    /** The EventEmitter of the App the ManagerItem is attached to */\r\n    public emitter: EventEmitter;\r\n\r\n    /** The key to where ManagerItem is stored in an AdvancedManager */\r\n    public key: any;\r\n\r\n    constructor() { }\r\n\r\n    /** Run after the Manager Item has been registered */\r\n    public install(): any { }\r\n\r\n    /** Register the current Manager Item's manager */\r\n    public register(manager: IAdvancedManager, key: any): ManagerItem {\r\n        this.manager = manager;\r\n        this.app = manager.app;\r\n        this.config = manager.config;\r\n        this.emitter = manager.emitter;\r\n        this.key = key;\r\n        this.install();\r\n        return this;\r\n    }\r\n\r\n    /** Run before the ManagerItem has been unregistered */\r\n    public uninstall(): any { }\r\n\r\n    /** Basically removes a ManagerItem, in order to recover the ManagerItem, it needs to be re-added to an AdvancedManager */\r\n    public unregister() {\r\n        this.uninstall();\r\n\r\n        this.manager.remove(this.key);\r\n        this.key = undefined;\r\n        this.manager = undefined;\r\n        this.app = undefined;\r\n        this.config = undefined;\r\n        this.emitter = undefined;\r\n    }\r\n}\r\n\r\n/** A tweak to the Manager class that makes it self aware of the App class it's instantiated in */\r\nexport class AdvancedManager<K, V extends ManagerItem> extends Manager<K, V> {\r\n    /** The App the AdvancedManager is attached to */\r\n    public app: IApp;\r\n\r\n    /** The Config of the App the AdvancedManager is attached to */\r\n    public config: ICONFIG;\r\n\r\n    /** The EventEmitter of the App the AdvancedManager is attached to */\r\n    public emitter: EventEmitter;\r\n\r\n    /** Register App details */\r\n    constructor(app: IApp) {\r\n        super();\r\n        this.app = app;\r\n        this.config = app.config;\r\n        this.emitter = app.emitter;\r\n    }\r\n\r\n    /** Add a ManagerItem to AdvancedManager at a specified key */\r\n    public set(key: K, value: V) {\r\n        super.set(key, value);\r\n        value.register(this, key);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport { Manager, methodCall };\r\n", "export const newURL = (url: string | URL | Location = window.location.href): URL => {\r\n    return url instanceof URL ? url : new URL(url as unknown as string, window.location.origin);\r\n};\r\n\r\n/** Returns the pathname with the hash at the end */\r\nexport const getHashedPath = (url: URL | string): string => {\r\n    let _url = newURL(url);\r\n    return `${_url.pathname}${_url.hash}`;\r\n};\r\n\r\n/** Returns the actual hash without the hashtag */\r\nexport const getHash = (url: URL | string): string => newURL(url).hash.slice(1);\r\n\r\n/** Removes the hash from the full URL for a clean URL string */\r\nexport const clean = (url: URL | string): string => newURL(url).toString().replace(/(\\/#.*|\\/|#.*)$/, '');\r\n\r\n/** Compares two URLs to each other */\r\nexport const equal = (a: URL | string, b: URL | string): boolean => (clean(a) === clean(b));\r\n\r\n", "import { AdvancedManager, ManagerItem, methodCall } from \"./manager\";\r\nimport { IApp } from \"./app\";\r\n\r\n/** Controls specific kinds of actions that require JS */\r\nexport class Service extends ManagerItem {\r\n\t/** Called before the start of a Service, represents a constructor of sorts */\r\n\tpublic init(...args: any): any;\r\n\tpublic init(): any { }\r\n\r\n\t/** Called on start of Service */\r\n\tpublic boot(...args: any): any;\r\n\tpublic boot(): any {\r\n\t\tthis.initEvents();\r\n\t}\r\n\r\n\t/** Initialize events */\r\n\tpublic initEvents(): void { }\r\n\r\n\t/** Stop events */\r\n\tpublic stopEvents(): void { }\r\n\r\n\t/** Stop services */\r\n\tpublic stop(): void {\r\n\t\tthis.stopEvents();\r\n\t\tthis.unregister();\r\n\t}\r\n}\r\n\r\n/** The Service Manager controls the lifecycle of all Services in an App */\r\nexport class ServiceManager extends AdvancedManager<string, Service> {\r\n\tconstructor(app: IApp) {\r\n\t\tsuper(app);\r\n\t}\r\n\r\n\t/** Call the init method for all Services */\r\n\tpublic init(): ServiceManager {\r\n\t\tmethodCall(this, \"init\");\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Call the boot method for all Services */\r\n\tpublic boot(): ServiceManager {\r\n\t\tmethodCall(this, \"boot\");\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Call the stop method for all Services */\r\n\tpublic stop(): ServiceManager {\r\n\t\tmethodCall(this, \"stop\");\r\n\t\treturn this;\r\n\t}\r\n}\r\n", "import { Service } from \"./service\";\r\nimport { getHashedPath, newURL } from \"./url\";\r\n\r\nexport type Trigger = HTMLAnchorElement | \"HistoryManager\" | \"popstate\" | \"back\" | \"forward\";\r\nexport interface ICoords {\r\n\treadonly x: number;\r\n\treadonly y: number;\r\n}\r\n\r\nexport interface IStateData {\r\n\tscroll: ICoords;\r\n\t[key: string]: any;\r\n}\r\n\r\nexport interface IState {\r\n\turl: string;\r\n\tindex?: number;\r\n\ttransition: string;\r\n\tdata: IStateData;\r\n}\r\n\r\nexport interface IHistoryItem {\r\n\tindex: number;\r\n\tstates: IState[];\r\n}\r\n\r\nexport interface IHistoryManager extends Service {\r\n\tstates: IState[],\r\n\tpointer: number,\r\n\r\n\tinit(): any,\r\n\tget(index: number): IState,\r\n\tadd(value?: IState, historyAction?: \"replace\" | \"push\"): HistoryManager,\r\n\tremove(index?: number): HistoryManager,\r\n\treplace(newStates: IState[]): HistoryManager,\r\n\tset(i: number, state: IState): IState,\r\n\tcurrent: IState,\r\n\tlast: IState,\r\n\tprevious: IState | null,\r\n\tlength: number,\r\n}\r\n\r\n/** A quick snapshot of page scroll coordinates */\r\nexport const newCoords = (x: number = window.scrollX, y: number = window.scrollY): ICoords => ({ x, y });\r\n\r\n/** Creates a state; a state represents the current status of the page consisting of properties like: url, transition, and data */\r\nexport const newState = (state: IState = {\r\n\turl: getHashedPath(newURL()),\r\n\tindex: 0,\r\n\ttransition: \"default\",\r\n\tdata: {\r\n\t\tscroll: newCoords(),\r\n\t\ttrigger: \"HistoryManager\"\r\n\t}\r\n}): IState => (state);\r\n\r\n/** Keeps a record of the history of the App; it stores only the states of Pages */\r\nexport class HistoryManager extends Service implements IHistoryManager {\r\n\tpublic states: IState[];\r\n\tpublic pointer = -1;\r\n\r\n\t/** Initializes the states array, and replace the history pushState data with the states array */\r\n\tinit() {\r\n\t\tthis.states = [];\r\n\r\n\t\tlet state = newState();\r\n\t\tthis.add(state, \"replace\");\r\n\t}\r\n\r\n\t/** Get a state based on it's index */\r\n\tpublic get(index: number) {\r\n\t\treturn this.states[index];\r\n\t}\r\n\r\n\t/** Add a state to HistoryManager and change the history pushState data based on the historyAction specified */\r\n\tpublic add(value?: IState, historyAction: \"replace\" | \"push\" = \"push\"): HistoryManager {\r\n\t\tlet state = newState(value);\r\n\t\tlet len = this.length;\r\n\t\tthis.states.push({ ...state });\r\n\t\tthis.pointer = len;\r\n\r\n\t\tlet item: IHistoryItem = {\r\n\t\t\tindex: this.pointer,\r\n\t\t\tstates: [...this.states]\r\n\t\t};\r\n\t\tchangeState(historyAction, state, item);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic remove(index?: number) {\r\n\t\tif (index) {\r\n\t\t\tthis.states.splice(index, 1);\r\n\t\t} else {\r\n\t\t\tthis.states.pop();\r\n\t\t}\r\n\r\n\t\tthis.pointer--;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Replaces the states array with another states array, this is later used when going back and forward in page history */\r\n\tpublic replace(newStates: IState[]) {\r\n\t\tthis.states = newStates;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Set state by index. */\r\n\tpublic set(i: number, state: IState) {\r\n\t\treturn (this.states[i] = state);\r\n\t}\r\n\r\n\t/** Get the current state */\r\n\tget current(): IState {\r\n\t\treturn this.get(this.pointer);\r\n\t}\r\n\r\n\t/** Get the last state (top of the history stack). */\r\n\tget last(): IState {\r\n\t\treturn this.get(this.length - 1);\r\n\t}\r\n\r\n\t/** Get the previous state. */\r\n\tget previous(): IState | null {\r\n\t\treturn this.pointer < 1 ? null : this.get(this.pointer - 1);\r\n\t}\r\n\r\n\tget length() {\r\n\t\treturn this.states.length;\r\n\t}\r\n}\r\n\r\n/** Either push or replace history state */\r\nexport const changeState = (action: \"push\" | \"replace\", state: IState, item: object) => {\r\n\tlet href = getHashedPath(state.url);\r\n\tlet args = [item, \"\", href];\r\n\tif (window.history) {\r\n\t\tswitch (action) {\r\n\t\t\tcase \"push\":\r\n\t\t\t\twindow.history.pushState.apply(window.history, args);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"replace\":\r\n\t\t\t\twindow.history.replaceState.apply(window.history, args);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n};\r\n", "import { Manager, ManagerItem, AdvancedManager } from \"./manager\";\r\nimport { equal, newURL } from \"./url\";\r\nimport { getConfig } from \"./config\";\r\nimport { Service } from \"./service\";\r\n\r\nexport interface IPage extends ManagerItem {\r\n    dom: Document,\r\n    wrapper: HTMLElement,\r\n    title: string,\r\n    head: Element,\r\n    body: Element,\r\n    url: URL,\r\n    data: string,\r\n    wrapperAttr: string,\r\n\r\n    build(): any,\r\n    install(): void,\r\n    uninstall(): any,\r\n}\r\n\r\n/**\r\n * Parses strings to DOM\r\n */\r\nexport const PARSER: DOMParser = new DOMParser();\r\n\r\n/** A page represents the DOM elements that create each page */\r\nexport class Page extends ManagerItem implements IPage {\r\n    /** Holds the DOM of the current page */\r\n    public dom: Document;\r\n\r\n    /** Holds the wrapper element to be swapped out of each Page */\r\n    public wrapper: HTMLElement;\r\n\r\n    /** Holds the title of each page */\r\n    public title: string;\r\n\r\n    /** Holds the head element of each page */\r\n    public head: Element;\r\n\r\n    /** Holds the body element of each page */\r\n    public body: Element;\r\n\r\n    /** The URL of the current page */\r\n    public url: URL;\r\n\r\n    /** The payload of a page request */\r\n    public data: string;\r\n\r\n    /** Attr that identifies the wrapper */\r\n    public wrapperAttr: string;\r\n\r\n    constructor(url: URL = newURL(), dom: string | Document = document) {\r\n        super();\r\n        this.url = url;\r\n\r\n        if (typeof dom === \"string\") {\r\n            this.data = dom;\r\n        } else this.dom = dom || document;\r\n    }\r\n\r\n    /** Builds the page's dom, and sets the title, head, body, and wrapper properties of the Page class */\r\n    public build() {\r\n        if (!(this.dom instanceof Node)) {\r\n            this.dom = PARSER.parseFromString(this.data, \"text/html\");\r\n        }\r\n\r\n        if (!(this.body instanceof Node)) {\r\n            let { title, head, body } = this.dom;\r\n            this.title = title;\r\n            this.head = head;\r\n            this.body = body;\r\n            this.wrapper = this.body.querySelector(this.wrapperAttr);\r\n        }\r\n    }\r\n\r\n    public install() {\r\n        this.wrapperAttr = getConfig(this.config, \"wrapperAttr\");\r\n    }\r\n\r\n    public uninstall() {\r\n        this.url = undefined;\r\n        this.title = undefined;\r\n        this.head = undefined;\r\n        this.body = undefined;\r\n        this.dom = undefined;\r\n        this.wrapper = undefined;\r\n        this.data = undefined;\r\n        this.wrapperAttr = undefined;\r\n    }\r\n}\r\n\r\nexport interface IPageManager extends Service {\r\n    loading: Manager<string, Promise<string>>,\r\n    pages: AdvancedManager<string, Page>;\r\n\r\n    install(): any,\r\n\r\n    get(key: string): Page,\r\n    add(value: IPage): PageManager,\r\n    set(key: string, value: IPage): PageManager,\r\n    remove(key: string): PageManager,\r\n    has(key: string): boolean,\r\n    clear(): PageManager,\r\n    size: number,\r\n    keys(): any[],\r\n\r\n    load(_url: URL | string): Promise<Page>,\r\n    request(url: string): Promise<string>,\r\n}\r\n\r\n/** Controls which page to load */\r\nexport class PageManager extends Service implements IPageManager {\r\n    /** Stores all fetch requests that are currently loading */\r\n    public loading: Manager<string, Promise<string>> = new Manager();\r\n\r\n    pages: AdvancedManager<string, Page>;\r\n\r\n    /** Instantiate pages, and add the current page to pages */\r\n    install() {\r\n        this.pages = new AdvancedManager(this.app);\r\n\r\n        let URLString = newURL().pathname;\r\n        this.set(URLString, new Page());\r\n        URLString = undefined;\r\n    }\r\n\r\n    get(key: string) { return this.pages.get(key); }\r\n    add(value: IPage) { this.pages.add(value); return this; }\r\n    set(key: string, value: IPage) { this.pages.set(key, value); return this; }\r\n    remove(key: string) { this.pages.remove(key); return this; }\r\n    has(key: string) { return this.pages.has(key); }\r\n    clear() { this.pages.clear(); return this; }\r\n    get size() { return this.pages.size; }\r\n    keys() { return this.pages.keys(); }\r\n\r\n    /** Load from cache or by requesting URL via a fetch request, avoid requesting for the same thing twice by storing the fetch request in \"this.loading\" */\r\n    public async load(_url: URL | string = newURL()): Promise<Page> {\r\n        let url: URL = newURL(_url);\r\n        let urlString: string = url.pathname;\r\n        let page: Page, request: Promise<string>;\r\n\r\n        if (this.has(urlString)) {\r\n            page = this.get(urlString);\r\n            return Promise.resolve(page);\r\n        }\r\n\r\n        if (!this.loading.has(urlString)) {\r\n            request = this.request(urlString);\r\n            this.loading.set(urlString, request);\r\n        } else request = this.loading.get(urlString);\r\n\r\n        let response = await request;\r\n        this.loading.remove(urlString);\r\n\r\n        page = new Page(url, response);\r\n        this.set(urlString, page);\r\n\r\n        if (this.size > getConfig(this.config, \"maxPages\")) {\r\n            let currentUrl = newURL();\r\n            let keys = this.keys();\r\n            let first = equal(currentUrl, keys[0]) ? keys[1] : keys[0];\r\n            let page = this.get(first);\r\n            page.unregister();\r\n            page = undefined;\r\n            keys = undefined;\r\n            currentUrl = undefined;\r\n            first = undefined;\r\n        }\r\n\r\n        return page;\r\n    }\r\n\r\n    /** Starts a fetch request */\r\n    public async request(url: string): Promise<string> {\r\n        const headers = new Headers(getConfig(this.config, \"headers\"));\r\n        const timeout = window.setTimeout(() => {\r\n            window.clearTimeout(timeout);\r\n            throw \"Request Timed Out!\";\r\n        }, getConfig(this.config, \"timeout\"));\r\n\r\n        try {\r\n            let response = await fetch(url, {\r\n                mode: 'same-origin',\r\n                method: \"GET\",\r\n                headers,\r\n                cache: \"default\",\r\n                credentials: \"same-origin\",\r\n            });\r\n\r\n            window.clearTimeout(timeout);\r\n            if (response.status >= 200 && response.status < 300) {\r\n                return await response.text();\r\n            }\r\n\r\n            const err = new Error(response.statusText || \"\" + response.status);\r\n            throw err;\r\n        } catch (err) {\r\n            window.clearTimeout(timeout);\r\n            throw err;\r\n        }\r\n    }\r\n}\r\n", "import { Manager } from \"./manager\";\r\nimport { ICoords, newCoords, Trigger } from \"./history\";\r\nimport { IPage } from \"./page\";\r\nimport { getConfig } from \"./config\";\r\nimport { Service } from \"./service\";\r\nimport { newURL } from \"./url\";\r\n\r\n/**\r\n * The async function type, allows for smooth transition between Promises\r\n */\r\nexport type asyncFn = (err?: any, value?: any) => void;\r\nexport interface ITransition {\r\n    oldPage?: IPage;\r\n    newPage?: IPage;\r\n    trigger?: Trigger;\r\n    scroll?: { x: number; y: number };\r\n    scrollable?: boolean;\r\n    in: (data: ITransitionData) => any;\r\n    out: (data: ITransitionData) => any;\r\n    [key: string]: any;\r\n}\r\nexport interface ITransitionData {\r\n    from?: IPage;\r\n    to?: IPage;\r\n    trigger?: Trigger;\r\n    scroll?: ICoords;\r\n    done: asyncFn;\r\n}\r\nexport interface ITransitionManager extends Service {\r\n    transitions: Manager<string, ITransition>,\r\n\r\n    get(key: string): ITransition,\r\n    set(key: string, value: ITransition): TransitionManager,\r\n    add(value: ITransition): TransitionManager,\r\n    has(key: string): boolean,\r\n\r\n    boot(): any,\r\n    animate(name: string, data: any): Promise<ITransition>,\r\n}\r\n\r\n/** Auto scrolls to an elements position if the element has an hash */\r\nexport const hashAction = (coords?: ICoords, hash: string = window.location.hash) => {\r\n    try {\r\n        let _hash = hash[0] == \"#\" ? hash : newURL(hash).hash;\r\n        if (_hash.length > 1) {\r\n            let el = document.getElementById(_hash.slice(1));\r\n            if (el) {\r\n                let { left, top } = el.getBoundingClientRect();\r\n                let scrollLeft = window.scrollX;\r\n                let scrollTop = window.scrollY;\r\n                let x = left + scrollLeft;\r\n                let y = top + scrollTop;\r\n\r\n                console.log(x, y);\r\n                return newCoords(x, y);\r\n            }\r\n        }\r\n    } catch (e) {\r\n        console.warn(\"[hashAction] error\", e);\r\n    }\r\n\r\n    return coords ?? newCoords(0, 0);\r\n};\r\n\r\n// The Default Transition\r\nconst Default: ITransition = {\r\n    name: \"default\",\r\n    scrollable: true,\r\n\r\n    out({ done }: ITransitionData) {\r\n        done();\r\n    },\r\n    in({ scroll, done }: ITransitionData) {\r\n        window.scroll(scroll.x, scroll.y);\r\n        done();\r\n    }\r\n};\r\n\r\n/** Controls which Transition between pages to use */\r\nexport class TransitionManager extends Service implements ITransitionManager {\r\n    transitions: Manager<string, ITransition>;\r\n    private _arg: Array<[string, ITransition]>;\r\n    constructor(transitions?: Array<[string, ITransition]>) {\r\n        super();\r\n        this._arg = transitions;\r\n    }\r\n\r\n    /** On Service install set Config */\r\n    public install() {\r\n        super.install();\r\n\r\n        let transitions = this._arg && this._arg.length ? this._arg : (getConfig(this.config, \"transitions\") ?? []);\r\n\r\n        // Manager like Maps use the most recent [key, value] Array it knows, replacing the default transition\r\n        // With any other transitions called [\"default\", ...]\r\n        transitions = [[\"default\", Default]].concat(transitions);\r\n        this.transitions = new Manager(transitions);\r\n    }\r\n\r\n    get(key: string) { return this.transitions.get(key); }\r\n    set(key: string, value: ITransition) { this.transitions.set(key, value); return this; }\r\n    add(value: ITransition) { this.transitions.add(value); return this; }\r\n    has(key: string) { return this.transitions.has(key); }\r\n\r\n    /** Starts a transition */\r\n    public async animate(name: string, data: any): Promise<ITransition> {\r\n        let transition: ITransition = this.transitions.get(name);\r\n        let scroll = data.scroll;\r\n        let ignoreHashAction = data.ignoreHashAction;\r\n        if (!(\"wrapper\" in data.oldPage) || !(\"wrapper\" in data.newPage))\r\n            throw `[Page] either oldPage or newPage aren't instances of the Page Class.\\n ${{\r\n                newPage: data.newPage,\r\n                oldPage: data.oldPage,\r\n            }}`;\r\n\r\n        // Replace the title\r\n        document.title = `` + data.newPage.title;\r\n\r\n        let fromWrapper = data.oldPage.wrapper;\r\n        let toWrapper = data.newPage.wrapper;\r\n\r\n        if (!(fromWrapper instanceof Node) || !(toWrapper instanceof Node))\r\n            throw `[Wrapper] the wrapper from the ${!(toWrapper instanceof Node) ? \"next\" : \"current\"\r\n            } page cannot be found. The wrapper must be an element that has the attribute ${getConfig(this.config,\r\n                \"wrapperAttr\"\r\n            )}.`;\r\n\r\n        // Give the Transition all the background data it may require\r\n        transition.init && transition?.init(data);\r\n\r\n        this.emitter.emit(\"BEFORE_TRANSITION_OUT\");\r\n\r\n        // Start the out point of the Transition\r\n        if (transition.out) {\r\n            await new Promise((done) => {\r\n                let outMethod: Promise<any> = transition.out.call(transition, {\r\n                    ...data,\r\n                    from: data.oldPage,\r\n                    trigger: data.trigger,\r\n                    done,\r\n                });\r\n\r\n                outMethod?.then(done);\r\n            });\r\n        }\r\n\r\n        this.emitter.emit(\"AFTER_TRANSITION_OUT\");\r\n\r\n        // Add the new wrapper before the old one\r\n        await new Promise<void>((done) => {\r\n            fromWrapper.insertAdjacentElement(\"beforebegin\", toWrapper);\r\n            this.emitter.emit(\"CONTENT_INSERT\");\r\n\r\n            if (!ignoreHashAction && !/back|popstate|forward/.test(data.trigger as string)) {\r\n                scroll = hashAction(scroll);\r\n            }\r\n            done();\r\n        });\r\n\r\n        // Replace the old wrapper with the new one\r\n        await new Promise<void>((done) => {\r\n            fromWrapper.remove();\r\n            fromWrapper = undefined;\r\n            toWrapper = undefined;\r\n            this.emitter.emit(\"CONTENT_REPLACED\");\r\n            done();\r\n        });\r\n\r\n        this.emitter.emit(\"BEFORE_TRANSITION_IN\");\r\n\r\n        // Start the in point of the Transition (only the in method has access to the hashAction's scroll position)\r\n        if (transition.in) {\r\n            await new Promise(async (done) => {\r\n                let inMethod: Promise<any> = transition.in.call(transition, {\r\n                    ...data,\r\n                    from: data.oldPage,\r\n                    to: data.newPage,\r\n                    trigger: data.trigger,\r\n                    scroll,\r\n                    done,\r\n                });\r\n\r\n                inMethod?.then(done);\r\n            });\r\n        }\r\n\r\n        this.emitter.emit(\"AFTER_TRANSITION_IN\");\r\n        return transition;\r\n    }\r\n}\r\n", "import { Manager, methodCall } from \"@okikio/manager\";\r\n\r\n/**\r\n * Represents a listener callback function\r\n */\r\nexport type TypeListenerCallback = ((...args: any) => void);\r\n\r\n/** Represents a new event listener consisting of properties like: callback, scope, name */\r\nexport interface IListener {\r\n    readonly callback: TypeListenerCallback;\r\n    readonly scope: object;\r\n    readonly name: string;\r\n}\r\n\r\n/**\r\n * Creates a new listener based on {@link IListener | IListener}\r\n */\r\nexport const newListener = ({\r\n    callback = () => { },\r\n    scope = null,\r\n    name = \"event\",\r\n}: IListener): IListener => ({ callback, scope, name });\r\n\r\n/** Represents a new event  */\r\nexport class Event extends Manager<number, IListener> {\r\n    /** The name of the event */\r\n    public name: string;\r\n    constructor(name: string = \"event\") {\r\n        super();\r\n        this.name = name;\r\n    }\r\n}\r\n\r\n/**\r\n * The types of values `EventEmitter.prototype.on(...), EventEmitter.prototype.once(...), and EventEmitter.prototype.off(...)` accept\r\n */\r\nexport type TypeEventInput = string | object | Array<string>;\r\n\r\n/**\r\n * An Event Emitter\r\n * */\r\nexport class EventEmitter extends Manager<string, Event> {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /** Gets event, if event doesn't exist create a new one */\r\n    public getEvent(name: string): Event {\r\n        let event = this.get(name);\r\n        if (!(event instanceof Event)) {\r\n            this.set(name, new Event(name));\r\n            return this.get(name);\r\n        }\r\n\r\n        return event;\r\n    }\r\n\r\n    /** Creates a listener and adds it to an event */\r\n    public newListener(\r\n        name: string,\r\n        callback: TypeListenerCallback,\r\n        scope: object\r\n    ): Event {\r\n        let event = this.getEvent(name);\r\n        event.add(newListener({ name, callback, scope }));\r\n        return event;\r\n    }\r\n\r\n    /** Adds a listener to a given event */\r\n    public on(\r\n        events: TypeEventInput,\r\n        callback?: TypeListenerCallback | object,\r\n        scope?: object\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (typeof events == \"undefined\") return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\r\n\r\n        let _name: string;\r\n        let _callback: TypeListenerCallback;\r\n        let isObject = typeof events == \"object\" && !Array.isArray(events);\r\n\r\n        let _scope: object = isObject ? callback : scope;\r\n        if (!isObject) _callback = (callback as TypeListenerCallback);\r\n\r\n        // Loop through the list of events\r\n        Object.keys(events).forEach(key => {\r\n            // Select the name of the event from the list\r\n            // Remember events can be {String | Object | Array<string>}\r\n\r\n            // Check If events is an Object (JSON like Object, and not an Array)\r\n            _name = isObject ? key : events[key];\r\n            if (isObject) _callback = events[key];\r\n\r\n            this.newListener(_name, _callback, _scope);\r\n        }, this);\r\n        return this;\r\n    }\r\n\r\n    /** Removes a listener from an event */\r\n    public removeListener(\r\n        name: string,\r\n        callback: TypeListenerCallback,\r\n        scope: object\r\n    ): Event {\r\n        let event: Event = this.get(name);\r\n        if (event instanceof Event && callback) {\r\n            let listener = newListener({ name, callback, scope });\r\n\r\n            event.forEach((value: IListener, i: number) => {\r\n                if (\r\n                    value.callback === listener.callback &&\r\n                    value.scope === listener.scope\r\n                ) return event.remove(i);\r\n            });\r\n        }\r\n\r\n        return event;\r\n    }\r\n\r\n    /** Remove a listener from a given event, or just completely remove an event */\r\n    public off(\r\n        events: TypeEventInput,\r\n        callback?: TypeListenerCallback | object,\r\n        scope?: object\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (typeof events == \"undefined\") return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\r\n\r\n        let _name: string;\r\n        let _callback: TypeListenerCallback;\r\n        let isObject = typeof events == \"object\" && !Array.isArray(events);\r\n\r\n        let _scope: object = isObject ? callback : scope;\r\n        if (!isObject) _callback = (callback as TypeListenerCallback);\r\n\r\n        // Loop through the list of events\r\n        Object.keys(events).forEach(key => {\r\n            // Select the name of the event from the list\r\n            // Remember events can be {String | Object | Array<any>}\r\n\r\n            // Check If events is an Object (JSON like Object, and not an Array)\r\n            _name = isObject ? key : events[key];\r\n            if (isObject) _callback = events[key];\r\n\r\n            if (typeof _callback === \"function\") {\r\n                this.removeListener(_name, _callback, _scope);\r\n            } else this.remove(_name);\r\n        }, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a one time event listener for an event\r\n     */\r\n    public once(\r\n        events: TypeEventInput,\r\n        callback?: TypeListenerCallback | object,\r\n        scope?: object\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (typeof events == \"undefined\") return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\r\n\r\n        let isObject = typeof events == \"object\" && !Array.isArray(events);\r\n\r\n        // Loop through the list of events\r\n        Object.keys(events).forEach(key => {\r\n            // Select the name of the event from the list\r\n            // Remember events can be {String | Object | Array<string>}\r\n            // Check If events is an Object (JSON like Object, and not an Array)\r\n            let _name: string = isObject ? key : events[key];\r\n            let _callback: TypeListenerCallback = isObject ? events[key] : (callback as TypeListenerCallback);\r\n            let _scope: object = isObject ? callback : scope;\r\n            let onceFn: TypeListenerCallback = (...args) => {\r\n                _callback.apply(_scope, args);\r\n                this.removeListener(_name, onceFn, _scope);\r\n            };\r\n\r\n            this.newListener(_name, onceFn, _scope);\r\n        }, this);\r\n        return this;\r\n    }\r\n\r\n    /** Call all listeners within an event */\r\n    public emit(\r\n        events: string | Array<any>,\r\n        ...args: any\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (typeof events == \"undefined\") return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\r\n\r\n        // Loop through the list of events\r\n        events.forEach((event: string) => {\r\n            let _event: Event = this.get(event);\r\n            if (_event instanceof Event) {\r\n                _event.forEach((listener: IListener) => {\r\n                    let { callback, scope } = listener;\r\n                    callback.apply(scope, args);\r\n                });\r\n            }\r\n        }, this);\r\n        return this;\r\n    }\r\n\r\n    /** Clears events and event listeners */\r\n    public clear() {\r\n        methodCall(this, \"clear\");\r\n        super.clear();\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default EventEmitter;\r\n", "import { EventEmitter, TypeListenerCallback, TypeEventInput } from \"@okikio/emitter\";\r\nimport { ServiceManager, Service } from \"./service\";\r\nimport { newConfig, ICONFIG, getConfig } from \"./config\";\r\n\r\nexport interface IApp {\r\n    services: ServiceManager,\r\n    emitter: EventEmitter,\r\n    config: ICONFIG,\r\n    register(config: ICONFIG): App,\r\n    get(key: string): Service,\r\n    set(key: string, service: Service): App,\r\n    add(value: Service): App,\r\n    boot(): App,\r\n    stop(): App,\r\n    on(events: TypeEventInput, callback?: TypeListenerCallback): App,\r\n    off(events: TypeEventInput, callback?: TypeListenerCallback): App,\r\n    emit(events: string | any[], ...args: any): App,\r\n}\r\n\r\n/** The App class starts the entire process, it controls all managers and all services */\r\nexport class App implements IApp {\r\n    /** An instance of the ServiceManager */\r\n    public services: ServiceManager;\r\n\r\n    /** An instance of an EventEmitter */\r\n    public emitter: EventEmitter;\r\n\r\n    /** The current Configuration's for the App */\r\n    public config: ICONFIG;\r\n\r\n    private canResize = true;\r\n    private canScroll = true;\r\n    constructor(config: object = {}) {\r\n        this._resize = this._resize.bind(this);\r\n        this._scroll = this._scroll.bind(this);\r\n        this._ready = this._ready.bind(this);\r\n        this.register(config);\r\n    }\r\n\r\n    /** Create new instances of the ServiceManager, EventEmitter and the configurations */\r\n    public register(config: ICONFIG = {}): App {\r\n        this.config = newConfig(config);\r\n        this.emitter = new EventEmitter();\r\n        this.services = new ServiceManager(this);\r\n\r\n        document.addEventListener(\"DOMContentLoaded\", this._ready);\r\n        window.addEventListener(\"load\", this._ready);\r\n        window.addEventListener(\"resize\", this._resize, { passive: true });\r\n        window.addEventListener(\"scroll\", this._scroll, { passive: true });\r\n        return this;\r\n    }\r\n\r\n    private _ready() {\r\n        document.removeEventListener(\"DOMContentLoaded\", this._ready);\r\n        window.removeEventListener(\"load\", this._ready);\r\n        this.emitter.emit(\"READY ready\");\r\n    }\r\n\r\n    private _resize() {\r\n        if (this.canResize) {\r\n            let timer: number | void, raf: number | void;\r\n            this.canResize = false;\r\n            raf = window.requestAnimationFrame(() => {\r\n                this.emitter.emit(\"RESIZE resize\");\r\n\r\n                // set a timeout to un-throttle\r\n                timer = window.setTimeout(() => {\r\n                    this.canResize = true;\r\n                    timer = window.clearTimeout(timer as number);\r\n                    raf = window.cancelAnimationFrame(raf as number);\r\n                }, getConfig(this.config, \"resizeDelay\"));\r\n            });\r\n        }\r\n    }\r\n\r\n    private _scroll() {\r\n        if (this.canScroll) {\r\n            let raf: number | void;\r\n            this.canScroll = false;\r\n            raf = requestAnimationFrame(() => {\r\n                this.emitter.emit(\"SCROLL scroll\");\r\n\r\n                this.canScroll = true;\r\n                raf = window.cancelAnimationFrame(raf as number);\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Shortcuts to adding, setting, and getting Services */\r\n    public get(key: string): Service {\r\n        return this.services.get(key);\r\n    }\r\n\r\n    public set(key: string, value: Service): App {\r\n        this.services.set(key, value);\r\n        return this;\r\n    }\r\n\r\n    public add(value: Service): App {\r\n        this.services.add(value);\r\n        return this;\r\n    }\r\n\r\n    /** Initialize and boot all Services */\r\n    public boot(): App {\r\n        this.services.init();\r\n        this.services.boot();\r\n        return this;\r\n    }\r\n\r\n    /** Stops all Services and clears the even emitter of all events and listeners */\r\n    public stop(): App {\r\n        this.services.stop();\r\n        this.emitter.clear();\r\n        return this;\r\n    }\r\n\r\n    /** Shortcuts to the App EventEmitter on, off, and emit methods */\r\n    public on(events: TypeEventInput, callback?: TypeListenerCallback): App {\r\n        this.emitter.on(events, callback, this);\r\n        return this;\r\n    }\r\n\r\n    public off(events: TypeEventInput, callback?: TypeListenerCallback): App {\r\n        this.emitter.off(events, callback, this);\r\n        return this;\r\n    }\r\n\r\n    public emit(events: string | any[], ...args: any): App {\r\n        this.emitter.emit(events, ...args);\r\n        return this;\r\n    }\r\n}\r\n", "import { newState, Trigger, newCoords, IHistoryItem, IHistoryManager } from \"./history\";\r\nimport { Service } from \"./service\";\r\nimport { IPage, IPageManager } from \"./page\";\r\nimport { newURL, getHashedPath, equal } from \"./url\";\r\nimport { getConfig } from \"./config\";\r\nimport { hashAction, ITransitionManager } from \"./transition\";\r\n\r\nexport type LinkEvent = MouseEvent | TouchEvent;\r\nexport type StateEvent = LinkEvent | PopStateEvent;\r\nexport type IgnoreURLsList = Array<RegExp | string>;\r\n/**\r\n * Creates a barbajs like PJAX Service, for the native framework\r\n * Based on barbajs and StartingBlocks\r\n */\r\nexport class PJAX extends Service {\r\n    /** URLs to ignore when prefetching */\r\n    public ignoreURLs: IgnoreURLsList;\r\n\r\n    /** Whether or not to disable prefetching */\r\n    public prefetchIgnore: boolean;\r\n\r\n    /** Current state of transitions */\r\n    public isTransitioning: boolean;\r\n\r\n    /** Ignore extra clicks of an anchor element if a transition has already started */\r\n    public stopOnTransitioning: boolean;\r\n\r\n    /** On page change (excluding popstate events) keep current scroll position */\r\n    public stickyScroll: boolean;\r\n\r\n    /** Force load a page if an error occurs */\r\n    public forceOnError: boolean;\r\n\r\n    /** Ignore hash action if set to true */\r\n    public ignoreHashAction: boolean;\r\n\r\n    public install() {\r\n        super.install();\r\n\r\n        this.ignoreURLs = getConfig(this.config, \"ignoreURLs\") ?? [];\r\n        this.prefetchIgnore = getConfig(this.config, \"prefetchIgnore\") ?? false;\r\n        this.stopOnTransitioning = getConfig(this.config, \"stopOnTransitioning\") ?? false;\r\n        this.stickyScroll = getConfig(this.config, \"stickyScroll\") ?? false;\r\n        this.forceOnError = getConfig(this.config, \"forceOnError\") ?? false;\r\n        this.ignoreHashAction = getConfig(this.config, \"ignoreHashAction\") ?? false\r\n    }\r\n\r\n    /** Sets the transition state to either true or false */\r\n    public transitionStart() {\r\n        this.isTransitioning = true;\r\n    }\r\n\r\n    public transitionStop() {\r\n        this.isTransitioning = false;\r\n    }\r\n\r\n    public init() {\r\n        /**\r\n         * Bind the event listeners to the PJAX class\r\n         *\r\n         * @memberof PJAX\r\n         */\r\n        this.onHover = this.onHover.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n        this.onStateChange = this.onStateChange.bind(this);\r\n    }\r\n\r\n    /** Starts the PJAX Service */\r\n    public boot() {\r\n        if (\"scrollRestoration\" in window.history) {\r\n            // Back off, browser, I got this...\r\n            window.history.scrollRestoration = \"manual\";\r\n        }\r\n\r\n        super.boot();\r\n    }\r\n\r\n    /** Gets the transition to use for a certain anchor */\r\n    public getTransitionName(el: HTMLAnchorElement): string | null {\r\n        if (!el || !el.getAttribute) return null;\r\n        let transitionAttr = el.getAttribute(\r\n            getConfig(this.config, \"transitionAttr\", false)\r\n        );\r\n\r\n        if (typeof transitionAttr === \"string\") return transitionAttr;\r\n        return null;\r\n    }\r\n\r\n    /** Checks to see if the anchor is valid */\r\n    public validLink(\r\n        el: HTMLAnchorElement,\r\n        event: LinkEvent | KeyboardEvent,\r\n        href: string\r\n    ): boolean {\r\n        let pushStateSupport = !window.history.pushState;\r\n        let exists = !el || !href;\r\n        let eventMutate =\r\n            (event as KeyboardEvent).metaKey ||\r\n            (event as KeyboardEvent).ctrlKey ||\r\n            (event as KeyboardEvent).shiftKey ||\r\n            (event as KeyboardEvent).altKey;\r\n        let newTab =\r\n            el.hasAttribute(\"target\") &&\r\n            (el as HTMLAnchorElement).target === \"_blank\";\r\n        let crossOrigin =\r\n            (el as HTMLAnchorElement).protocol !== location.protocol ||\r\n            (el as HTMLAnchorElement).hostname !== location.hostname;\r\n        let download = typeof el.getAttribute(\"download\") === \"string\";\r\n        let preventSelf = el.matches(getConfig(this.config, \"preventSelfAttr\"));\r\n        let preventAll = Boolean(\r\n            el.closest(getConfig(this.config, \"preventAllAttr\"))\r\n        );\r\n        let sameURL = getHashedPath(newURL()) === getHashedPath(newURL(href));\r\n        return !(\r\n            exists ||\r\n            pushStateSupport ||\r\n            eventMutate ||\r\n            newTab ||\r\n            crossOrigin ||\r\n            download ||\r\n            preventSelf ||\r\n            preventAll ||\r\n            sameURL\r\n        );\r\n    }\r\n\r\n    /** Returns the href of an Anchor element */\r\n    public getHref(el: HTMLAnchorElement): string | null {\r\n        if (\r\n            el &&\r\n            el.tagName &&\r\n            el.tagName.toLowerCase() === \"a\" &&\r\n            typeof el.href === \"string\"\r\n        )\r\n            return el.href;\r\n        return null;\r\n    }\r\n\r\n    /** Check if event target is a valid anchor with an href, if so, return the anchor */\r\n    public getLink(event: LinkEvent): HTMLAnchorElement {\r\n        let el = event.target as HTMLAnchorElement;\r\n        let href: string = this.getHref(el);\r\n\r\n        while (el && !href) {\r\n            el = (el as HTMLElement).parentNode as HTMLAnchorElement;\r\n            href = this.getHref(el);\r\n        }\r\n\r\n        // Check for a valid link\r\n        if (!el || !this.validLink(el, event, href)) return;\r\n        return el;\r\n    }\r\n\r\n    /** When an element is clicked, get valid anchor element, go for a transition */\r\n    public onClick(event: LinkEvent) {\r\n        let el = this.getLink(event);\r\n        if (!el) return;\r\n\r\n        if (this.isTransitioning && this.stopOnTransitioning) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            return;\r\n        }\r\n\r\n        let href = this.getHref(el);\r\n        this.emitter.emit(\"ANCHOR_CLICK CLICK\", event);\r\n        this.go({ href, trigger: el, event });\r\n    }\r\n\r\n    /** Returns the direction of the State change as a String, either the Back button or the Forward button */\r\n    public getDirection(value: number): Trigger {\r\n        if (Math.abs(value) > 1) {\r\n            // Ex 6-0 > 0 -> forward, 0-6 < 0 -> back\r\n            return value > 0 ? \"forward\" : \"back\";\r\n        } else {\r\n            if (value === 0) {\r\n                return \"popstate\";\r\n            } else {\r\n                // Ex 6-5 > 0 -> back, 5-6 < 0 -> forward\r\n                return value > 0 ? \"back\" : \"forward\";\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Force a page to go to a certain URL */\r\n    public force(href: string): void {\r\n        window.location.assign(href);\r\n    }\r\n\r\n    /**\r\n     * If transition is running force load page.\r\n     * Stop if currentURL is the same as new url.\r\n     * On state change, change the current state history, to reflect the direction of said state change\r\n     * Load page and page transition.\r\n     */\r\n    public go({\r\n        href,\r\n        trigger = \"HistoryManager\",\r\n        event,\r\n    }: {\r\n        href: string;\r\n        trigger?: Trigger;\r\n        event?: StateEvent;\r\n    }): Promise<void> {\r\n        // If transition is already running and the go method is called again, force load page\r\n        if (this.isTransitioning && this.stopOnTransitioning ||\r\n            !(this.manager.has(\"TransitionManager\") &&\r\n                this.manager.has(\"HistoryManager\") &&\r\n                this.manager.has(\"PageManager\"))) {\r\n            this.force(href);\r\n            return;\r\n        }\r\n\r\n        const history = this.manager.get(\"HistoryManager\") as IHistoryManager;\r\n        let scroll = newCoords(0, 0);\r\n        let currentState = history.current;\r\n        let currentURL = currentState.url;\r\n        if (equal(currentURL, href)) {\r\n            return;\r\n        }\r\n\r\n        let transitionName: string;\r\n        if (event && (event as PopStateEvent).state) {\r\n            this.emitter.emit(\"POPSTATE\", event);\r\n\r\n            // If popstate, get back/forward direction.\r\n            let { state }: { state: IHistoryItem } = event as PopStateEvent;\r\n            let { index } = state;\r\n            let currentIndex = currentState.index;\r\n            let difference = currentIndex - index;\r\n\r\n            history.replace(state.states);\r\n            history.pointer = index;\r\n\r\n            let _state = history.get(index);\r\n            transitionName = _state.transition;\r\n            scroll = _state.data.scroll;\r\n\r\n            trigger = this.getDirection(difference);\r\n            console.log(trigger == \"forward\" && history)\r\n\r\n            // Based on the direction of the state change either remove or add a state\r\n            this.emitter.emit(trigger === \"back\" ? `POPSTATE_BACK` : `POPSTATE_FORWARD`, event);\r\n        } else {\r\n            // Add new state\r\n            transitionName = this.getTransitionName(trigger as HTMLAnchorElement);\r\n\r\n            scroll = newCoords();\r\n            let state = newState({\r\n                url: href,\r\n                transition: transitionName,\r\n                data: { scroll },\r\n            });\r\n\r\n            !this.stickyScroll && (scroll = newCoords(0, 0));\r\n\r\n            history.add(state);\r\n            this.emitter.emit(\"HISTORY_NEW_ITEM\", event);\r\n        }\r\n\r\n        if (event) {\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        }\r\n\r\n        this.emitter.emit(\"GO\", event);\r\n        return this.load({\r\n            oldHref: currentURL,\r\n            href,\r\n            trigger,\r\n            transitionName,\r\n            scroll,\r\n        });\r\n    }\r\n\r\n    /** Load the new Page as well as a Transition; starts the Transition */\r\n    public async load({\r\n        oldHref,\r\n        href,\r\n        trigger,\r\n        transitionName = \"default\",\r\n        scroll = { x: 0, y: 0 },\r\n    }: {\r\n        oldHref: string;\r\n        href: string;\r\n        trigger: Trigger;\r\n        transitionName?: string;\r\n        scroll: { x: number; y: number };\r\n    }): Promise<any> {\r\n        try {\r\n            const pages = this.manager.get(\"PageManager\") as IPageManager;\r\n            let newPage: IPage, oldPage: IPage;\r\n            this.emitter.emit(\"NAVIGATION_START\", {\r\n                oldHref,\r\n                href,\r\n                trigger,\r\n                transitionName,\r\n            });\r\n\r\n            // Load & Build both the old and new pages\r\n            try {\r\n                this.transitionStart();\r\n                oldPage = await pages.load(oldHref);\r\n                !(oldPage.dom instanceof Element) && oldPage.build();\r\n\r\n                this.emitter.emit(\"PAGE_LOADING\", { href, oldPage, trigger });\r\n                newPage = await pages.load(href);\r\n                await newPage.build();\r\n                this.emitter.emit(\"PAGE_LOAD_COMPLETE\", {\r\n                    newPage,\r\n                    oldPage,\r\n                    trigger,\r\n                });\r\n            } catch (err) {\r\n                console.warn(`[PJAX] Page load error: ${err}`);\r\n            }\r\n\r\n            // Transition Between Pages\r\n            try {\r\n                const TransitionManager = this.manager.get(\"TransitionManager\") as ITransitionManager;\r\n                this.emitter.emit(\"TRANSITION_START\", transitionName);\r\n\r\n                let transition = await TransitionManager.animate(TransitionManager.has(transitionName) ? transitionName : \"default\", {\r\n                    oldPage,\r\n                    newPage,\r\n                    trigger,\r\n                    scroll,\r\n                    ignoreHashAction: this.ignoreHashAction\r\n                });\r\n\r\n                if (!transition.scrollable) {\r\n                    if (!this.ignoreHashAction && !/back|popstate|forward/.test(trigger as string)) scroll = hashAction(scroll);\r\n                    window.scroll(scroll.x, scroll.y);\r\n                }\r\n\r\n                this.emitter.emit(\"TRANSITION_END\", { transition });\r\n            } catch (err) {\r\n                console.warn(`[PJAX] Transition error: ${err}`);\r\n            }\r\n\r\n            // Navigation is over\r\n            this.emitter.emit(\"NAVIGATION_END\", {\r\n                oldPage,\r\n                newPage,\r\n                trigger,\r\n                transitionName,\r\n            });\r\n        } catch (err) {\r\n            if (this.forceOnError) this.force(href);\r\n            else console.warn(err);\r\n        } finally {\r\n            this.transitionStop(); // Sets isTransitioning to false\r\n        }\r\n    }\r\n\r\n    /** Check to see if the URL is to be ignored, uses either RegExp of Strings to check */\r\n    public ignoredURL({ pathname }: URL): boolean {\r\n        return (\r\n            this.ignoreURLs.length &&\r\n            this.ignoreURLs.some((url) => {\r\n                return typeof url === \"string\"\r\n                    ? url === pathname\r\n                    : (url as RegExp).exec(pathname) !== null;\r\n            })\r\n        );\r\n    }\r\n\r\n    /** When you hover over an anchor, prefetch the event target's href */\r\n    public onHover(event: LinkEvent): Promise<void> {\r\n        let el = this.getLink(event);\r\n        if (!el || !this.manager.has(\"PageManager\")) return;\r\n\r\n        const pages = this.manager.get(\"PageManager\") as IPageManager;\r\n        let url = newURL(this.getHref(el));\r\n        let urlString: string = url.pathname;\r\n\r\n        // If Url is ignored or already in cache, don't do any think\r\n        if (this.ignoredURL(url) || pages.has(urlString)) return;\r\n        this.emitter.emit(\"ANCHOR_HOVER HOVER\", event);\r\n\r\n        try {\r\n            pages.load(url);\r\n        } catch (err) {\r\n            console.warn(\"[PJAX] prefetch error,\", err);\r\n        }\r\n    }\r\n\r\n    /** When History state changes, get url from State, go for a Transition. */\r\n    public onStateChange(event: PopStateEvent): void {\r\n        this.go({ href: window.location.href, trigger: \"popstate\", event });\r\n    }\r\n\r\n    /** Initialize DOM Events */\r\n    public initEvents() {\r\n        if (this.prefetchIgnore !== true) {\r\n            document.addEventListener(\"mouseover\", this.onHover);\r\n            document.addEventListener(\"touchstart\", this.onHover);\r\n        }\r\n\r\n        document.addEventListener(\"click\", this.onClick);\r\n        window.addEventListener(\"popstate\", this.onStateChange);\r\n    }\r\n\r\n    /** Stop DOM Events */\r\n    public stopEvents() {\r\n        if (this.prefetchIgnore !== true) {\r\n            document.removeEventListener(\"mouseover\", this.onHover);\r\n            document.removeEventListener(\"touchstart\", this.onHover);\r\n        }\r\n\r\n        document.removeEventListener(\"click\", this.onClick);\r\n        window.removeEventListener(\"popstate\", this.onStateChange);\r\n    }\r\n}\r\n", "import { Service } from \"./service\";\r\nimport { Manager } from \"./manager\";\r\nimport { newURL, getHashedPath } from \"./url\";\r\nimport { IHistoryManager } from \"./history\";\r\n\r\nexport type RouteMethod = (...args: any) => any;\r\nexport type RouteStyle = string | RegExp | boolean;\r\nexport interface IRouteToFrom {\r\n    to: RouteStyle,\r\n    from: RouteStyle\r\n}\r\nexport type RoutePath = IRouteToFrom | RouteStyle;\r\nexport interface IRoute {\r\n    path: RoutePath,\r\n    method: RouteMethod\r\n}\r\n\r\n/** Controls what happens when certain url paths match a set of criteria */\r\nexport class Router extends Service {\r\n    /** List of routes */\r\n    protected routes: Manager<IRouteToFrom, RouteMethod>;\r\n    constructor(routes: IRoute[] = []) {\r\n        super();\r\n        this.routes = new Manager();\r\n        for (let route of routes) {\r\n            this.add(route);\r\n        }\r\n    }\r\n\r\n    /** Add a new route to watch for */\r\n    public add({ path, method }: IRoute): Router {\r\n        let key = this.parse(path);\r\n        this.routes.set(key, method);\r\n        return this;\r\n    }\r\n\r\n    /** Convert strings into path match functions */\r\n    public parsePath(path: RouteStyle): RegExp | boolean {\r\n        if (typeof path === \"string\") return new RegExp(path, \"i\");\r\n        else if (path instanceof RegExp || typeof path === \"boolean\")\r\n            return path;\r\n        throw \"[Router] only regular expressions, strings and booleans are accepted as paths.\";\r\n    }\r\n\r\n    /** Determines if a strings counts has a path */\r\n    public isPath(input: RouteStyle): boolean {\r\n        return (\r\n            typeof input === \"string\" ||\r\n            input instanceof RegExp ||\r\n            typeof input === \"boolean\"\r\n        );\r\n    }\r\n\r\n    /** Parse the multiple different formats for paths, into a { from, to } object */\r\n    public parse(input: RoutePath): IRouteToFrom {\r\n        let route = input as IRouteToFrom;\r\n        let toFromPath: IRouteToFrom = {\r\n            from: /(.*)/g,\r\n            to: /(.*)/g,\r\n        };\r\n\r\n        if (this.isPath(input as RouteStyle))\r\n            toFromPath = {\r\n                from: true,\r\n                to: input as RouteStyle,\r\n            };\r\n        else if (this.isPath(route.from) && this.isPath(route.to as RouteStyle))\r\n            toFromPath = route;\r\n        else\r\n            throw \"[Router] path is neither a string, regular expression, or a { from, to } object.\";\r\n\r\n        let { from, to } = toFromPath;\r\n        return {\r\n            from: this.parsePath(from),\r\n            to: this.parsePath(to),\r\n        };\r\n    }\r\n\r\n    /** Test if route paths are true, if so run their methods */\r\n    public route() {\r\n        if (this.manager.has(\"HistoryManager\")) {\r\n            let history = this.manager.get(\"HistoryManager\") as IHistoryManager;\r\n            let from: string = getHashedPath(newURL((history.length > 1 ? history.previous : history.current).url));\r\n            let to: string = getHashedPath(newURL());\r\n\r\n            this.routes.forEach((method: RouteMethod, path: IRouteToFrom) => {\r\n                let fromRegExp = path.from as RegExp | boolean;\r\n                let toRegExp = path.to as RegExp | boolean;\r\n\r\n                if (\r\n                    typeof fromRegExp === \"boolean\" &&\r\n                    typeof toRegExp === \"boolean\"\r\n                ) {\r\n                    throw `[Router] path ({ from: ${fromRegExp}, to: ${toRegExp} }) is not valid, remember paths can only be strings, regular expressions, or a boolean; however, both the from and to paths cannot be both booleans.`;\r\n                }\r\n\r\n                let fromParam: RegExpExecArray | RegExp | boolean = fromRegExp;\r\n                let toParam: RegExpExecArray | RegExp | boolean = toRegExp;\r\n\r\n                if (fromRegExp instanceof RegExp && fromRegExp.test(from))\r\n                    fromParam = fromRegExp.exec(from);\r\n                if (toRegExp instanceof RegExp && toRegExp.test(to))\r\n                    toParam = toRegExp.exec(to);\r\n\r\n                if (\r\n                    (Array.isArray(toParam) && Array.isArray(fromParam)) ||\r\n                    (Array.isArray(toParam) &&\r\n                        typeof fromParam == \"boolean\" &&\r\n                        fromParam) ||\r\n                    (Array.isArray(fromParam) &&\r\n                        typeof toParam == \"boolean\" &&\r\n                        toParam)\r\n                )\r\n                    method({ from: fromParam, to: toParam, path: { from, to } });\r\n            });\r\n        } else {\r\n            console.warn(\"[Route] HistoryManager is missing.\");\r\n        }\r\n    }\r\n\r\n    /** Add listeners for PJAX Events */\r\n    public initEvents() {\r\n        this.emitter.on(\"READY\", this.route, this);\r\n        this.emitter.on(\"CONTENT_REPLACED\", this.route, this);\r\n    }\r\n\r\n    /** Remove listeners for PJAX Events */\r\n    public stopEvents() {\r\n        this.emitter.off(\"READY\", this.route, this);\r\n        this.emitter.off(\"CONTENT_REPLACED\", this.route, this);\r\n    }\r\n}\r\n", "/**\r\n * Convert the words \"from\", and \"to\" as well as percentage or numbers to offset value between 0 and 1\r\n */\r\nexport const parseOffset = (input: string | number): number => {\r\n    if (typeof input == \"string\") {\r\n        if (input.includes(\"%\"))\r\n            return parseFloat(input) / 100;\r\n        else if (input == \"from\")\r\n            return 0;\r\n        else if (input == \"to\")\r\n            return 1;\r\n        else\r\n            return parseFloat(input);\r\n    }\r\n\r\n    return input;\r\n};\r\n\r\n/**\r\n * Allows you to quickly convert CSS like JSON into keyframes\r\n *\r\n * @param input - CSS style JSON; check the example to understand what I mean\r\n *\r\n * @example\r\n * ```typescript\r\n * let keyframes = KeyframeParse({\r\n *     \"from, 50%, to\": {\r\n *         opacity: 1\r\n *     },\r\n *\r\n *     \"25%, 0.7\": {\r\n *         opacity: 0\r\n *     }\r\n * });\r\n *\r\n * console.log(keyframes);\r\n * //= [\r\n * //=   { opacity: 1, offset: 0 },\r\n * //=   { opacity: 0, offset: 0.25 },\r\n * //=   { opacity: 1, offset: 0.5 },\r\n * //=   { opacity: 0, offset: 0.7 },\r\n * //=   { opacity: 1, offset: 1 }\r\n * //= ]\r\n * ```\r\n */\r\nexport const KeyframeParse = (input: object): Keyframe[] => {\r\n    // Set removes duplicate Keyframes for the same offset\r\n    let results = new Set<Keyframe>();\r\n    let keys = Object.keys(input);\r\n    let len = keys.length;\r\n    for (let i = 0; i < len; i++) {\r\n        let key = \"\" + keys[i];\r\n        let value = input[key];\r\n        let offsets = key.split(\",\");\r\n        let offsetLen = offsets.length;\r\n\r\n        for (let j = 0; j < offsetLen; j++) {\r\n            let offset = parseOffset(offsets[j]);\r\n            results.add({ ...value, offset });\r\n        }\r\n    }\r\n\r\n    return [...results].sort((a, b) => {\r\n        return a.offset - b.offset;\r\n    });\r\n};\r\n\r\n/**\r\n * I don't really want to put in the effort to create a complete list, so instead just look through the `animate.css` github and copy and paste the effects you need, into using a CSS Keyframe style JSON object, make sure to read the documentation for {@link KeyframeParse}\r\n *\r\n * or\r\n *\r\n * if you just need some quick effects go to [github.com/wellyshen/use-web-animations/](https://github.com/wellyshen/use-web-animations/tree/master/src/animations) and copy the `keyframes` array for the effect you want, remember to say thank you to @wellyshen for all his hardwork, \uD83D\uDE02\r\n *\r\n * @internal\r\n*/\r\nexport const EFFECTS = {};\r\n", "import { EventEmitter, TypeEventInput, TypeListenerCallback } from \"@okikio/emitter\";\r\nimport { Manager } from \"@okikio/manager\";\r\nimport { KeyframeParse, parseOffset } from \"./builtin-effects\";\r\n\r\n/* DOM */\r\nexport type TypeAnimationTarget = string | Node | NodeList | HTMLCollection | HTMLElement[] | TypeAnimationTarget[];\r\nexport const getElements = (selector: string | Node): Node[] => {\r\n    return typeof selector === \"string\" ? Array.from(document.querySelectorAll(selector as string)) : [selector];\r\n};\r\n\r\nexport const flatten = (arr: TypeAnimationTarget[]) => [].concat(...arr);\r\nexport const getTargets = (targets: TypeAnimationTarget): Node[] => {\r\n    if (Array.isArray(targets)) {\r\n        return flatten((targets as TypeAnimationTarget[]).map(getTargets));\r\n    }\r\n    if (typeof targets == \"string\" || targets instanceof Node)\r\n        return getElements(targets);\r\n    if (targets instanceof NodeList || targets instanceof HTMLCollection)\r\n        return Array.from(targets);\r\n    return [];\r\n};\r\n\r\n/* VALUES */\r\n// Types\r\nexport type TypeCallbackArgs = [number, number, HTMLElement];\r\nexport type TypeGeneric = boolean | object | string | number;\r\nexport type TypeCSSLikeKeyframe = { [key: string]: Keyframe & ICSSComputedTransformableProperties };\r\nexport type TypeKeyFrameOptionsType = TypeCSSLikeKeyframe | Keyframe[] | PropertyIndexedKeyframes;\r\nexport type TypeCSSPropertyValue = (string | number)[];\r\nexport type TypeComputedAnimationOptions = TypeGeneric | TypeGeneric[] | TypeKeyFrameOptionsType | KeyframeEffectOptions | ICSSComputedTransformableProperties;\r\nexport type TypeCallback = (index?: number, total?: number, element?: HTMLElement) => TypeComputedAnimationOptions;\r\nexport type TypeAnimationOptionTypes = TypeCallback | TypeComputedAnimationOptions;\r\nexport type TypeComputedOptions = { [key: string]: TypeComputedAnimationOptions };\r\n\r\n// Functions\r\nexport const computeOption = (value: TypeAnimationOptionTypes, args: TypeCallbackArgs, context: Animate): TypeComputedAnimationOptions => {\r\n    if (typeof value === \"function\") {\r\n        return value.apply(context, args);\r\n    } else return value;\r\n};\r\n\r\nexport const mapAnimationOptions = (obj: IAnimationOptions, args: TypeCallbackArgs, options: Animate) => {\r\n    let key: string, value: TypeAnimationOptionTypes, result: TypeComputedOptions = {};\r\n    let keys = Object.keys(obj);\r\n    for (let i = 0, len = keys.length; i < len; i++) {\r\n        key = keys[i];\r\n        value = obj[key];\r\n        result[key] = computeOption(value, args, options);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * From: [https://easings.net]\r\n *\r\n * Read More about easings on [MDN](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/easing)\r\n *\r\n * ```ts\r\n * {\r\n *     \"in\": \"ease-in\",\r\n *     \"out\": \"ease-out\",\r\n *     \"in-out\": \"ease-in-out\",\r\n *\r\n *     // Sine\r\n *     \"in-sine\": \"cubic-bezier(0.47, 0, 0.745, 0.715)\",\r\n *     \"out-sine\": \"cubic-bezier(0.39, 0.575, 0.565, 1)\",\r\n *     \"in-out-sine\": \"cubic-bezier(0.445, 0.05, 0.55, 0.95)\",\r\n *\r\n *     // Quad\r\n *     \"in-quad\": \"cubic-bezier(0.55, 0.085, 0.68, 0.53)\",\r\n *     \"out-quad\": \"cubic-bezier(0.25, 0.46, 0.45, 0.94)\",\r\n *     \"in-out-quad\": \"cubic-bezier(0.455, 0.03, 0.515, 0.955)\",\r\n *\r\n *     // Cubic\r\n *     \"in-cubic\": \"cubic-bezier(0.55, 0.055, 0.675, 0.19)\",\r\n *     \"out-cubic\": \"cubic-bezier(0.215, 0.61, 0.355, 1)\",\r\n *     \"in-out-cubic\": \"cubic-bezier(0.645, 0.045, 0.355, 1)\",\r\n *\r\n *     // Quart\r\n *     \"in-quart\": \"cubic-bezier(0.895, 0.03, 0.685, 0.22)\",\r\n *     \"out-quart\": \"cubic-bezier(0.165, 0.84, 0.44, 1)\",\r\n *     \"in-out-quart\": \"cubic-bezier(0.77, 0, 0.175, 1)\",\r\n *\r\n *     // Quint\r\n *     \"in-quint\": \"cubic-bezier(0.755, 0.05, 0.855, 0.06)\",\r\n *     \"out-quint\": \"cubic-bezier(0.23, 1, 0.32, 1)\",\r\n *     \"in-out-quint\": \"cubic-bezier(0.86, 0, 0.07, 1)\",\r\n *\r\n *     // Expo\r\n *     \"in-expo\": \"cubic-bezier(0.95, 0.05, 0.795, 0.035)\",\r\n *     \"out-expo\": \"cubic-bezier(0.19, 1, 0.22, 1)\",\r\n *     \"in-out-expo\": \"cubic-bezier(1, 0, 0, 1)\",\r\n *\r\n *     // Circ\r\n *     \"in-circ\": \"cubic-bezier(0.6, 0.04, 0.98, 0.335)\",\r\n *     \"out-circ\": \"cubic-bezier(0.075, 0.82, 0.165, 1)\",\r\n *     \"in-out-circ\": \"cubic-bezier(0.785, 0.135, 0.15, 0.86)\",\r\n *\r\n *     // Back\r\n *     \"in-back\": \"cubic-bezier(0.6, -0.28, 0.735, 0.045)\",\r\n *     \"out-back\": \"cubic-bezier(0.175, 0.885, 0.32, 1.275)\",\r\n *     \"in-out-back\": \"cubic-bezier(0.68, -0.55, 0.265, 1.55)\"\r\n * }\r\n * ```\r\n */\r\nexport const EASINGS = {\r\n    \"in\": \"ease-in\",\r\n    \"out\": \"ease-out\",\r\n    \"in-out\": \"ease-in-out\",\r\n\r\n    // Sine\r\n    \"in-sine\": \"cubic-bezier(0.47, 0, 0.745, 0.715)\",\r\n    \"out-sine\": \"cubic-bezier(0.39, 0.575, 0.565, 1)\",\r\n    \"in-out-sine\": \"cubic-bezier(0.445, 0.05, 0.55, 0.95)\",\r\n\r\n    // Quad\r\n    \"in-quad\": \"cubic-bezier(0.55, 0.085, 0.68, 0.53)\",\r\n    \"out-quad\": \"cubic-bezier(0.25, 0.46, 0.45, 0.94)\",\r\n    \"in-out-quad\": \"cubic-bezier(0.455, 0.03, 0.515, 0.955)\",\r\n\r\n    // Cubic\r\n    \"in-cubic\": \"cubic-bezier(0.55, 0.055, 0.675, 0.19)\",\r\n    \"out-cubic\": \"cubic-bezier(0.215, 0.61, 0.355, 1)\",\r\n    \"in-out-cubic\": \"cubic-bezier(0.645, 0.045, 0.355, 1)\",\r\n\r\n    // Quart\r\n    \"in-quart\": \"cubic-bezier(0.895, 0.03, 0.685, 0.22)\",\r\n    \"out-quart\": \"cubic-bezier(0.165, 0.84, 0.44, 1)\",\r\n    \"in-out-quart\": \"cubic-bezier(0.77, 0, 0.175, 1)\",\r\n\r\n    // Quint\r\n    \"in-quint\": \"cubic-bezier(0.755, 0.05, 0.855, 0.06)\",\r\n    \"out-quint\": \"cubic-bezier(0.23, 1, 0.32, 1)\",\r\n    \"in-out-quint\": \"cubic-bezier(0.86, 0, 0.07, 1)\",\r\n\r\n    // Expo\r\n    \"in-expo\": \"cubic-bezier(0.95, 0.05, 0.795, 0.035)\",\r\n    \"out-expo\": \"cubic-bezier(0.19, 1, 0.22, 1)\",\r\n    \"in-out-expo\": \"cubic-bezier(1, 0, 0, 1)\",\r\n\r\n    // Circ\r\n    \"in-circ\": \"cubic-bezier(0.6, 0.04, 0.98, 0.335)\",\r\n    \"out-circ\": \"cubic-bezier(0.075, 0.82, 0.165, 1)\",\r\n    \"in-out-circ\": \"cubic-bezier(0.785, 0.135, 0.15, 0.86)\",\r\n\r\n    // Back\r\n    \"in-back\": \"cubic-bezier(0.6, -0.28, 0.735, 0.045)\",\r\n    \"out-back\": \"cubic-bezier(0.175, 0.885, 0.32, 1.275)\",\r\n    \"in-out-back\": \"cubic-bezier(0.68, -0.55, 0.265, 1.55)\"\r\n};\r\n\r\n/**\r\n * The keys of {@link EASINGS}\r\n *\r\n * @remark\r\n * \"in\", \"out\", \"in-out\", \"in-sine\", \"out-sine\", \"in-out-sine\", \"in-quad\", \"out-quad\", \"in-out-quad\", \"in-cubic\", \"out-cubic\", \"in-out-cubic\", \"in-quart\", \"out-quart\", \"in-out-quart\", \"in-quint\", \"out-quint\", \"in-out-quint\", \"in-expo\", \"out-expo\", \"in-out-expo\", \"in-circ\", \"out-circ\", \"in-out-circ\", \"in-back\", \"out-back\", \"in-out-back\"\r\n */\r\nexport const EasingKeys = Object.keys(EASINGS);\r\n\r\n/**\r\n * Converts users input into a usable easing function\r\n *\r\n * @param ease - easing functions; {@link EasingKeys}, cubic-bezier, steps, linear, etc...\r\n * @returns an easing function that `KeyframeEffect` can accept\r\n */\r\nexport const GetEase = (ease: keyof typeof EASINGS | string): string => {\r\n    let search = ease.replace(/^ease-/, \"\"); // Remove the \"ease-\" keyword\r\n    return EasingKeys.includes(search) ? EASINGS[search] : ease;\r\n};\r\n\r\nexport type TypeSingleValueCSSProperty = string | number | TypeCSSPropertyValue;\r\n\r\n/**\r\n * CSS properties the `ParseTransformableCSSProperties` can parse\r\n */\r\nexport interface ICSSTransformableProperties {\r\n    perspective?: TypeSingleValueCSSProperty | TypeCallback,\r\n    rotate?: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty> | TypeCallback,\r\n    rotate3d?: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty> | TypeCallback,\r\n    rotateX?: TypeSingleValueCSSProperty | TypeCallback,\r\n    rotateY?: TypeSingleValueCSSProperty | TypeCallback,\r\n    rotateZ?: TypeSingleValueCSSProperty | TypeCallback,\r\n    translate?: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty> | TypeCallback,\r\n    translate3d?: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty> | TypeCallback,\r\n    translateX?: TypeSingleValueCSSProperty | TypeCallback,\r\n    translateY?: TypeSingleValueCSSProperty | TypeCallback,\r\n    translateZ?: TypeSingleValueCSSProperty | TypeCallback,\r\n    scale?: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty> | TypeCallback,\r\n    scale3d?: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty> | TypeCallback,\r\n    scaleX?: TypeSingleValueCSSProperty | TypeCallback,\r\n    scaleY?: TypeSingleValueCSSProperty | TypeCallback,\r\n    scaleZ?: TypeSingleValueCSSProperty | TypeCallback,\r\n    skew?: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty> | TypeCallback,\r\n    skewX?: TypeSingleValueCSSProperty | TypeCallback,\r\n    skewY?: TypeSingleValueCSSProperty | TypeCallback,\r\n    opacity?: TypeSingleValueCSSProperty | TypeCallback,\r\n}\r\n\r\n/**\r\n * Animation options control how an animation is produced, it shouldn't be too different for those who have used `animejs`, or `jquery`'s animate method.\r\n *\r\n * @remark\r\n * An animation option is an object with keys and values that are computed and passed to the `Animate` class to create animations that match the specified options.\r\n */\r\nexport interface IAnimationOptions extends ICSSTransformableProperties {\r\n    /**\r\n     * Determines the DOM elements to animate. You can pass it a CSS selector, DOM elements, or an Array of DOM Elements and/or CSS Selectors.\r\n     */\r\n    target?: TypeAnimationTarget,\r\n\r\n    /**\r\n     * Alias of `target`\r\n     * {@link AnimationOptions.target | target }\r\n     */\r\n    targets?: TypeAnimationTarget,\r\n\r\n    /**\r\n     * Determines the acceleration curve of your animation. Based on the easings of [easings.net](https://easings.net)\r\n     *\r\n     * Read More about easings on [MDN](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/easing)\r\n     *\r\n     *\r\n     * | constant | accelerate | decelerate | accelerate-decelerate |\r\n     * | :------- | :--------- | :--------- | :-------------------- |\r\n     * | linear   | in-cubic   | out-cubic  | in-out-cubic          |\r\n     * | ease     | in-quart   | out-quart  | in-out-quart          |\r\n     * |          | in-quint   | out-quint  | in-out-quint          |\r\n     * |          | in-expo    | out-expo   | in-out-expo           |\r\n     * |          | in-circ    | out-circ   | in-out-circ           |\r\n     * |          | in-back    | out-back   | in-out-back           |\r\n     *\r\n     * You can create your own custom cubic-bezier easing curves. Similar to css you type `cubic-bezier(...)` with 4 numbers representing the shape of the bezier curve, for example, `cubic-bezier(0.47, 0, 0.745, 0.715)` this is the bezier curve for `in-sine`.\r\n     *\r\n     * *Note: the `easing` property supports the original values and functions for easing as well, for example, `steps(1)`, and etc... are supported.*\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * // cubic-bezier easing\r\n     * animate({\r\n     *     target: \".div\",\r\n     *     easing: \"cubic-bezier(0.47, 0, 0.745, 0.715)\",\r\n     *\r\n     *     // or\r\n     *     easing: \"in-sine\",\r\n     *     transform: [\"translate(0px)\", \"translate(500px)\"],\r\n     * });\r\n     * ```\r\n     */\r\n    easing?: keyof typeof EASINGS | TypeCallback | string | string[],\r\n\r\n    /**\r\n     * Determines the duration of your animation in milliseconds. By passing it a callback, you can define a different duration for each element. The callback takes the index of each element, the target dom element, and the total number of target elements as its argument and returns a number.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * // First element fades out in 1s, second element in 2s, etc.\r\n     * animate({\r\n     *      target: \".div\",\r\n     *      easing: \"linear\",\r\n     *      duration: 1000,\r\n     *      // or\r\n     *      duration: (index) => (index + 1) * 1000,\r\n     *      opacity: [1, 0],\r\n     * });\r\n     * ```\r\n     */\r\n    duration?: number | string | TypeCallback,\r\n\r\n    /**\r\n     * Determines the delay of your animation in milliseconds. By passing it a callback, you can define a different delay for each element. The callback takes the index of each element, the target dom element, and the total number of target elements as its argument and returns a number.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * // First element starts fading out after 1s, second element after 2s, etc.\r\n     * animate({\r\n     *     target: \".div\",\r\n     *     easing: \"linear\",\r\n     *     delay: 5,\r\n     *     // or\r\n     *     delay: (index) => (index + 1) * 1000,\r\n     *     opacity: [1, 0],\r\n     * });\r\n     * ```\r\n     */\r\n    delay?: number | TypeCallback,\r\n\r\n    /**\r\n     * Adds an offset ammount to the `delay`, for creating a timeline similar to `animejs`\r\n     */\r\n    timelineOffset?: number | TypeCallback,\r\n\r\n    /**\r\n     * Similar to delay but it indicates the number of milliseconds to delay **after** the full animation has played **not before**.\r\n     *\r\n     * _**Note**: `endDelay` will delay the `onfinish` method and event, but will not reserve the current state of the CSS animation, if you need to use endDelay you may need to use the `fillMode` property to reserve the changes to the animation target._\r\n\r\n     * @example\r\n     * ```ts\r\n     * // First element fades out but then after 1s finishes, the second element after 2s, etc.\r\n     * animate({\r\n     *     target: \".div\",\r\n     *     easing: \"linear\",\r\n     *     endDelay: 1000,\r\n     *     // or\r\n     *     endDelay: (index) => (index + 1) * 1000,\r\n     *     opacity: [1, 0],\r\n     * });\r\n     * ```\r\n     */\r\n    endDelay?: number | TypeCallback,\r\n\r\n    /**\r\n     *\r\n     * This ensures all `animations` match up to the total duration, and don't finish too early, if animations finish too early when the `.play()` method is called specific animations  that are finished will restart while the rest of the animations will continue playing.\r\n     *\r\n     * _**Note**: you cannot use the `padEndDelay` option and set a value for `endDelay`, the `endDelay` value will replace the padded endDelay_\r\n     */\r\n    padEndDelay?: Boolean,\r\n\r\n    /**\r\n     * Determines if the animation should repeat, and how many times it should repeat.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * // Loop forever\r\n     * animate({\r\n     *     target: \".div\",\r\n     *     easing: \"linear\",\r\n     *     loop: true, // If you want it to continously loop\r\n     *     // or\r\n     *     // loop: 5, // If you want the animation to loop 5 times\r\n     *     opacity: [1, 0],\r\n     * });\r\n     * ```\r\n     */\r\n    loop?: number | boolean | TypeCallback,\r\n\r\n    /**\r\n     * Occurs when the animation for one of the targets completes, meaning when animating many targets that finish at different times this will run multiple times. The arguments it takes is slightly different from the rest of the animation options.\r\n     *\r\n     * The animation argument represents the animation for the current target.\r\n     *\r\n     * @param element - the current target element\r\n     * @param index - the index of the current target element in `Animate.prototype.targets`\r\n     * @param total -  the total number of target elements\r\n     * @param animation - the animation of the current target element\r\n     *\r\n     * **Warning**: the order of the callback's arguments are in a different order, with the target element first, and the index second.\r\n     */\r\n    onfinish?: (element?: HTMLElement, index?: number, total?: number, animation?: Animation) => void,\r\n\r\n    /**\r\n     * Occurs when the animation for one of the targets is cancelled, meaning when animating many targets that are cancelled at different times this will run multiple times. The arguments it takes is slightly different from the rest of the animation options.\r\n     *\r\n     * The animation argument represents the animation for the current target.\r\n     *\r\n     * @param element - the current target element\r\n     * @param index - the index of the current target element in `Animate.prototype.targets`\r\n     * @param total - the total number of target elements\r\n     * @param animation - the animation of the current target element\r\n     *\r\n     *\r\n     * **Warning**: the order of the callback's arguments are in a different order, with the target element first, and the index second.\r\n     */\r\n    oncancel?: (element?: HTMLElement, index?: number, total?: number, animation?: Animation) => void,\r\n\r\n    /**\r\n     *\r\n     * Determines if the animation should automatically play immediately after being instantiated.\r\n     */\r\n    autoplay?: boolean,\r\n\r\n    /**\r\n     * Determines the direction of the animation;\r\n     * - `reverse` runs the animation backwards,\r\n     * - `alternate` switches direction after each iteration if the animation loops.\r\n     * - `alternate-reverse` starts the animation at what would be the end of the animation if the direction were\r\n     * - `normal` but then when the animation reaches the beginning of the animation it alternates going back to the position it started at.\r\n     */\r\n    direction?: PlaybackDirection,\r\n\r\n    /**\r\n     * Determines the animation playback rate. Useful in the authoring process to speed up some parts of a long sequence (value above 1) or slow down a specific animation to observe it (value between 0 to 1).\r\n     *\r\n     * _**Note**: negative numbers reverse the animation._\r\n     */\r\n    speed?: number | TypeCallback,\r\n\r\n    /**\r\n     * Defines how an element should look after the animation.\r\n     *\r\n     * @remark\r\n     * fillMode of:\r\n     * - `none` means the animation's effects are only visible while the animation is playing.\r\n     * - `forwards` the affected element will continue to be rendered in the state of the final animation frame.\r\n     * - `backwards` the animation's effects should be reflected by the element(s) state prior to playing.\r\n     * - `both` combining the effects of both forwards and backwards; The animation's effects should be reflected by the element(s) state prior to playing and retained after the animation has completed playing.\r\n     * - `auto` if the animation effect fill mode is being applied to is a keyframe effect. \"auto\" is equivalent to \"none\". Otherwise, the result is \"both\".\r\n     *\r\n     * You can learn more here on [MDN](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/fill).\r\n\r\n     * _Be careful when using fillMode, it has some problems when it comes to concurrency of animations read more on [MDN](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/fill), if browser support were better I would remove fillMode and use Animation.commitStyles, I'll have to change the way `fillMode` functions later. Use the onfinish method to commit styles [onfinish](#onfinish)._\r\n     */\r\n    fillMode?: FillMode,\r\n\r\n    /**\r\n     * Another way to input options for an animation, it's also used to chain animations.\r\n     *\r\n     * @remarks\r\n     * The `options` animation option is another way to declare options, it can take an instance of `Animate`, a single `Animate` instance in an Array, e.g. `[Animate]` or an object containing animation options.\r\n     *\r\n     *\r\n     * `options` extends the animation properties of an animation, but more importance is given to the actual animation options object, so, the properties from `options` will be ignored if there is already an animation option with the same name declared.\r\n     *\r\n     *\r\n     * _**Note**: you can't use this property as a method._\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * (async () => {\r\n     *     // animate is Promise-like, as in it has a then() method like a Promise but it isn't a Promise.\r\n     *     // animate resolves to an Array that contains the Animate instance, e.g. [Animate]\r\n     *     let [options] = await animate({\r\n     *         target: \".div\",\r\n     *         opacity: [0, 1],\r\n     *     });\r\n     *\r\n     *     animate({\r\n     *         options,\r\n     *\r\n     *         // opacity overrides the opacity property from `options`\r\n     *         opacity: [1, 0],\r\n     *     });\r\n     *\r\n     *     console.log(options); //= Animate\r\n     * })();\r\n     *\r\n     * // or\r\n     * (async () => {\r\n     *     let options = await animate({\r\n     *         target: \".div\",\r\n     *         opacity: [0, 1],\r\n     *         duration: 2000,\r\n     *\r\n     *     });\r\n     *\r\n     *     // Remeber, the `options` animation option can handle Arrays with an Animate instance, e.g. [Animate]\r\n     *     // Also, remeber that Animate resolves to an Arrays with an Animate instance, e.g. [Animate]\r\n     *     // Note: the `options` animation option can only handle one Animate instance in an Array and that is alway the first element in the Array\r\n     *     animate({\r\n     *         options,\r\n     *         opacity: [1, 0],\r\n     *     });\r\n     *\r\n     *     console.log(options); //= [Animate]\r\n     * })();\r\n     *\r\n     * // or\r\n     * (async () => {\r\n     *     let options = {\r\n     *         target: \".div\",\r\n     *         opacity: [0, 1],\r\n     *     };\r\n     *\r\n     *     await animate(options);\r\n     *     animate({\r\n     *         options,\r\n     *         opacity: [1, 0],\r\n     *     });\r\n     *\r\n     *     console.log(options); //= { ... }\r\n     * })();\r\n     * ```\r\n     */\r\n    options?: IAnimationOptions,\r\n\r\n    /**\r\n     * Contols the starting point of certain parts of an animation\r\n     *\r\n     * @remark\r\n     * The offset of the keyframe specified as a number between `0.0` and `1.0` inclusive or null. This is equivalent to specifying start and end states in percentages in CSS stylesheets using @keyframes. If this value is null or missing, the keyframe will be evenly spaced between adjacent keyframes.\r\n     *\r\n     * Read more on [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Keyframe_Formats)\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * animate({\r\n     *      duration: 2000,\r\n     *      opacity: [ 0, 0.9, 1 ],\r\n     *      easing: [ 'ease-in', 'ease-out' ],\r\n     *\r\n     *      offset: [ \"from\", 0.8 ], // Shorthand for [ 0, 0.8, 1 ]\r\n     *      // or\r\n     *      offset: [ 0, \"80%\", \"to\" ], // Shorthand for [ 0, 0.8, 1 ]\r\n     *      // or\r\n     *      offset: [ \"0\", \"0.8\", \"to\" ], // Shorthand for [ 0, 0.8, 1 ]\r\n     * });\r\n     * ```\r\n     */\r\n    offset?: (number | string)[] | TypeCallback,\r\n\r\n    /**\r\n     * Represents the timeline of animation. It exists to pass timeline features to Animations (default is [DocumentTimeline](https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline)).\r\n     *\r\n     * As of right now it doesn't contain any features but in the future when other timelines like the [ScrollTimeline](https://drafts.csswg.org/scroll-animations-1/#scrolltimeline), read the Google Developer article for [examples and demos of ScrollTimeLine](https://developers.google.com/web/updates/2018/10/animation-worklet#hooking_into_the_space-time_continuum_scrolltimeline)\r\n     */\r\n    timeline?: AnimationTimeline,\r\n\r\n    /**\r\n     * Allows you to manually set keyframes using a `keyframe` array\r\n     *\r\n     * Read more on [MDN](https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/setKeyframes)\r\n     *\r\n     * @remark\r\n     * An `array` of objects (keyframes) consisting of properties and values to iterate over. This is the canonical format returned by the [getKeyframes()](https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/getKeyframes) method.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * element.animate([\r\n     *   { // from\r\n     *     opacity: 0,\r\n     *     color: \"#fff\"\r\n     *   },\r\n     *   { // to\r\n     *     opacity: 1,\r\n     *     color: \"#000\"\r\n     *   }\r\n     * ], 2000);\r\n     * ```\r\n     *\r\n     * Offsets for each keyframe can be specified by providing an `offset` value.\r\n\r\n     * @example\r\n     * ```ts\r\n     * element.animate([ { opacity: 1 },\r\n     *                   { opacity: 0.1, offset: 0.7 },\r\n     *                   { opacity: 0 } ],\r\n     *                 2000);\r\n     * ```\r\n     *\r\n     * _**Note**: `offset` values, if provided, must be between 0.0 and 1.0 (inclusive) and arranged in ascending order._\r\n     *\r\n     * It is not necessary to specify an offset for every keyframe. Keyframes without a specified offset will be evenly spaced between adjacent keyframes.\r\n     *\r\n     * ---\r\n     *\r\n     * The easing to apply between keyframes can be specified by providing an easing `value` as illustrated below.\r\n     *\r\n     * _**Note**: the values for easing in keyframes are limited to \"ease\", \"ease-in\", \"ease-out\", \"ease-in-out\", \"linear\", \"steps(...)\", and \"cubic-bezier(...)\", to get access to the predefined {@link EASINGS | easings}, you will need to use the function {@link GetEase}._\r\n\r\n     * @example\r\n     * ```ts\r\n     * element.animate([ { opacity: 1, easing: 'ease-out' },\r\n     *                   { opacity: 0.1, easing: 'ease-in' },\r\n     *                   { opacity: 0 } ],\r\n     *                 2000);\r\n     * ```\r\n     *\r\n     * In this example, the specified easing only applies from the keyframe where it is specified until the next keyframe. Any easing value specified on the options argument, however, applies across a single iteration of the animation \u2014 for the entire duration.\r\n     *\r\n     *\r\n     * `@okikio/animate` also offers another format called `CSSLikeKeyframe`,\r\n     * it basically functions the same way CSS `@keyframe` functions\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * animate({\r\n     *      keyframes: {\r\n     *          \"from, 50%, to\": {\r\n     *              opacity: 1\r\n     *          },\r\n     *\r\n     *          \"25%, 0.7\": {\r\n     *              opacity: 0\r\n     *          }\r\n     *      }\r\n     * })\r\n     * // Results in a keyframe array like this\r\n     * //= [\r\n     * //=   { opacity: 1, offset: 0 },\r\n     * //=   { opacity: 0, offset: 0.25 },\r\n     * //=   { opacity: 1, offset: 0.5 },\r\n     * //=   { opacity: 0, offset: 0.7 },\r\n     * //=   { opacity: 1, offset: 1 }\r\n     * //= ]\r\n     * ```\r\n     */\r\n    keyframes?: TypeCSSLikeKeyframe | ICSSComputedTransformableProperties[] & Keyframe[] | object[] | TypeCallback,\r\n\r\n    /**\r\n     * The properties of the `extend` animation option are not interperted or computed, they are given directly to the `Web Animation API`, as way to access features that haven't been implemented in `@okikio/animate`, for example, `iterationStart`.\r\n     *\r\n     * `extend` is supposed to future proof the library if new features are added to the `Web Animation API` that you want to use, but that has not been implemented yet.\r\n     *\r\n     * _**Note**: it doesn't allow for declaring actual animation keyframes; it's just for animation timing options, and it overrides all other animation timing options that accomplish the same goal, e.g. `loop` & `iterations`, if `iterations` is a property of `extend` then `iterations` will override `loop`._\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * animate({\r\n     *     target: \".div\",\r\n     *     opacity: [0, 1],\r\n     *     loop: 5,\r\n     *     extend: {\r\n     *         iterationStart: 0.5,\r\n     *         // etc...\r\n     *         fill: \"both\", // This overrides fillMode\r\n     *         iteration: 2, // This overrides loop\r\n     *         composite: \"add\"\r\n     *     }\r\n     * });\r\n     * ```\r\n     */\r\n    extend?: KeyframeEffectOptions | TypeCallback,\r\n\r\n    /**\r\n     * Theses are the CSS properties to be animated as Keyframes\r\n     *\r\n     * Read more on [MDN](https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/setKeyframes)\r\n     *\r\n     * @remark\r\n     * An `object` containing key-value pairs consisting of the property to animate and an `array` of values to iterate over.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * element.animate({\r\n     *   opacity: [ 0, 1 ],          // [ from, to ]\r\n     *   color:   [ \"#fff\", \"#000\" ] // [ from, to ]\r\n     * }, 2000);\r\n     * ```\r\n     *\r\n     * Using this format, the number of elements in each array does not need to be equal. The provided values will be spaced out independently.\r\n\r\n     * @example\r\n     * ```ts\r\n     * element.animate({\r\n     *   opacity: [ 0, 1 ], // offset: 0, 1\r\n     *   backgroundColor: [ \"red\", \"yellow\", \"green\" ], // offset: 0, 0.5, 1\r\n     * }, 2000);\r\n     * ```\r\n     *\r\n     * The special keys `offset`, `easing`, and `composite` (described below) may be specified alongside the property values.\r\n\r\n     * @example\r\n     * ```ts\r\n     * element.animate({\r\n     *   opacity: [ 0, 0.9, 1 ],\r\n     *   offset: [ 0, 0.8 ], // Shorthand for [ 0, 0.8, 1 ]\r\n     *   easing: [ 'ease-in', 'ease-out' ],\r\n     * }, 2000);\r\n     * ```\r\n     *\r\n     * After generating a suitable set of keyframes from the property value lists, each supplied offset is applied to the corresponding keyframe. If there are insufficient values, or if the list contains `null` values, the keyframes without specified offsets will be evenly spaced as with the array format described above.\r\n     *\r\n     * If there are too few `easing` or `composite` values, the corresponding list will be repeated as needed.\r\n     *\r\n     * _**Note**: to use `composite` you will need to add it to the {@link AnimationOptions.extend | extend} object as an option_\r\n     */\r\n    [property: string]: TypeAnimationOptionTypes,\r\n};\r\n\r\n/**\r\n * CSS properties\r\n */\r\nexport interface ICSSProperties {\r\n    [key: string]: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty>\r\n};\r\n\r\n/**\r\n * After being computed as an animation option\r\n */\r\nexport interface ICSSComputedTransformableProperties extends ICSSProperties {\r\n    perspective?: TypeSingleValueCSSProperty,\r\n    rotate?: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty>,\r\n    rotate3d?: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty>,\r\n    rotateX?: TypeSingleValueCSSProperty,\r\n    rotateY?: TypeSingleValueCSSProperty,\r\n    rotateZ?: TypeSingleValueCSSProperty,\r\n    translate?: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty>,\r\n    translate3d?: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty>,\r\n    translateX?: TypeSingleValueCSSProperty,\r\n    translateY?: TypeSingleValueCSSProperty,\r\n    translateZ?: TypeSingleValueCSSProperty,\r\n    scale?: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty>,\r\n    scale3d?: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty>,\r\n    scaleX?: TypeSingleValueCSSProperty,\r\n    scaleY?: TypeSingleValueCSSProperty,\r\n    scaleZ?: TypeSingleValueCSSProperty,\r\n    skew?: TypeSingleValueCSSProperty | Array<TypeSingleValueCSSProperty>,\r\n    skewX?: TypeSingleValueCSSProperty,\r\n    skewY?: TypeSingleValueCSSProperty,\r\n}\r\n\r\n/**\r\n * The default options for every Animate instance\r\n *\r\n * ```ts\r\n * {\r\n *   keyframes: [],\r\n *\r\n *   loop: 1,\r\n *   delay: 0,\r\n *   speed: 1,\r\n *   endDelay: 0,\r\n *   easing: \"ease\",\r\n *   autoplay: true,\r\n *   duration: 1000,\r\n *   fillMode: \"none\",\r\n *   direction: \"normal\",\r\n *   padEndDelay: false,\r\n *   extend: {}\r\n * }\r\n * ```\r\n */\r\nexport const DefaultAnimationOptions: IAnimationOptions = {\r\n    keyframes: [],\r\n    offset: [],\r\n\r\n    loop: 1,\r\n    delay: 0,\r\n    speed: 1,\r\n    endDelay: 0,\r\n    easing: \"ease\",\r\n    timelineOffset: 0,\r\n    autoplay: true,\r\n    duration: 1000,\r\n    fillMode: \"none\",\r\n    direction: \"normal\",\r\n    padEndDelay: false,\r\n    extend: {}\r\n};\r\n\r\nexport type TypeAnimationEvents = \"update\" | \"play\" | \"pause\" | \"begin\" | \"cancel\" | \"finish\" | \"error\" | \"stop\" | \"playstate-change\";\r\nexport type TypePlayStates = \"idle\" | \"running\" | \"paused\" | \"finished\";\r\n\r\nexport const parseOptions = (options: IAnimationOptions): IAnimationOptions => {\r\n    let { options: animation, ...rest } = options;\r\n    let oldOptions = animation instanceof Animate ? animation.getOptions() : (Array.isArray(animation) ? animation?.[0]?.getOptions() : animation);\r\n    return Object.assign({}, oldOptions, rest);\r\n}\r\n\r\n/**\r\n * Returns a closure Function, which adds a unit to numbers but simply returns strings with no edits assuming the value has a unit if it's a string\r\n *\r\n * @param unit - the default unit to give the CSS Value\r\n * @returns\r\n * if value already has a unit (we assume the value has a unit if it's a string), we return it;\r\n * else return the value plus the default unit\r\n */\r\nexport const addCSSUnit = (unit: string = \"\") => {\r\n    return (value: string | number) => typeof value == \"string\" ? value : `${value}${unit}`;\r\n}\r\n\r\n/** Function doesn't add any units by default */\r\nexport const UnitLess = addCSSUnit();\r\n\r\n/** Function adds \"px\" unit to numbers */\r\nexport const UnitPX = addCSSUnit(\"px\");\r\n\r\n/** Function adds \"deg\" unit to numbers */\r\nexport const UnitDEG = addCSSUnit(\"deg\");\r\n\r\n/**\r\n * Convert the input to an array\r\n * For strings split them at commas\r\n * For array do nothing\r\n * For everything else wrap the input in an array\r\n */\r\nexport const toArr = (input: any): any[] => {\r\n    if (Array.isArray(input) || typeof input == \"string\") {\r\n        if (typeof input == \"string\") input = input.split(\",\");\r\n        return input;\r\n    }\r\n\r\n    return [input];\r\n}\r\n\r\n/**\r\n * Checks if value is valid/truthy; it counts empty arrays and strings as falsey,\r\n * as well as null and undefined everything else is valid\r\n *\r\n * _**Note:** 0 counts as valid_\r\n *\r\n * @param value - anything\r\n * @returns true or false\r\n */\r\nexport const isValid = (value: any) => {\r\n    if (Array.isArray(value) || typeof value == \"string\")\r\n        return Boolean(value.length);\r\n    return value != null && value != undefined;\r\n}\r\n\r\n/**\r\n * Returns a closure function, which adds units to numbers, strings or arrays of both\r\n *\r\n * @param unit - a unit function to use to add units to {@link TypeSingleValueCSSProperty | TypeSingleValueCSSProperty's }\r\n * @returns\r\n * if input is a string split it into an array at the comma's, and add units\r\n * else if the input is a number add the default units\r\n * otherwise if the input is an array of both add units according to {@link addCSSUnit}\r\n */\r\nexport const CSSValue = (unit: typeof UnitLess) => {\r\n    return (input: TypeSingleValueCSSProperty) => {\r\n        return isValid(input) ? toArr(input).map(val => {\r\n            if (typeof val != \"number\" && typeof val != \"string\")\r\n                return val;\r\n\r\n            // Basically if you can convert it to a number try to,\r\n            // otherwise just return whatever you can\r\n            let num = Number(val);\r\n            let value = Number.isNaN(num) ? (typeof val == \"string\" ? val.trim() : val) : num;\r\n            return unit(value); // Add the default units\r\n        }) : [];\r\n    };\r\n}\r\n\r\n/**\r\n * Flips the rows and columns of 2-dimensional arrays\r\n *\r\n * Read more on [underscorejs.org](https://underscorejs.org/#zip) & [lodash.com](https://lodash.com/docs/4.17.15#zip)\r\n *\r\n * @example\r\n * ```ts\r\n * transpose(\r\n *      ['moe', 'larry', 'curly'],\r\n *      [30, 40, 50],\r\n *      [true, false, false]\r\n * );\r\n * // [\r\n * //     [\"moe\", 30, true],\r\n * //     [\"larry\", 40, false],\r\n * //     [\"curly\", 50, false]\r\n * // ]\r\n * ```\r\n * @param [...args] - the arrays to process as a set of arguments\r\n * @returns\r\n * returns the new array of grouped elements\r\n */\r\nexport const transpose = (...args: TypeSingleValueCSSProperty[] | TypeSingleValueCSSProperty[][]) => {\r\n    let largestArrLen = 0;\r\n    args = args.map(arr => {\r\n        // Convert all values in arrays to an array\r\n        // This ensures that `arrays` is an array of arrays\r\n        let result = toArr(arr);\r\n\r\n        // Finds the largest array\r\n        let len = result.length;\r\n        if (len > largestArrLen) largestArrLen = len;\r\n        return result;\r\n    });\r\n\r\n    // Flip the rows and columns of arrays\r\n    let result = [];\r\n    let len = args.length;\r\n    for (let col = 0; col < largestArrLen; col++) {\r\n        result[col] = [];\r\n\r\n        for (let row = 0; row < len; row++) {\r\n            let val = args[row][col];\r\n            if (isValid(val))\r\n                result[col][row] = val;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Takes `TypeSingleValueCSSProperty` or an array of `TypeSingleValueCSSProperty` and adds units approriately\r\n *\r\n * @param arr - array of numbers, strings and/or an array of array of both e.g. ```[[25, \"50px\", \"60%\"], \"25, 35, 60%\", 50]```\r\n * @param unit - a unit function to use to add units to {@link TypeSingleValueCSSProperty | TypeSingleValueCSSProperty's }\r\n * @returns\r\n * an array of an array of strings with units\r\n * e.g.\r\n * ```ts\r\n * [\r\n *      [ '25px', '35px', ' 60%' ],\r\n *      [ '50px', '60px', '70px' ]\r\n * ]\r\n * ```\r\n */\r\nexport const CSSArrValue = (arr: TypeSingleValueCSSProperty | TypeSingleValueCSSProperty[], unit: typeof UnitLess) => {\r\n    // This is for the full varients of the transform function as well as the 3d varients\r\n    // zipping the `CSSValue` means if a user enters a string, it will treat each value (seperated by a comma) in that\r\n    // string as a seperate transition state\r\n    return toArr(arr).map(CSSValue(unit)) as TypeSingleValueCSSProperty[];\r\n}\r\n\r\nexport const TransformFunctionNames = [\r\n    \"translate\",\r\n    \"translate3d\",\r\n    \"translateX\",\r\n    \"translateY\",\r\n    \"translateZ\",\r\n    \"rotate\",\r\n    \"rotate3d\",\r\n    \"rotateX\",\r\n    \"rotateY\",\r\n    \"rotateZ\",\r\n    \"scale\",\r\n    \"scale3d\",\r\n    \"scaleX\",\r\n    \"scaleY\",\r\n    \"scaleZ\",\r\n    \"skew\",\r\n    \"skewX\",\r\n    \"skewY\",\r\n    \"perspective\"\r\n];\r\n\r\n/**\r\n * Creates the transform property text\r\n */\r\nexport const createTransformProperty = (arr) => {\r\n    let result = \"\";\r\n    let len = TransformFunctionNames.length;\r\n    for (let i = 0; i < len; i++) {\r\n        let name = TransformFunctionNames[i];\r\n        let value = arr[i];\r\n        if (isValid(value))\r\n            result += `${name}(${Array.isArray(value) ? value.join(\", \") : value}) `;\r\n    }\r\n\r\n    return result.trim();\r\n}\r\n\r\n/** Parses CSSValues without adding any units */\r\nexport const UnitLessCSSValue = CSSValue(UnitLess);\r\n\r\n/** Parses CSSValues and adds the \"px\" unit if required */\r\nexport const UnitPXCSSValue = CSSValue(UnitPX);\r\n\r\n/** Parses CSSValues and adds the \"deg\" unit if required */\r\nexport const UnitDEGCSSValue = CSSValue(UnitDEG);\r\n\r\n/**\r\n * Wrap non array CSS property values in an array\r\n */\r\nexport const CSSPropertiesToArr = (properties: ICSSProperties) => {\r\n    for (let [key, value] of Object.entries(properties)) {\r\n        // Wrap non array values in arrays\r\n        properties[key] = [].concat(value).map(value => `` + value);\r\n    }\r\n\r\n    return properties;\r\n};\r\n\r\n/**\r\n * Removes the need for the full transform statement in order to use translate, rotate, scale, skew, or perspective including their X, Y, Z, and 3d varients\r\n * Also, adds the ability to use single string or number values for transform functions\r\n *\r\n * _**Note**: the `transform` animation option will override all transform function properties_\r\n *\r\n * @param properties - the CSS properties to transform\r\n *\r\n * @example\r\n * ```ts\r\n * ParseTransformableCSSProperties({\r\n *      // It will automatically add the \"px\" units for you, or you can write a string with the units you want\r\n *      translate3d: [\r\n *          \"25, 35, 60%\",\r\n *          [50, \"60px\", 70],\r\n *          [\"70\", 50]\r\n *      ],\r\n *      translate: \"25, 35, 60%\",\r\n *      translateX: [50, \"60px\", \"70\"],\r\n *      translateY: [\"50, 60\", \"60\"], // Note: this will actually result in an error, make sure to pay attention to where you are putting strings and commas\r\n *      translateZ: 0,\r\n *      perspective: 0,\r\n *      opacity: \"0, 5\",\r\n *      scale: [\r\n *          [1, \"2\"],\r\n *          [\"2\", 1]\r\n *      ],\r\n *      rotate3d: [\r\n *          [1, 2, 5, \"3deg\"], // The last value in the array must be a string with units for rotate3d\r\n *          [2, \"4\", 6, \"45turn\"],\r\n *          [\"2\", \"4\", \"6\", \"-1rad\"]\r\n *      ]\r\n * })\r\n *\r\n * //= {\r\n * //=   transform: [\r\n * //=       // `translateY(50, 60)` will actually result in an error\r\n * //=       'translate(25px) translate3d(25px, 35px, 60%) translateX(50px) translateY(50, 60) translateZ(0px) rotate3d(1, 2, 5, 3deg) scale(1, 2) perspective(0px)',\r\n * //=       'translate(35px) translate3d(50px, 60px, 70px) translateX(60px) translateY(60px) rotate3d(2, 4, 6, 45turn) scale(2, 1)',\r\n * //=       'translate(60%) translate3d(70px, 50px) translateX(70px) rotate3d(2, 4, 6, -1rad)'\r\n * //=   ],\r\n * //=   opacity: [ '0', '5' ]\r\n * //= }\r\n * ```\r\n *\r\n * @returns\r\n * an object with a properly formatted `transform` and `opactity`, as well as other unformatted CSS properties\r\n * ```\r\n */\r\nexport const ParseTransformableCSSProperties = (properties: ICSSComputedTransformableProperties) => {\r\n    let {\r\n        perspective,\r\n        rotate,\r\n        rotate3d,\r\n        rotateX,\r\n        rotateY,\r\n        rotateZ,\r\n        translate,\r\n        translate3d,\r\n        translateX,\r\n        translateY,\r\n        translateZ,\r\n        scale,\r\n        scale3d,\r\n        scaleX,\r\n        scaleY,\r\n        scaleZ,\r\n        skew,\r\n        skewX,\r\n        skewY,\r\n        ...rest\r\n    } = properties;\r\n\r\n    translate = CSSArrValue(translate, UnitPX);\r\n    translate3d = CSSArrValue(translate3d, UnitPX);\r\n    translateX = UnitPXCSSValue(translateX);\r\n    translateY = UnitPXCSSValue(translateY);\r\n    translateZ = UnitPXCSSValue(translateZ);\r\n\r\n    rotate = CSSArrValue(rotate, UnitDEG);\r\n    rotate3d = CSSArrValue(rotate3d, UnitLess);\r\n    rotateX = UnitDEGCSSValue(rotateX);\r\n    rotateY = UnitDEGCSSValue(rotateY);\r\n    rotateZ = UnitDEGCSSValue(rotateZ);\r\n\r\n    scale = CSSArrValue(scale, UnitLess);\r\n    scale3d = CSSArrValue(scale3d, UnitLess);\r\n    scaleX = UnitLessCSSValue(scaleX);\r\n    scaleY = UnitLessCSSValue(scaleY);\r\n    scaleZ = UnitLessCSSValue(scaleZ);\r\n\r\n    skew = CSSArrValue(skew, UnitDEG);\r\n    skewX = UnitDEGCSSValue(skewX);\r\n    skewY = UnitDEGCSSValue(skewY);\r\n\r\n    perspective = UnitPXCSSValue(perspective);\r\n\r\n    let transform = transpose(\r\n        translate, translate3d, translateX, translateY, translateZ,\r\n        rotate, rotate3d, rotateX, rotateY, rotateZ,\r\n        scale, scale3d, scaleX, scaleY, scaleZ,\r\n        skew, skewX, skewY,\r\n        perspective\r\n    ).map(createTransformProperty);\r\n\r\n    rest = CSSPropertiesToArr(rest);\r\n    return Object.assign({},\r\n        isValid(transform) ? { transform } : null,\r\n        rest);\r\n}\r\n\r\n/**\r\n * Similar to {@link ParseTransformableCSSProperties} except it transforms the CSS properties in each Keyframe\r\n * @param keyframes - an array of keyframes with transformable CSS properties\r\n * @returns\r\n * an array of keyframes, with transformed CSS properties\r\n */\r\nexport const ParseTransformableCSSKeyframes = (keyframes: ICSSComputedTransformableProperties[]) => {\r\n    return keyframes.map(properties => {\r\n        let {\r\n            translate,\r\n            translate3d,\r\n            translateX,\r\n            translateY,\r\n            translateZ,\r\n            rotate,\r\n            rotate3d,\r\n            rotateX,\r\n            rotateY,\r\n            rotateZ,\r\n            scale,\r\n            scale3d,\r\n            scaleX,\r\n            scaleY,\r\n            scaleZ,\r\n            skew,\r\n            skewX,\r\n            skewY,\r\n            perspective,\r\n            ...rest\r\n        } = properties;\r\n\r\n        translate = UnitPXCSSValue(translate as TypeSingleValueCSSProperty);\r\n        translate3d = UnitPXCSSValue(translate3d as TypeSingleValueCSSProperty);\r\n        translateX = UnitPXCSSValue(translateX)[0];\r\n        translateY = UnitPXCSSValue(translateY)[0];\r\n        translateZ = UnitPXCSSValue(translateZ)[0];\r\n\r\n        rotate = UnitDEGCSSValue(rotate as TypeSingleValueCSSProperty);\r\n        rotate3d = UnitLessCSSValue(rotate3d as TypeSingleValueCSSProperty);\r\n        rotateX = UnitDEGCSSValue(rotateX)[0];\r\n        rotateY = UnitDEGCSSValue(rotateY)[0];\r\n        rotateZ = UnitDEGCSSValue(rotateZ)[0];\r\n\r\n        scale = UnitLessCSSValue(scale as TypeSingleValueCSSProperty);\r\n        scale3d = UnitLessCSSValue(scale3d as TypeSingleValueCSSProperty);\r\n        scaleX = UnitLessCSSValue(scaleX)[0];\r\n        scaleY = UnitLessCSSValue(scaleY)[0];\r\n        scaleZ = UnitLessCSSValue(scaleZ)[0];\r\n\r\n        skew = UnitDEGCSSValue(skew as TypeSingleValueCSSProperty);\r\n        skewX = UnitDEGCSSValue(skewX)[0];\r\n        skewY = UnitDEGCSSValue(skewY)[0];\r\n\r\n        perspective = UnitPXCSSValue(perspective)[0];\r\n\r\n        return [\r\n            rest,\r\n            translate, translate3d, translateX, translateY, translateZ,\r\n            rotate, rotate3d, rotateX, rotateY, rotateZ,\r\n            scale, scale3d, scaleX, scaleY, scaleZ,\r\n            skew, skewX, skewY,\r\n            perspective\r\n        ];\r\n    }).map(([rest, ...transformFunctions]) => {\r\n        let transform = createTransformProperty(transformFunctions);\r\n        rest = CSSPropertiesToArr(rest as ICSSProperties);\r\n        return Object.assign({},\r\n            isValid(transform) ? { transform } : null,\r\n            rest);\r\n    });\r\n}\r\n\r\n/**\r\n * An animation library for the modern web, which. Inspired by animate plus, and animejs, [@okikio/animate](https://www.skypack.dev/view/@okikio/animate) is a Javascript animation library focused on performance and ease of use.\r\n *\r\n * You can check it out here: <https://codepen.io/okikio/pen/qBbdGaW?editors=0011>\r\n */\r\nexport class Animate {\r\n    /**\r\n     * Stores the options for the current animation\r\n     *\r\n     * @inheritDoc DefaultAnimationOptions\r\n     */\r\n    public options: IAnimationOptions = {};\r\n\r\n    /**\r\n     * The list of Elements to Animate\r\n     */\r\n    public targets: Manager<number, Node> = new Manager();\r\n\r\n    /**\r\n     * The properties to animate\r\n     */\r\n    public properties: object = {};\r\n\r\n    /**\r\n     * A Manager of Animations\r\n     */\r\n    public animations: Manager<HTMLElement, Animation> = new Manager();\r\n\r\n    /**\r\n     * A Manager of KeyFrameEffects\r\n     */\r\n    public keyframeEffects: Manager<Animation, KeyframeEffect> = new Manager();\r\n\r\n    /**\r\n     * The total duration of all Animation's\r\n     */\r\n    public totalDuration: number = 0;\r\n\r\n    /**\r\n     * The smallest delay out of all Animation's\r\n     */\r\n    public minDelay: number = 0;\r\n\r\n    /**\r\n     * The largest speed out of all Animation's\r\n     */\r\n    public maxSpeed: number = 0;\r\n\r\n    /**\r\n     * The options for individual animations\r\n     *\r\n     * A Manager that stores all the fully calculated options for individual Animation instances.\r\n     *\r\n     * _**Note**: the computedOptions are changed to their proper Animation instance options, so, some of the names are different, and options that can't be computed are not present. E.g. fillMode in the animation options is now just fill in the computedOptions.*_\r\n     *\r\n     * _**Note**: keyframes are not included, both the array form and the object form; the options, speed, extend, padEndDelay, and autoplay animation options are not included_\r\n     */\r\n    public computedOptions: Manager<Animation, TypeComputedOptions> = new Manager();\r\n\r\n    /**\r\n     * The keyframes for individual animations\r\n     *\r\n     * A Manager that stores all the fully calculated keyframes for individual Animation instances.\r\n     *\r\n     * _**Note**: the computedKeyframes are changed to their proper Animation instance options, so, some of the names are different, and options that can't be computed are not present. E.g. translateX, skew, etc..., they've all been turned into the transform property.*_\r\n     */\r\n    public computedKeyframes: Manager<Animation, TypeKeyFrameOptionsType> = new Manager();\r\n\r\n    /**\r\n     * The Element the mainAnimation runs on\r\n     */\r\n    public mainElement: HTMLElement;\r\n\r\n    /**\r\n     * Stores an animation that runs on the total duration of all the `Animation` instances, and as such it's the main Animation.\r\n     */\r\n    public mainAnimation: Animation;\r\n\r\n    /**\r\n     * The Keyframe Effect for the mainAnimation\r\n     */\r\n    public mainkeyframeEffect: KeyframeEffect;\r\n\r\n    /**\r\n     * Stores request frame calls\r\n     */\r\n    public animationFrame: number;\r\n\r\n    /**\r\n     * An event emitter\r\n     */\r\n    public emitter: EventEmitter = new EventEmitter();\r\n\r\n    /**\r\n     * Returns a promise that is fulfilled when the mainAnimation is finished\r\n     */\r\n    public promise: Promise<Animate[]>;\r\n    constructor(options: IAnimationOptions) {\r\n        this.loop = this.loop.bind(this);\r\n        this.onVisibilityChange = this.onVisibilityChange.bind(this);\r\n        this.updateOptions(options);\r\n\r\n        this.visibilityPlayState = this.getPlayState();\r\n        if (Animate.pauseOnPageHidden) {\r\n            document.addEventListener('visibilitychange', this.onVisibilityChange);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tells all animate instances to pause when the page is hidden\r\n     *\r\n     * @static\r\n     * @type {Boolean}\r\n     * @memberof Animate\r\n     */\r\n    static pauseOnPageHidden: Boolean = true;\r\n\r\n    /**\r\n     * Store the last remebered playstate before page was hidden\r\n     *\r\n     * @protected\r\n     * @type {TypePlayStates}\r\n     * @memberof Animate\r\n     */\r\n     protected visibilityPlayState: TypePlayStates;\r\n\r\n    /**\r\n     * document `visibilitychange` event handler\r\n     */\r\n    protected onVisibilityChange() {\r\n        if (document.hidden) {\r\n            this.visibilityPlayState = this.getPlayState();\r\n            if (this.is(\"running\")) {\r\n                this.loop();\r\n                this.pause();\r\n            }\r\n        } else {\r\n            if (this.visibilityPlayState == \"running\" && this.is(\"paused\"))\r\n                this.play();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a new Promise that is resolved when the animation finishes\r\n     */\r\n    public newPromise(): Promise<Animate[]> {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            /*\r\n                Note that the `this` keyword is in an Array when it is resolved,\r\n                this is due to Promises not wanting to resolve references,\r\n                so, you can't resolve `this` directly, so, I chose to resolve `this` in an\r\n                Array\r\n\r\n                Note: the `resolve` method by default will only run once so to avoid\r\n            */\r\n            this?.emitter?.once?.(\"finish\", () => resolve([this]));\r\n            this?.emitter?.once?.(\"error\", err => reject(err));\r\n        });\r\n\r\n        return this.promise;\r\n    }\r\n\r\n    /**\r\n     * Fulfills the `this.promise` Promise\r\n     */\r\n    public then(\r\n        onFulfilled?: (value?: any) => any,\r\n        onRejected?: (reason?: any) => any\r\n    ): Animate {\r\n        onFulfilled = onFulfilled?.bind(this);\r\n        onRejected = onRejected?.bind(this);\r\n        this?.promise?.then?.(onFulfilled, onRejected);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Catches error that occur in the `this.promise` Promise\r\n     */\r\n    public catch(onRejected: (reason?: any) => any): Animate {\r\n        onRejected = onRejected?.bind(this);\r\n        this.promise?.catch?.(onRejected);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * If you don't care if the `this.promise` Promise has either been rejected or resolved\r\n     */\r\n    public finally(onFinally: () => any): Animate {\r\n        onFinally = onFinally?.bind(this);\r\n        this.promise?.finally?.(onFinally);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Represents an Animation Frame Loop\r\n     */\r\n    public loop(): void {\r\n        this.stopLoop();\r\n        this.animationFrame = window.requestAnimationFrame(this.loop);\r\n        this.emit(\"update\", this.getProgress(), this);\r\n    }\r\n\r\n    /**\r\n     * Cancels animation frame\r\n     */\r\n    public stopLoop() {\r\n        window.cancelAnimationFrame(this.animationFrame);\r\n    }\r\n\r\n    /**\r\n     * Calls a method that affects all animations **excluding** the mainAnimation; the method only allows the animation parameter\r\n    */\r\n    public allAnimations(method: (animation?: Animation, target?: HTMLElement) => void) {\r\n        this.animations.forEach(method);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calls a method that affects all animations **including** the mainAnimation; the method only allows the animation parameter\r\n    */\r\n    public all(method: (animation?: Animation, target?: HTMLElement) => void) {\r\n        this.mainAnimation && method(this.mainAnimation, this.mainElement);\r\n        this.allAnimations(method);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Register the begin event\r\n     */\r\n    protected beginEvent() {\r\n        if (this.getProgress() == 0)\r\n            this.emit(\"begin\", this);\r\n    }\r\n\r\n    /**\r\n     * Play Animation\r\n     */\r\n    public play(): Animate {\r\n        let playstate = this.getPlayState();\r\n        this.beginEvent();\r\n        this.all(anim => anim.play());\r\n        this.emit(\"play\", playstate, this);\r\n        if (!this.is(playstate))\r\n            this.emit(\"playstate-change\", playstate, this);\r\n        this.loop();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Pause Animation\r\n     */\r\n    public pause(): Animate {\r\n        let playstate = this.getPlayState();\r\n        this.all(anim => anim.pause());\r\n        this.emit(\"pause\", playstate, this);\r\n        if (!this.is(playstate))\r\n            this.emit(\"playstate-change\", playstate, this);\r\n        this.stopLoop();\r\n        this.animationFrame = undefined;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reverse Animation\r\n     */\r\n    public reverse() {\r\n        this.all(anim => anim.reverse());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reset all Animations\r\n     */\r\n    public reset() {\r\n        this.setProgress(0);\r\n\r\n        if (this.options.autoplay) this.play();\r\n        else this.pause();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Cancels all Animations\r\n     */\r\n    public cancel() {\r\n        this.all(anim => anim.cancel());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Force complete all Animations\r\n     */\r\n    public finish() {\r\n        this.all(anim => anim.finish());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Cancels & Clears all Animations\r\n     */\r\n    public stop() {\r\n        this.cancel();\r\n\r\n        if (Animate.pauseOnPageHidden) {\r\n            document.removeEventListener('visibilitychange', this.onVisibilityChange);\r\n        }\r\n\r\n        this.computedOptions.clear();\r\n        this.animations.clear();\r\n        this.keyframeEffects.clear();\r\n        this.targets.clear();\r\n\r\n        this.mainkeyframeEffect = undefined;\r\n        this.mainAnimation = undefined;\r\n        this.mainElement = undefined;\r\n\r\n        this.emit(\"stop\");\r\n        this.emitter.clear();\r\n\r\n        this.promise = undefined;\r\n        this.computedOptions = undefined;\r\n        this.animations = undefined;\r\n        this.keyframeEffects = undefined;\r\n        this.emitter = undefined;\r\n        this.targets = undefined;\r\n        this.options = undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns an Manager instance for targets\r\n     */\r\n    public getTargets() {\r\n        return this.targets.values();\r\n    }\r\n\r\n    /**\r\n     * Get a specific Animation from an Animate instance\r\n     */\r\n    public getAnimation(element: HTMLElement): Animation {\r\n        return this.animations.get(element);\r\n    }\r\n\r\n    /**\r\n     * Get a specific Animation's KeyframeEffect from an Animate instance\r\n     */\r\n    public getKeyframeEffect(animation: Animation): KeyframeEffect {\r\n        return this.keyframeEffects.get(animation);\r\n    }\r\n\r\n    /**\r\n     * Returns the timings of an Animation, given a target\r\n     * E.g. { duration, endDelay, delay, iterations, iterationStart, direction, easing, fill, etc... }\r\n     */\r\n    public getTiming(target: HTMLElement | Animation): TypeComputedAnimationOptions {\r\n        let animation = target instanceof Animation ? target : this.getAnimation(target);\r\n        let keyframeOptions = this.computedOptions.get(animation) ?? {};\r\n        let timings = this.getKeyframeEffect(animation).getTiming?.() ?? {};\r\n        let options = this.getOptions();\r\n\r\n        return { ...DefaultAnimationOptions, ...options, ...timings, ...keyframeOptions };\r\n    }\r\n\r\n    /**\r\n     * Returns the total duration of Animation\r\n     */\r\n    public getTotalDuration(): number {\r\n        return this.totalDuration;\r\n    }\r\n\r\n    /**\r\n     * Returns the current time of the Main Animation\r\n     */\r\n    public getCurrentTime(): number {\r\n        return this.mainAnimation.currentTime;\r\n    }\r\n\r\n    /**\r\n     * Returns the Animation progress as a fraction of the current time / duration * 100\r\n     */\r\n    public getProgress() {\r\n        return (this.getCurrentTime() / this.totalDuration) * 100;\r\n    }\r\n\r\n    /**\r\n     * Return the playback speed of the animation\r\n     */\r\n    public getSpeed(): number {\r\n        return this.mainAnimation.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Returns the current playing state\r\n     */\r\n    public getPlayState(): TypePlayStates {\r\n        return this.mainAnimation.playState;\r\n    }\r\n\r\n    /**\r\n     * Get the options of an Animate instance\r\n     */\r\n    public getOptions(): IAnimationOptions {\r\n        return this.options;\r\n    }\r\n\r\n    /**\r\n     * Get the computed options object for a specific target\r\n     */\r\n    public getComputedOption(target: HTMLElement | Animation): IAnimationOptions {\r\n        let animation = target instanceof Animation ? target : this.getAnimation(target);\r\n        return this.computedOptions.get(animation);\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean determining if the `animate` instances playstate is equal to the `playstate` parameter.\r\n     */\r\n    public is(playstate: TypePlayStates) {\r\n        return this.getPlayState() == playstate;\r\n    }\r\n\r\n    /**\r\n     * Set the current time of the Main Animation\r\n     */\r\n    public setCurrentTime(time: number): Animate {\r\n        this.all(anim => { anim.currentTime = time; });\r\n        this.emit(\"update\", this.getProgress());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the Animation progress as a value from 0 to 100\r\n     */\r\n    public setProgress(percent: number): Animate {\r\n        let time = (percent / 100) * this.totalDuration;\r\n        this.setCurrentTime(time);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the playback speed of an Animation\r\n     */\r\n    public setSpeed(speed: number = 1): Animate {\r\n        this.maxSpeed = speed;\r\n        this.all(anim => {\r\n            if (anim.updatePlaybackRate)\r\n                anim.updatePlaybackRate(speed);\r\n            else anim.playbackRate = speed;\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update the options for all targets set in the constructor\r\n     *\r\n     * _**Note**: `KeyframeEffect` support is really low, so, I am suggest that you avoid using the `updateOptions` method, until browser support for `KeyframeEffect.updateTiming(...)` and `KeyframeEffefct.setKeyframes(...)` is better_\r\n     *\r\n     * @beta\r\n     */\r\n    public updateOptions(options: IAnimationOptions = {}) {\r\n        try {\r\n            this.options = Object.assign({}, DefaultAnimationOptions, this.options, parseOptions(options));\r\n\r\n            let {\r\n                loop,\r\n                delay,\r\n                speed,\r\n                easing,\r\n                timelineOffset,\r\n                endDelay,\r\n                duration,\r\n                direction,\r\n                fillMode,\r\n                onfinish,\r\n                oncancel,\r\n                keyframes,\r\n                autoplay,\r\n                target,\r\n                targets: _targets,\r\n                padEndDelay,\r\n                extend,\r\n\r\n                /**\r\n                 * Theses are the CSS properties to be animated as Keyframes\r\n                 */\r\n                ...properties\r\n            } = this.options;\r\n\r\n            let targets = new Set([...this.getTargets(), ...getTargets(_targets), ...getTargets(target)]);\r\n            this.targets = new Manager();\r\n            this.properties = properties;\r\n\r\n            targets.forEach(value => this.targets.add(value));\r\n\r\n            let delayArr = [];\r\n            let speedArr = [];\r\n            let len = this.targets.size;\r\n            let listofComputedOptions = [];\r\n            let oldTotalDuration = this.totalDuration;\r\n            let animationOptions: IAnimationOptions = {\r\n                easing: typeof easing == \"string\" ? GetEase(easing) : easing,\r\n                iterations: loop === true ? Infinity : (loop as number),\r\n                direction,\r\n                endDelay,\r\n                duration,\r\n                speed,\r\n                delay,\r\n                timelineOffset,\r\n                fill: fillMode,\r\n                ...extend\r\n            };\r\n\r\n            this.targets.forEach((target: HTMLElement, i) => {\r\n                // Allows the use of functions as the values, for both the keyframes and the animation object\r\n                // It adds the capability of advanced stagger animation, similar to the animejs stagger functions\r\n                let computedOptions = mapAnimationOptions(animationOptions, [i, len, target], this);\r\n\r\n                // Add timelineOffset to delay, this is future proofing;\r\n                // if you want to create a custom timeline similar to animejs this will help you\r\n                // I don't intend to make a timeline function for this project\r\n                let { timelineOffset, ...remainingComputedOptions } = computedOptions;\r\n\r\n                (remainingComputedOptions.delay as number) += timelineOffset as number;\r\n                remainingComputedOptions.tempDurations = +remainingComputedOptions.delay +\r\n                    (+remainingComputedOptions.duration * +remainingComputedOptions.iterations) +\r\n                    +remainingComputedOptions.endDelay;\r\n\r\n                // Set the Animate class's duration to be the Animation with the largest totalDuration\r\n                if (this.totalDuration < +remainingComputedOptions.tempDurations) {\r\n                    this.totalDuration = +remainingComputedOptions.tempDurations;\r\n                }\r\n\r\n                listofComputedOptions[i] = remainingComputedOptions;\r\n                delayArr.push(remainingComputedOptions.delay);\r\n                speedArr.push(remainingComputedOptions.speed);\r\n            });\r\n\r\n            this.targets.forEach((target: HTMLElement, i) => {\r\n                let { speed: $speed, tempDurations, ...computedOptions }: IAnimationOptions = listofComputedOptions[i];\r\n                let animationKeyframe: TypeKeyFrameOptionsType;\r\n                let computedKeyframes: Keyframe[] | PropertyIndexedKeyframes;\r\n\r\n                // You cannot use the `padEndDelay` option and set a value for `endDelay`, the `endDelay` value will\r\n                // replace the padded endDelay\r\n\r\n                // This ensures all `animations` match up to the total duration, and don't finish too early,\r\n                // if animations finish too early, when the `.play()` method is called, some animations\r\n                // that are finished will restart, while the rest will continue playing.\r\n                // This is mostly for progress control, but depending on your usage may truly benefit you\r\n                if (padEndDelay && computedOptions.endDelay == 0 && Math.abs(+computedOptions.iterations) != Math.abs(Infinity)) {\r\n                    computedOptions.endDelay = this.totalDuration - (tempDurations as number);\r\n                }\r\n\r\n                // Accept keyframes as a keyframes Object, or a method,\r\n                // if there are no animations in the keyframes array,\r\n                // uses css properties from the options object\r\n                let arrKeyframes = computeOption(keyframes, [i, len, target], this) as (Keyframe[] | TypeCSSLikeKeyframe);\r\n                if (typeof arrKeyframes == \"object\")\r\n                    arrKeyframes = KeyframeParse(arrKeyframes);\r\n                animationKeyframe = isValid(arrKeyframes) ? arrKeyframes as Keyframe[] : (properties as PropertyIndexedKeyframes);\r\n\r\n                // If keyframes isn't defined as an animation option, use CSS properties as keyframes\r\n                if (!Array.isArray(animationKeyframe)) {\r\n                    let { offset, ...CSSProperties } = mapAnimationOptions(animationKeyframe as IAnimationOptions, [i, len, target], this);\r\n                    let $offset = offset as (string | number)[];\r\n\r\n                    // transform, is often used so, to make them easier to use we parse them for strings, number, and/or arrays of both;\r\n                    // for transform we parse the translate, skew, scale, and perspective functions (including all their varients) as CSS properties;\r\n                    // it then turns these properties into valid `PropertyIndexedKeyframes`\r\n                    // Read the documentation for `ParseTransformableCSSProperties`\r\n                    CSSProperties = ParseTransformableCSSProperties(CSSProperties as ICSSComputedTransformableProperties);\r\n                    computedKeyframes = Object.assign({},\r\n                        // Remove the offset effect option if it's not valid\r\n                        isValid($offset) ? { offset: $offset.map(parseOffset) } : null,\r\n                        CSSProperties\r\n                    ) as PropertyIndexedKeyframes;\r\n                } else {\r\n                    // Validate keyframe effect options\r\n                    computedKeyframes = animationKeyframe.map((keyframe: Keyframe & { loop: boolean | number }) => {\r\n                        let { speed, loop, easing, offset, ...rest } = keyframe; // Remove `speed`, it's not a valid CSS property\r\n\r\n                        return {\r\n                            easing: typeof easing == \"string\" ? GetEase(easing) : easing,\r\n                            iterations: (loop as boolean) === true ? Infinity : (loop as number),\r\n                            offset: parseOffset(offset),\r\n                            ...rest\r\n                        };\r\n                    });\r\n\r\n                    // Transform transformable CSS properties in each keyframe of the keyframe array\r\n                    computedKeyframes = ParseTransformableCSSKeyframes(computedKeyframes) as Keyframe[];\r\n                }\r\n\r\n                let animation: Animation, keyFrameEffect: KeyframeEffect;\r\n                if (!this.animations.has(target)) {\r\n                    // Create animation and add it to the Animations Set\r\n                    keyFrameEffect = new KeyframeEffect(target, computedKeyframes, computedOptions as KeyframeAnimationOptions);\r\n                    animation = new Animation(keyFrameEffect, computedOptions.timeline);\r\n\r\n                    this.animations.set(target, animation);\r\n                    this.keyframeEffects.set(animation, keyFrameEffect);\r\n                } else {\r\n                    // Update the animation\r\n                    animation = this.getAnimation(target);\r\n                    keyFrameEffect = this.getKeyframeEffect(animation);\r\n\r\n                    keyFrameEffect?.setKeyframes?.(computedKeyframes);\r\n                    keyFrameEffect?.updateTiming?.(computedOptions as KeyframeAnimationOptions);\r\n                }\r\n\r\n                animation.playbackRate = $speed as number;\r\n\r\n                // Support for on finish\r\n                animation.onfinish = () => {\r\n                    typeof onfinish == \"function\" && onfinish.call(this, target, i, len, animation);\r\n                };\r\n\r\n                // Support for on cancel\r\n                animation.oncancel = () => {\r\n                    typeof oncancel == \"function\" && oncancel.call(this, target, i, len, animation);\r\n                };\r\n\r\n                // Set the calculated options & keyframes for each individual animation\r\n                this.computedOptions.set(animation, computedOptions);\r\n                this.computedKeyframes.set(animation, computedKeyframes);\r\n            });\r\n\r\n            if (!this.mainAnimation) {\r\n                this.mainkeyframeEffect = new KeyframeEffect(this.mainElement, [\r\n                    { opacity: \"0\" },\r\n                    { opacity: \"1\" }\r\n                ], {\r\n                    // Why waste performance on an animation no one can see?\r\n                    duration: this.totalDuration,\r\n                    easing: \"linear\"\r\n                });\r\n\r\n                this.mainAnimation = new Animation(this.mainkeyframeEffect, this.options.timeline);\r\n                this.mainAnimation.onfinish = () => {\r\n                    let playstate = this.getPlayState();\r\n                    this.emit(\"finish\", playstate, this);\r\n                    if (!this.is(playstate))\r\n                        this.emit(\"playstate-change\", playstate, this);\r\n                    this.stopLoop();\r\n                };\r\n\r\n                this.mainAnimation.oncancel = () => {\r\n                    let playstate = this.getPlayState();\r\n                    this.emit(\"cancel\", playstate, this);\r\n                    if (!this.is(playstate))\r\n                        this.emit(\"playstate-change\", playstate, this);\r\n                    this.stopLoop();\r\n                };\r\n            } else if (oldTotalDuration !== this.totalDuration) {\r\n                this.mainkeyframeEffect?.updateTiming?.({\r\n                    duration: this.totalDuration\r\n                });\r\n\r\n                if (!this.mainkeyframeEffect.setKeyframes || !this.mainkeyframeEffect.updateTiming)\r\n                    console.error(\"@okikio/animate - `KeyframeEffect.setKeyframes` and/or `KeyframeEffect.updateTiming` are not supported in this browser.\");\r\n            }\r\n\r\n            this.minDelay = Math.min(...delayArr);\r\n            this.maxSpeed = Math.min(...speedArr);;\r\n            this.mainAnimation.playbackRate = this.maxSpeed;\r\n\r\n            if (autoplay) {\r\n                // By the time events are registered the animation would have started and there wouldn't have be a `begin` event listener to actually emit\r\n                // So, this defers the emitting for a 0ms time allowing the rest of the js to run, the `begin` event to be registered thus\r\n                // the `begin` event can be emitter\r\n                let timer: number | void = window.setTimeout(() => {\r\n                    this.emit(\"begin\", this);\r\n                    timer = window.clearTimeout(timer as number);\r\n                }, 0);\r\n\r\n                this.play();\r\n            } else this.pause();\r\n\r\n            this.newPromise();\r\n        } catch (err) {\r\n            this.emit(\"error\", err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a listener for a given event\r\n     */\r\n    public on(events: TypeAnimationEvents[] | TypeAnimationEvents | TypeEventInput, callback?: TypeListenerCallback | object, scope?: object): Animate {\r\n        this?.emitter?.on(events, callback, scope ?? this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a listener from an event\r\n     */\r\n    public off(events: TypeAnimationEvents[] | TypeAnimationEvents | TypeEventInput, callback?: TypeListenerCallback | object, scope?: object): Animate {\r\n        this?.emitter?.off(events, callback, scope ?? this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Call all listeners within an event\r\n     */\r\n    public emit(events: TypeAnimationEvents[] | TypeAnimationEvents | string | any[], ...args: any): Animate {\r\n        this?.emitter?.emit(events, ...args);\r\n        return this;\r\n    }\r\n\r\n    /** Returns the Animate options, as JSON  */\r\n    public toJSON(): IAnimationOptions {\r\n        return this.getOptions();\r\n    }\r\n\r\n    /**\r\n     * The Symbol.toStringTag well-known symbol is a string valued property that is used\r\n     * in the creation of the default string description of an object.\r\n     * It is accessed internally by the Object.prototype.toString() method.\r\n     */\r\n    get [Symbol.toStringTag]() {\r\n        return `Animate`;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a new Animate instance\r\n *\r\n * @remark\r\n * `@okikio/animate` create animations by creating instances of `Animate`, a class that acts as a wrapper around the Web Animation API. To create new instances of the `Animate` class, you can either import the `Animate` class and do this, `new Animate({ ... })` or import the `animate` (lowercase) method and do this, `animate({ ... })`. The `animate` method creates new instances of the `Animate` class and passes the options it recieves as arguments to the `Animate` class.\r\n *\r\n * The `Animate` class recieves a set of targets to animate, it then creates a list of Web Animation API `Animation` instances, along side a main animation, which is small `Animation` instance that is set to animate the opacity of a non visible element, the `Animate` class then plays each `Animation` instances keyframes including the main animation.\r\n\r\n * The main animation is there to ensure accuracy in different browser vendor implementation of the Web Animation API. The main animation is stored in `Animate.prototype.mainAnimation: Animation`, the other `Animation` instances are stored in a `Manager` (from [@okikio/manager](https://www.npmjs.com/package/@okikio/manager)) `Animate.prototype.animations: Manager<HTMLElement, Animation>`.\r\n\r\n * @example\r\n * ```ts\r\n * import animate from \"@okikio/animate\";\r\n *\r\n * // Do note, on the web you need to do this, if you installed it via the script tag:\r\n * // const { animate } = window.animate;\r\n *\r\n * (async () => {\r\n *     let [options] = await animate({\r\n *         target: \".div\",\r\n *         // NOTE: If you turn this on you have to comment out the transform property. The keyframes property is a different format for animation you cannot you both styles of formatting in the same animation\r\n *         // keyframes: [\r\n *         //     { transform: \"translateX(0px)\" },\r\n *         //     { transform: \"translateX(300px)\" }\r\n *         // ],\r\n *         transform: [\"translateX(0px)\", \"translateX(300px)\"],\r\n *         easing: \"out\",\r\n *         duration(i) {\r\n *             return (i + 1) * 500;\r\n *         },\r\n *         loop: 1,\r\n *         speed: 2,\r\n *         fillMode: \"both\",\r\n *         direction: \"normal\",\r\n *         autoplay: true,\r\n *         delay(i) {\r\n *             return (i + 1) * 100;\r\n *         },\r\n *         endDelay(i) {\r\n *             return (i + 1) * 100;\r\n *         },\r\n *     });\r\n *\r\n *     animate({\r\n *         options,\r\n *         transform: [\"translateX(300px)\", \"translateX(0px)\"],\r\n *     });\r\n * })();\r\n *\r\n * // or you can use the .then() method\r\n * animate({\r\n *     target: \".div\",\r\n *     // NOTE: If you turn this on you have to comment out the transform property. The keyframes property is a different format for animation you cannot you both styles of formatting in the same animation\r\n *     // keyframes: [\r\n *     //     { transform: \"translateX(0px)\" },\r\n *     //     { transform: \"translateX(300px)\" }\r\n *     // ],\r\n *     transform: [\"translateX(0px)\", \"translateX(300px)\"],\r\n *     easing: \"out\",\r\n *     duration(i) {\r\n *         return (i + 1) * 500;\r\n *     },\r\n *     loop: 1,\r\n *     speed: 2,\r\n *     fillMode: \"both\",\r\n *     direction: \"normal\",\r\n *     delay(i) {\r\n *         return (i + 1) * 100;\r\n *     },\r\n *     autoplay: true,\r\n *     endDelay(i) {\r\n *         return (i + 1) * 100;\r\n *     }\r\n * }).then((options) => {\r\n *     animate({\r\n *         options,\r\n *         transform: [\"translateX(300px)\", \"translateX(0px)\"]\r\n *     });\r\n * });\r\n * ```\r\n *\r\n * [Preview this example &#8594;](https://codepen.io/okikio/pen/mdPwNbJ?editors=0010)\r\n *\r\n * @packageDocumentation\r\n */\r\nexport const animate = (options: IAnimationOptions = {}): Animate => {\r\n    return new Animate(options);\r\n};\r\n\r\nexport * from \"./builtin-effects\";\r\nexport default animate;\r\n", "export const toArr = (input: any): any[] => Array.from(input);\r\nexport default toArr;", "import { Service, animate } from \"@okikio/native\";\r\nimport toArr from \"../toArr\";\r\n\r\nexport class IntroAnimation extends Service {\r\n    public elements: Array<Element>;\r\n    public rootElement: HTMLElement;\r\n\r\n    public init() {\r\n        super.init();\r\n\r\n        // Elements\r\n        this.elements = toArr(document.querySelectorAll('.intro-animation'));\r\n    }\r\n\r\n    public newPage() {\r\n        this.init();\r\n        this.prepareToShow();\r\n    }\r\n\r\n    public initEvents() {\r\n        this.emitter.on(\"CONTENT_REPLACED\", this.newPage, this);\r\n        this.emitter.on(\"BEFORE_TRANSITION_IN\", this.show, this);\r\n    }\r\n\r\n    public stopEvents() {\r\n        this.emitter.off(\"CONTENT_REPLACED\", this.newPage, this);\r\n        this.emitter.off(\"BEFORE_TRANSITION_IN\", this.show, this);\r\n    }\r\n\r\n    public stop() {\r\n        requestAnimationFrame(() => {\r\n            for (let el of this.elements) {\r\n                (el as HTMLElement).style.opacity = '1';\r\n            }\r\n        });\r\n\r\n        super.stop();\r\n    }\r\n\r\n    public prepareToShow() {\r\n        requestAnimationFrame(() => {\r\n            for (let el of this.elements) {\r\n                (el as HTMLElement).style.opacity = '0';\r\n            }\r\n        });\r\n    }\r\n\r\n    public async show() {\r\n        let [anim] = await animate({\r\n            target: (this.elements as HTMLElement[]),\r\n            opacity: [0, 1],\r\n            // @ts-ignore\r\n            delay(i: number) {\r\n                return 300 * (i + 1);\r\n            },\r\n            onfinish(el: { style: { transform: string; opacity: string; }; }) {\r\n                el.style.opacity = \"1\";\r\n            },\r\n            easing: \"ease\",\r\n            duration: 850\r\n        });\r\n        anim.stop();\r\n        return anim;\r\n    }\r\n}\r\n", "import { ITransition, ITransitionData, animate } from \"@okikio/native\";\r\n\r\n//== Transition\r\nexport const Fade: ITransition = {\r\n    name: \"default\",\r\n    duration: 500,\r\n    scrollable: true,\r\n\r\n    out({ from }: ITransitionData) {\r\n        let { duration } = this;\r\n        let fromWrapper = from.wrapper;\r\n        return animate({\r\n            target: fromWrapper,\r\n            opacity: [1, 0],\r\n            duration,\r\n        }).on(\"finish\", function () {\r\n            window.scroll(0, 0);\r\n            this.stop();\r\n        });\r\n    },\r\n\r\n    in({ to, scroll }: ITransitionData) {\r\n        let { duration } = this;\r\n        let toWrapper = to.wrapper;\r\n\r\n        window.scroll(scroll.x, scroll.y);\r\n        return animate({\r\n            target: toWrapper,\r\n            opacity: [0, 1],\r\n            duration\r\n        }).then(function () {\r\n            this.stop();\r\n        });\r\n    }\r\n};\r\n", "import { ITransition, ITransitionData, animate } from \"@okikio/native\";\r\nimport toArr from \"../toArr\";\r\n\r\n//== Transitions\r\nexport const BigTransition: ITransition = {\r\n    name: \"big\",\r\n    delay: 200,\r\n    durationPerAnimation: 700,\r\n    scrollable: true,\r\n\r\n    init() {\r\n        this.mainElement = document.getElementById('big-transition');\r\n        this.logoElement = this.mainElement.querySelector('#logo');\r\n        this.horizontalElements = toArr(this.mainElement.querySelectorAll('#big-transition-horizontal div'));\r\n        this.maxLength = this.horizontalElements.length;\r\n    },\r\n\r\n    out({ from, scroll }: ITransitionData) {\r\n        let { durationPerAnimation: duration, delay } = this;\r\n        let fromWrapper = from.wrapper;\r\n\r\n        let wrapperStyle = Object.assign({}, fromWrapper.style);\r\n        return new Promise<void>(async resolve => {\r\n            this.mainElement.style.opacity = \"1\";\r\n            this.mainElement.style.visibility = \"visible\";\r\n            let anim1 = animate({\r\n                target: fromWrapper,\r\n                opacity: [1, 0],\r\n                duration,\r\n                onfinish(el: { style: { opacity: string; }; }) {\r\n                    el.style.opacity = '0';\r\n                }\r\n            });\r\n\r\n            anim1.then(function () { this.stop(); });\r\n\r\n            let [anim2] = await animate({\r\n                target: this.horizontalElements,\r\n                keyframes: [\r\n                    { transform: \"scaleX(0)\" },\r\n                    { transform: \"scaleX(1)\" },\r\n                ],\r\n                // @ts-ignore\r\n                delay(i: number) {\r\n                    return delay * (i + 1);\r\n                },\r\n                onfinish(el: { style: { transform: string; }; }) {\r\n                    el.style.transform = `scaleX(1)`;\r\n                },\r\n                easing: \"out-cubic\",\r\n                duration: 500\r\n            });\r\n\r\n            fromWrapper.style.opacity = '1';\r\n            Object.assign(fromWrapper.style, wrapperStyle);\r\n            this.logoElement.style.visibility = \"visible\";\r\n\r\n            let loaderDuration = 500;\r\n            let [anim3] = await animate({\r\n                target: this.logoElement,\r\n                opacity: [0, 1],\r\n                duration: loaderDuration,\r\n                onfinish(el: { style: { opacity: string; }; }) {\r\n                    el.style.opacity = `1`;\r\n                },\r\n            });\r\n\r\n            let [anim4] = await animate({\r\n                options: anim3,\r\n                opacity: [1, 0],\r\n                onfinish(el: { style: { opacity: string; }; }) {\r\n                    el.style.opacity = `0`;\r\n                },\r\n                delay: 1500\r\n            });\r\n            this.logoElement.style.visibility = \"hidden\";\r\n            // anim2.stop() // -> anim2.stop() Breaks the Animation\r\n            anim3.stop();\r\n            anim4.stop();\r\n            resolve();\r\n        });\r\n    },\r\n\r\n    in({ to, scroll }: ITransitionData) {\r\n        let { durationPerAnimation: duration, delay } = this;\r\n        let toWrapper = to.wrapper;\r\n\r\n        window.scroll(scroll.x, scroll.y);\r\n        return new Promise<void>(async resolve => {\r\n            let anim1 = animate({\r\n                target: toWrapper,\r\n                opacity: [0, 1],\r\n                duration\r\n            }).then(() => {\r\n                anim1.stop();\r\n            });\r\n\r\n            let [anim2] = await animate({\r\n                target: this.horizontalElements,\r\n                keyframes: [\r\n                    { transform: \"scaleX(1)\" },\r\n                    { transform: \"scaleX(0)\" },\r\n                ],\r\n                // @ts-ignore\r\n                delay(i: number) {\r\n                    return delay * (i + 1);\r\n                },\r\n                onfinish(el: { style: { transform: string; }; }) {\r\n                    el.style.transform = `scaleX(0)`;\r\n                },\r\n                easing: \"out-cubic\",\r\n                duration: 500\r\n            });\r\n\r\n            this.mainElement.style.opacity = \"0\";\r\n            this.mainElement.style.visibility = \"hidden\";\r\n            anim2.stop();\r\n            resolve();\r\n        });\r\n    }\r\n}\r\n", "import { ITransition, ITransitionData, animate } from \"@okikio/native\";\r\n\r\n//== Transitions\r\nexport const Slide: ITransition = {\r\n    name: \"slide\",\r\n    duration: 500,\r\n    direction: \"right\",\r\n    scrollable: true,\r\n\r\n    init(data: ITransition) {\r\n        let trigger = (data.trigger as HTMLElement);\r\n        if (trigger instanceof Node && trigger.hasAttribute(\"data-direction\")) {\r\n            this.direction = trigger.getAttribute(\"data-direction\");\r\n        } else {\r\n            this.direction = \"right\";\r\n        }\r\n    },\r\n\r\n    out({ from }: ITransitionData) {\r\n        let { duration, direction } = this;\r\n        let fromWrapper = from.wrapper;\r\n\r\n        let anim = animate({\r\n            target: fromWrapper,\r\n            keyframes: [\r\n                { transform: \"translateX(0%)\", opacity: 1 },\r\n                { transform: `translateX(${direction === \"left\" ? \"-\" : \"\"}25%)`, opacity: 0 },\r\n            ],\r\n            duration,\r\n            easing: \"in-quint\"\r\n        });\r\n\r\n        return anim.on(\"begin\", () => {\r\n            document.body.classList.add(\"no-overflow-x\");\r\n        }).then(function () {\r\n            this.stop();\r\n        });\r\n    },\r\n\r\n    in({ to, scroll }: ITransitionData) {\r\n        let { duration } = this;\r\n        let toWrapper = to.wrapper;\r\n\r\n        window.scroll(scroll.x, scroll.y);\r\n        let anim = animate({\r\n            target: toWrapper,\r\n            keyframes: [\r\n                { transform: `translateX(${this.direction === \"right\" ? \"-\" : \"\"}25%)`, opacity: 0 },\r\n                { transform: \"translateX(0%)\", opacity: 1 },\r\n            ],\r\n            duration,\r\n            easing: \"out-quint\"\r\n        })\r\n\r\n        return anim.then(function () {\r\n            document.body.classList.remove(\"no-overflow-x\");\r\n            this.stop();\r\n        });\r\n    }\r\n};\r\n\r\nexport const SlideLeft: ITransition = {\r\n    ...Slide,\r\n\r\n    name: \"slide-left\",\r\n    direction: \"left\",\r\n    init(data: ITransition) { }\r\n};\r\n\r\nexport const SlideRight: ITransition = {\r\n    ...Slide,\r\n\r\n    name: \"slide-right\",\r\n    direction: \"right\",\r\n    init(data: ITransition) { }\r\n};\r\n", "import { Service } from \"@okikio/native\";\r\nimport { toArr } from \"../toArr\";\r\n\r\nexport class Navbar extends Service {\r\n    public navbar: HTMLElement;\r\n    public elements: HTMLElement[];\r\n    public menu: HTMLElement;\r\n    public collapseSection: HTMLElement;\r\n    public navbarList: HTMLElement;\r\n    public toggleStatus: boolean;\r\n\r\n    public init() {\r\n        // Elements\r\n        this.navbar = document.querySelector(\".navbar\") as HTMLElement;\r\n        this.collapseSection = this.navbar.querySelector(\".navbar-collapse.mobile\") as HTMLElement;\r\n        this.navbarList = this.navbar.querySelector(\".navbar-list\") as HTMLElement;\r\n        this.elements = toArr(this.navbar.querySelectorAll(\".navbar-list a\"));\r\n        this.menu = this.navbar.querySelector(\".navbar-toggle\") as HTMLElement;\r\n        this.toggleStatus = false;\r\n\r\n        this.fixTabindex();\r\n        this.toggleClick = this.toggleClick.bind(this);\r\n    }\r\n\r\n    public activateLink() {\r\n        let { href } = window.location;\r\n\r\n        for (let el of this.elements) {\r\n            let itemHref =\r\n                el.getAttribute(\"data-path\") ||\r\n                (el as HTMLAnchorElement).href;\r\n            if (!itemHref || itemHref.length < 1) return;\r\n\r\n            let URLmatch = new RegExp(itemHref).test(href);\r\n            let isActive = el.classList.contains(\"active\");\r\n            if (!(URLmatch && isActive)) {\r\n                el.classList.toggle(\"active\", URLmatch);\r\n            }\r\n        }\r\n\r\n        if (this.toggleStatus) {\r\n            this.toggleClick();\r\n        }\r\n    }\r\n\r\n    public fixTabindex() {\r\n        for (let el of this.elements) {\r\n            el.setAttribute(\"tabindex\", `${this.toggleStatus ? 0 : -1}`);\r\n        }\r\n    }\r\n\r\n    public toggleClick() {\r\n        this.collapseSection.style?.setProperty?.(\"--height\", `${this.navbarList.clientHeight}px`);\r\n        this.toggleStatus = !this.toggleStatus;\r\n        this.collapseSection.classList.toggle(\"collapse\", !this.toggleStatus);\r\n        this.collapseSection.classList.toggle(\"show\", this.toggleStatus);\r\n        this.fixTabindex();\r\n    }\r\n\r\n    public scroll() {\r\n        this.navbar.classList.toggle(\"shadow\", window.scrollY >= 5);\r\n    }\r\n\r\n    public initEvents() {\r\n        this.menu.addEventListener(\"click\", this.toggleClick);\r\n        this.emitter.on(\"scroll\", this.scroll, this);\r\n        this.emitter.on(\"READY\", this.activateLink, this);\r\n        this.emitter.on(\"GO\", this.activateLink, this);\r\n    }\r\n\r\n    public stopEvents() {\r\n        this.navbar.removeEventListener(\"click\", this.toggleClick);\r\n        this.emitter.off(\"scroll\", this.scroll, this);\r\n        this.emitter.off(\"READY\", this.activateLink, this);\r\n        this.emitter.off(\"GO\", this.activateLink, this);\r\n    }\r\n\r\n    public uninstall() {\r\n        while (this.elements.length) this.elements.pop();\r\n        this.elements = undefined;\r\n        this.menu = undefined;\r\n        this.navbar = undefined;\r\n    }\r\n}", "import { PJAX, App, TransitionManager, Router, HistoryManager, PageManager, animate, Animate } from \"@okikio/native\";\r\nimport { IntroAnimation } from \"./services/IntroAnimation\";\r\n\r\nimport { Fade } from \"./transitions/Fade\";\r\nimport { BigTransition } from \"./transitions/BigTransition\";\r\nimport { Slide, SlideLeft, SlideRight } from \"./transitions/Slide\";\r\n\r\nimport { toArr } from \"./toArr\";\r\nimport { Navbar } from \"./services/Navbar\";\r\n\r\nlet router: Router, pjax: PJAX;\r\nconst app: App = new App();\r\napp\r\n    .add(new IntroAnimation())\r\n    .set(\"HistoryManager\", new HistoryManager())\r\n    .set(\"PageManager\", new PageManager())\r\n    .set(\"TransitionManager\", new TransitionManager([\r\n        [\"default\", Fade],\r\n        [\"BigTransition\", BigTransition],\r\n        [\"Slide\", Slide],\r\n        [\"SlideLeft\", SlideLeft],\r\n        [\"SlideRight\", SlideRight]\r\n    ]))\r\n    .add(new Navbar())\r\n    .set(\"router\", router = new Router())\r\n    .add(pjax = new PJAX());\r\n\r\ntry {\r\n    router = app.get(\"router\") as Router;\r\n\r\n    // This isn't nessceary, but it changes the nav link in focus depending on the page\r\n    let navLink: HTMLElement[] = toArr(document.querySelectorAll(\".navbar .nav-link\"));\r\n    for (let item of navLink) {\r\n        let navItem = (item as HTMLAnchorElement);\r\n        router.add({\r\n            path: navItem.getAttribute(\"data-path\") || navItem.pathname,\r\n            method() {\r\n                let isActive = navItem.classList.contains(\"active\");\r\n                if (!isActive) navItem.classList.add(\"active\");\r\n                for (let nav of navLink) {\r\n                    if (nav !== navItem)\r\n                        nav.classList.remove(\"active\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    router.add({\r\n        path: /(index|\\/$)(\\.html)?/,\r\n        method() { }\r\n    });\r\n\r\n    // app.on(\"AFTER_SPLASHSCREEN_HIDE\", () => {\r\n    //     anim?.play();\r\n    // });\r\n\r\n    app.boot();\r\n} catch (err) {\r\n    console.warn(\"[App] boot failed,\", err);\r\n}\r\n"],
  "mappings": "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",
  "names": []
}

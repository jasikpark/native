@import "_style";
@import "_layout";
@import "_utilities";

@mixin modifier($selector, $property, $value) {
    @at-root {
        @each $key, $screen in $screens {
            @media (min-width: $screen) {
                #{$key}:#{str-slice($selector, 2)} {
                    #{$property}: $value;
                }

                // hover-#{$key}:#{str-slice($selector, 2)}:hover,
                // focus-#{$key}:#{str-slice($selector, 2)}:focus {
                //     #{$property}: $value;
                // }
            }
        }

        hover:#{str-slice($selector, 2)}:hover,
        focus:#{str-slice($selector, 2)}:focus {
            #{$property}: $value;
        }
    }
}

@mixin listSet($property, $list, $suffix: false) {
    @if map-has-key($list, "default") {
        &#{if($suffix, "> #{$suffix}", "")} {
            $value: map-get($list, "default");
            #{$property}: $value;

            @include modifier($selector, $property, $value);
        }
    }

    @each $key, $value in $list {
        &-#{$key}#{if($suffix, "> #{$suffix}", "")} {
            // If value is a map, loop through, and create new sub-classes using it's index
            @if type-of($value) == "map" {
                @each $index, $val in $value {
                    &-#{$index} {
                        #{$property}: $val;

                        @include modifier(#{&}, $property, $val);
                    }
                }
            } @else {
                #{$property}: $value;

                @include modifier(#{&}, $property, $value);
            }
        }
    }
}

@mixin theme($property, $suffix: false) {
    @include listSet($property, $colors, $suffix);
}

$dirs: (
    "r": "right",
    "l": "left",
    "t": "top",
    "b": "bottom",
    "y": (
        "bottom",
        "top",
    ),
    "x": (
        "right",
        "left",
    ),
);

@mixin dirSet($property, $list, $suffix: false) {
    @each $key, $dir in $dirs {
        &#{$key} {
            // If value is a map, loop through, and create new sub-classes using it's index
            @if type-of($dir) == "list" {
                @each $val in $dir {
                    // @debug #{$property}-#{$val};
                    @include listSet(#{$property}-#{$val}, $list, $suffix);
                }
            } @else {
                @include listSet(#{$property}-#{$dir}, $list, $suffix);
            }
        }
    }
}

.bg {
    @include theme(background-color);
    @include dirSet(padding, $screens);
}

/*
.color {
    @include theme(color);
}

.opacity {
    @include listSet(opacity, $opacity);
}


.border {
    @include listSet(border-width, $borderWidth);

    & {
        border-color: map-get(map-get($colors, "gray"), "300");
    }

    @include theme(border-color);

    &- {
        @include dirSet(border-width, $borderWidth);
        @include dirSet(border-color, $colors);
    }

    &-solid {
        border-style: solid;
    }

    &-dashed {
        border-style: dashed;
    }

    &-dotted {
        border-style: dotted;
    }

    &-double {
        border-style: double;
    }

    &-none {
        border-style: none;
    }
}

.divide {
    & {
        border-color: map-get(map-get($colors, "gray"), "300");
    }

    @include theme(border-color, "* + *");

    &- {
        @include dirSet(border-width, $borderWidth, "* + *");
        @include dirSet(border-color, $colors, "* + *");
    }

    &-solid > * + * {
        border-style: solid;
    }

    &-dashed > * + * {
        border-style: dashed;
    }

    &-dotted > * + * {
        border-style: dotted;
    }

    &-double > * + * {
        border-style: double;
    }

    &-none > * + * {
        border-style: none;
    }
}

.radius {
    @include listSet(border-radius, $borderRadius);

    &- {
        @include dirSet(border-radius, $borderRadius);
    }
}

.cursor {
    @include listSet(cursor, $cursors);
}

@mixin negativeListSet($property, $list, $suffix: false) {
    @if map-has-key($list, "default") {
         &#{if($suffix, "> #{$suffix}", "")} {
            $value: map-get($list, "default");
            #{$property}: -$value;

            @include modifier($selector, $property, -$value);
        }
    }

    @each $key, $value in $list {
        &-#{$key}#{if($suffix, "> #{$suffix}", "")} {
            // If value is a map, loop through, and create new sub-classes using it's index
            @if type-of($value) == "map" {
                @each $index, $val in $value {
                    &-#{$index} {
                        #{$property}: -$val;

                        @include modifier(#{&}, $property, -$val);
                    }
                }
            } @else {
                #{$property}: -$value;

                @include modifier(#{&}, $property, -$value);
            }
        }
    }
}

@mixin negDirSet($property, $list, $suffix: false) {
    @each $key, $dir in $dirs {
        &#{$key} {
            // If value is a map, loop through, and create new sub-classes using it's index
            @if type-of($dir) == map {
                @each $val in $value {
                    @include negativeListSet(
                        #{$property}-#{$val},
                        $list,
                        $suffix
                    );
                }
            } @else {
                @include negativeListSet(#{$property}-#{$dir}, $list, $suffix);
            }
        }
    }
}

$spacingTypes: (
    "m": "margin",
    "p": "padding",
);

@each $key, $spaceType in $spaceTypes {
    .#{$key} {
        &-auto {
            #{$spaceType}: auto;
        }

        @include listSet(#{$spaceType}, $spacing);
        @include dirSet(#{$spaceType}, $spacing);

        @if $spaceType == "margin" {
            &-neg {
                @include negativeListSet(#{$spaceType}, $spacing);
                @include negDirSet(#{$spaceType}, $spacing);
            }
        }
    }
}

.space {
    @include listSet(#{$spaceType}, $spacing, "* + *");
    @include dirSet(#{$spaceType}, $spacing, "* + *");

    &-neg {
        @include negativeListSet(#{$spaceType}, $spacing, "* + *");
        @include negDirSet(#{$spaceType}, $spacing, "* + *");
    }
}

.font {
    @include listSet(font-family, $fontFamily);

    &-italic {
        font-style: italic;
    }

    &-bold {
        font-style: bold;
    }

    &-w {
        @include listSet(font-weight, $fontWeight);
    }

    &-sz {
        @include listSet(font-size, $fontSize);
    }
}

$sizeTypes: (
    "w": "width",
    "h": "height",
    "min-w": "min-width",
    "min-h": "min-height",
    "max-w": "max-width",
    "max-h": "max-height",
);

@each $key, $sizeType in $sizeTypes {
    .#{$key} {
        @include listSet(#{$sizeType}, $sizes);
    }
}

.flex {
    display: flex;
    @include listSet(flex, $flex);

    &-grow {
        @include listSet(flex-grow, $flexGrow);
    }

    &-shrink {
        @include listSet(flex-shrink, $flexShrink);
    }

    &-row {
        flex-direction: row;
    }
    &-row-reverse {
        flex-direction: row-reverse;
    }
    &-col {
        flex-direction: column;
    }
    &-col-reverse {
        flex-direction: column-reverse;
    }

    &-no-wrap {
        flex-wrap: nowrap;
    }

    &-wrap {
        flex-wrap: wrap;
    }

    &-wrap-reverse {
        flex-wrap: wrap-reverse;
    }
}

.items {
    &-stretch {
        align-items: stretch;
    }
    &-start {
        align-items: flex-start;
    }
    &-center {
        align-items: center;
    }
    &-end {
        align-items: flex-end;
    }
    &-baseline {
        align-items: baseline;
    }
}

.content {
    &-start {
        align-content: flex-start;
    }
    &-center {
        align-content: center;
    }
    &-end {
        align-content: flex-end;
    }
    &-between {
        align-content: space-between;
    }
    &-around {
        align-content: space-around;
    }
}

.self {
    &-auto {
        align-self: auto;
    }
    &-start {
        align-self: flex-start;
    }
    &-center {
        align-self: center;
    }
    &-end {
        align-self: flex-end;
    }
    &-stretch {
        align-self: stretch;
    }
}

.float {
    &-right {
        float: right;
    }
    &-left {
        float: left;
    }
    &-none {
        float: none;
    }
}

.justify {
    &-start {
        justify-content: flex-start;
    }
    &-center {
        justify-content: center;
    }
    &-end {
        justify-content: flex-end;
    }
    &-between {
        justify-content: space-between;
    }
    &-around {
        justify-content: space-around;
    }
}

.clearfix::after {
    content: "";
    display: table;
    clear: both;
}

.object {
    &-contain {
        object-fit: contain;
    }

    &-cover {
        object-fit: cover;
    }

    &-fill {
        object-fit: fill;
    }

    &-none {
        object-fit: none;
    }

    &-scale-down {
        object-fit: scale-down;
    }

    &-bottom {
        object-position: bottom;
    }
    &-center {
        object-position: center;
    }
    &-left {
        object-position: left;
    }
    &-left-bottom {
        object-position: left bottom;
    }
    &-left-top {
        object-position: left top;
    }
    &-right {
        object-position: right;
    }
    &-right-bottom {
        object-position: right bottom;
    }
    &-right-top {
        object-position: right top;
    }
    &-top {
        object-position: top;
    }
}

.overflow {
    &-auto {
        overflow: auto;
    }
    &-hidden {
        overflow: hidden;
    }
    &-visible {
        overflow: visible;
    }
    &-scroll {
        overflow: scroll;
    }
    &-x-auto {
        overflow-x: auto;
    }
    &-y-auto {
        overflow-y: auto;
    }
    &-x-hidden {
        overflow-x: hidden;
    }
    &-y-hidden {
        overflow-y: hidden;
    }
    &-x-visible {
        overflow-x: visible;
    }
    &-y-visible {
        overflow-y: visible;
    }
    &-x-scroll {
        overflow-x: scroll;
    }
    &-y-scroll {
        overflow-y: scroll;
    }
}
.static {
    position: static;
}
.fixed {
    position: fixed;
}
.absolute {
    position: absolute;
}
.relative {
    position: relative;
}
.sticky {
    position: sticky;
}

.pos {
    &-0 {
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
    }

    &-x {
        right: 0;
        left: 0;

        &-auto {
            right: auto;
            left: auto;
        }
    }

    &-y {
        top: 0;
        bottom: 0;

        &-auto {
            bottom: auto;
            top: auto;
        }
    }

    &-auto {
        top: auto;
        right: auto;
        bottom: auto;
        left: auto;
    }
}

.scrolling {
    &-touch {
        -webkit-overflow-scrolling: touch;
    }
    &-auto {
        -webkit-overflow-scrolling: auto;
    }
}

.shadow {
    // @include listSet(box-shadow, $boxShadow);

    @if map-has-key($boxShadow, "default") {
        $selector: &;
        #{$selector} {
            $value: map-get($boxShadow, "default");
            #{$property}: #{$value};

            @include modifier($selector, $property, #{$value});
        }
    }

    @each $key, $value in $boxShadow {
        $parentSelector: &-#{$key};
        #{$parentSelector} {
            #{$property}: #{$value};

            @include modifier($parentSelector, $property, #{$value});
        }
    }
}

.text {
    @include listSet(letter-spacing, $letterSpacing);

    &-height {
        @include listSet(line-height, $lineHeight);
    }

    &-uppercase {
        text-transform: uppercase;
    }

    &-lowercase {
        text-transform: lowercase;
    }

    &-capitalize {
        text-transform: capitalize;
    }

    &-normal-case {
        text-transform: none;
    }

    &-left {
        text-align: left;
    }

    &-right {
        text-align: right;
    }

    &-center {
        text-align: center;
    }

    &-justify {
        text-align: justify;
    }

    &-underline {
        text-decoration: underline;
    }

    &-line-through {
        text-decoration: line-through;
    }

    &-no-underline {
        text-decoration: none;
    }
}

.display {
    display: block;
}

.visible {
    visibility: visible;
}

.invisible {
    visibility: hidden;
}

.pointer-events {
    &-none {
        pointer-events: none;
    }
    &-auto {
        pointer-events: auto;
    }
}

.container {
    width: 100%;
    @include listSet(max-width, $screens);
}

.show {
    visibility: visible;
    pointer-events: auto;
}

.hide {
    visibility: hidden;
    pointer-events: none;
}

.z {
    @include listSet(z-index, $zIndex);
}

.d {
    &-hidden {
        display: none;
    }
    &-block {
        display: block;
    }
    &-inline-block {
        display: inline-block;
    }
    &-inline {
        display: inline;
    }
    &-flex {
        display: flex;
    }
    &-inline-flex {
        display: inline-flex;
    }
}

.v-align {
    &-baseline {
        vertical-align: baseline;
    }
    &-top {
        vertical-align: top;
    }
    &-middle {
        vertical-align: middle;
    }
    &-bottom {
        vertical-align: bottom;
    }
    &-text-top {
        vertical-align: text-top;
    }
    &-text-bottom {
        vertical-align: text-bottom;
    }
}

.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
}

.not-sr-only {
    position: static;
    width: auto;
    height: auto;
    padding: 0;
    margin: 0;
    overflow: visible;
    clip: auto;
    white-space: normal;
}

.whitespace {
    white-space: normal;

    &-no-wrap {
        white-space: nowrap;
    }
    &-pre {
        white-space: pre;
    }
    &-pre-line {
        white-space: pre-line;
    }
    &-pre-wrap {
        white-space: pre-wrap;
    }
}

.w-break {
    word-break: normal;
    overflow-wrap: normal;
    &-words {
        overflow-wrap: break-word;
    }
    &-all {
        word-break: break-all;
    }
}

.truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.list {
    @include listSet(list-style-type, $listStyleType);

    &-inside {
        list-style-position: inside;
    }

    &-outside {
        list-style-position: outside;
    }
}
*/

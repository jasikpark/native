{"version":3,"sources":["history.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AACvC,OAAO,EAAE,IAAI,EAAE,MAAM,UAAU,CAAC;AAqBhC;;;;;;GAMG;AACH,MAAM,OAAO,MAAM;IAIlB;;;;;;OAMG;IACA,YAAY,IAAY,MAAM,CAAC,OAAO,EAAE,IAAY,MAAM,CAAC,OAAO;QAC9D,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;CACJ;AAED;;;;;GAKG;AACH,MAAM,OAAO,KAAK;IAUjB;;;;;;;;;;;;OAYG;IACA,YAAY,QAAgB;QACxB,GAAG,EAAE,IAAI,IAAI,EAAE;QACf,KAAK,EAAE,CAAC;QACR,UAAU,EAAE,SAAS;QACrB,IAAI,EAAE;YACF,MAAM,EAAE,IAAI,MAAM,EAAE;YACpB,OAAO,EAAE,gBAAgB;SAC5B;KACJ;QACG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAEJ;;;;;OAKG;IACO,QAAQ;QACX,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;IAC5B,CAAC;IAEJ;;;;;;OAMG;IACO,QAAQ,CAAC,KAAa;QACzB,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QACzB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEJ;;;;;OAKG;IACO,MAAM;QACT,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B,CAAC;IAEJ;;;;;OAKG;IACO,cAAc;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;IACxC,CAAC;IAEJ;;;;;OAKG;IACO,aAAa;QAChB,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;IACjC,CAAC;IAEJ;;;;;OAKG;IACO,OAAO;QACV,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IAC3B,CAAC;IAEJ;;;;;OAKG;IACO,MAAM;QACT,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,GAAW,IAAI,CAAC,KAAK,CAAC;QAC5D,OAAO;YACH,GAAG,EAAE,GAAG,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI;SAClD,CAAC;IACN,CAAC;CACJ;AAED;;;;;;GAMG;AACH,MAAM,OAAO,cAAe,SAAQ,OAAsB;IACzD;;;;;OAKG;IACA;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;IAEJ;;;;;;OAMG;IACO,GAAG,CAAC,KAAY;QACnB,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACjB,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEJ;;;;;;OAMG;IACO,QAAQ,CAAC,KAAqB;QACjC,IAAI,KAAK,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9D,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","file":"../history.js","sourcesContent":["import { Manager } from \"./manager.js\";\r\nimport { _URL } from \"./url.js\";\r\n\r\nexport type Trigger = HTMLAnchorElement | \"HistoryManager\" | \"popstate\" | \"back\" | \"forward\";\r\n\r\nexport interface ICoords {\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\nexport interface IStateData {\r\n    scroll: ICoords;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface IState {\r\n    url: _URL;\r\n    index?: number;\r\n    transition: string;\r\n    data: IStateData;\r\n}\r\n\r\n/**\r\n * A quick snapshot of page coordinates, e.g. scroll positions\r\n *\r\n * @export\r\n * @class Coords\r\n * @implements {ICoords}\r\n */\r\nexport class Coords implements ICoords {\r\n    public x: number;\r\n    public y: number;\r\n\r\n\t/**\r\n\t * Creates an instance of Coords.\r\n\t *\r\n\t * @param {number} [x=window.scrollX]\r\n\t * @param {number} [y=window.scrollY]\r\n\t * @memberof Coords\r\n\t */\r\n    constructor(x: number = window.scrollX, y: number = window.scrollY) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the current status of the page consisting of properties like: url, transition, and data\r\n *\r\n * @export\r\n * @class State\r\n */\r\nexport class State {\r\n\t/**\r\n\t * The current state data\r\n\t *\r\n\t * @private\r\n\t * @type IState\r\n\t * @memberof State\r\n\t */\r\n    private state: IState;\r\n\r\n\t/**\r\n\t * Creates an instance of State.\r\n\t * @param {IState} {\r\n     *         url = new _URL(),\r\n\t *         index = 0,\r\n\t *         transition = \"default\",\r\n\t *         data = {\r\n\t *             scroll: new StateCoords(),\r\n\t *             trigger: \"HistoryManager\"\r\n\t *         }\r\n\t *     }\r\n\t * @memberof State\r\n\t */\r\n    constructor(state: IState = {\r\n        url: new _URL(),\r\n        index: 0,\r\n        transition: \"default\",\r\n        data: {\r\n            scroll: new Coords(),\r\n            trigger: \"HistoryManager\"\r\n        }\r\n    }) {\r\n        this.state = state;\r\n    }\r\n\r\n\t/**\r\n\t * Get state index\r\n\t *\r\n\t * @returns number\r\n\t * @memberof State\r\n\t */\r\n    public getIndex(): number {\r\n        return this.state.index;\r\n    }\r\n\r\n\t/**\r\n\t * Set state index\r\n\t *\r\n\t * @param {number} index\r\n\t * @returns State\r\n\t * @memberof State\r\n\t */\r\n    public setIndex(index: number): State {\r\n        this.state.index = index;\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Get state URL\r\n\t *\r\n\t * @returns _URL\r\n\t * @memberof State\r\n\t */\r\n    public getURL(): _URL {\r\n        return this.state.url;\r\n    }\r\n\r\n\t/**\r\n\t * Get state URL as a string\r\n\t *\r\n\t * @returns string\r\n\t * @memberof State\r\n\t */\r\n    public getURLPathname(): string {\r\n        return this.state.url.getPathname();\r\n    }\r\n\r\n\t/**\r\n\t * Get state transition\r\n\t *\r\n\t * @returns string\r\n\t * @memberof State\r\n\t */\r\n    public getTransition(): string {\r\n        return this.state.transition;\r\n    }\r\n\r\n\t/**\r\n\t * Get state data\r\n\t *\r\n\t * @returns IStateData\r\n\t * @memberof State\r\n\t */\r\n    public getData(): IStateData {\r\n        return this.state.data;\r\n    }\r\n\r\n\t/**\r\n\t * Returns the State as an Object\r\n\t *\r\n\t * @returns object\r\n\t * @memberof State\r\n\t */\r\n    public toJSON(): object {\r\n        const { url, index, transition, data }: IState = this.state;\r\n        return {\r\n            url: url.getFullPath(), index, transition, data\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * History of the site, stores only the State class\r\n *\r\n * @export\r\n * @class HistoryManager\r\n * @extends {Manager<number, State>}\r\n */\r\nexport class HistoryManager extends Manager<number, State> {\r\n\t/**\r\n\t * Creates an instance of the HistoryManager class, which inherits properties and methods from the Storage class.\r\n\t *\r\n\t * @memberof HistoryManager\r\n\t * @constructor\r\n\t */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n\t/**\r\n\t * Sets the index of the state before adding to HistoryManager\r\n\t *\r\n\t * @param {State} value\r\n\t * @returns HistoryManager\r\n\t * @memberof HistoryManager\r\n\t */\r\n    public add(value: State): HistoryManager {\r\n        let state = value;\r\n        let index = this.size;\r\n        super.add(state);\r\n        state.setIndex(index);\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Quick way to add a State to the HistoryManager\r\n\t *\r\n\t * @param {IState} value\r\n\t * @returns HistoryManager\r\n\t * @memberof HistoryManager\r\n\t */\r\n    public addState(value: IState | State): HistoryManager {\r\n        let state = value instanceof State ? value : new State(value);\r\n        this.add(state);\r\n        return this;\r\n    }\r\n}\r\n"]}
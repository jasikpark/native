{"version":3,"sources":["block.ts"],"names":[],"mappings":"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","file":"../block.js","sourcesContent":["import { Service } from \"./service.js\";\r\nimport { ManagerItem, AdvancedManager } from \"./manager.js\";\r\nimport { App } from \"./app.js\";\r\n\r\n/**\r\n * Services that interact with specific Components to achieve certain actions\r\n *\r\n * @export\r\n * @class Block\r\n * @extends {Service}\r\n */\r\nexport class Block extends Service {\r\n    /**\r\n     * The name of the Block\r\n     *\r\n     * @protected\r\n     * @type string\r\n     * @memberof Block\r\n     */\r\n    protected name: string;\r\n\r\n    /**\r\n     * Query selector string \r\n     *\r\n     * @protected\r\n     * @type string\r\n     * @memberof Block\r\n     */\r\n    protected selector: string;\r\n\r\n    /**\r\n     * Index of Block in a BlockManager \r\n     *\r\n     * @protected\r\n     * @type number\r\n     * @memberof Block\r\n     */\r\n    protected index: number;\r\n\r\n    /**\r\n     * The Root Element of a Block\r\n     *\r\n     * @protected\r\n     * @type HTMLElement\r\n     * @memberof Block\r\n     */\r\n    protected rootElement: HTMLElement;\r\n\r\n    /**\r\n     * It initializes the Block\r\n     *\r\n     * @param {string} [name]\r\n     * @param {HTMLElement} [rootElement]\r\n     * @param {string} [selector]\r\n     * @param {number} [index]\r\n     * @memberof Block\r\n     */\r\n    public init(name?: string, rootElement?: HTMLElement, selector?: string, index?: number) {\r\n        this.rootElement = rootElement;\r\n        this.name = name;\r\n        this.selector = selector;\r\n        this.index = index;\r\n    }\r\n\r\n    /**\r\n     * Get Root Element\r\n     *\r\n     * @returns HTMLElement\r\n     * @memberof Block\r\n     */\r\n    public getRootElement(): HTMLElement {\r\n        return this.rootElement;\r\n    }\r\n\r\n    /**\r\n     * Get Selector\r\n     *\r\n     * @returns string\r\n     * @memberof Block\r\n     */\r\n    public getSelector(): string {\r\n        return this.selector;\r\n    }\r\n\r\n    /**\r\n     * Get Index\r\n     *\r\n     * @returns number\r\n     * @memberof Block\r\n     */\r\n    public getIndex(): number {\r\n        return this.index;\r\n    }\r\n\r\n    /**\r\n     * Get the name of the Block\r\n     *\r\n     * @returns string\r\n     * @memberof Block\r\n     */\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a new Block Intent Class\r\n *\r\n * @export\r\n * @class BlockIntent\r\n * @extends {ManagerItem}\r\n */\r\nexport class BlockIntent extends ManagerItem {\r\n    /**\r\n     * The name of the Block\r\n     *\r\n     * @protected\r\n     * @type string\r\n     * @memberof BlockIntent\r\n     */\r\n    protected name: string;\r\n\r\n    /**\r\n     * The Block Class\r\n     *\r\n     * @protected\r\n     * @type {typeof Block}\r\n     * @memberof BlockIntent\r\n     */\r\n    protected block: typeof Block;\r\n\r\n    /**\r\n     * Creates an instance of BlockIntent.\r\n     *\r\n     * @param {string} name\r\n     * @param {typeof Block} block\r\n     * @memberof BlockIntent\r\n     */\r\n    constructor(name: string, block: typeof Block) {\r\n        super();\r\n        this.name = name;\r\n        this.block = block;\r\n    }\r\n\r\n    /**\r\n     * Getter for name of Block Intent\r\n     *\r\n     * @returns string\r\n     * @memberof BlockIntent\r\n     */\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    /**\r\n     * Getter for the Block of the Block Intent\r\n     *\r\n     * @returns {typeof Block}\r\n     * @memberof BlockIntent\r\n     */\r\n    public getBlock(): typeof Block {\r\n        return this.block;\r\n    }\r\n}\r\n\r\n/**\r\n * A Service Manager designed to handle only Block Services, it refreshes on Page Change\r\n *\r\n * @export\r\n * @class BlockManager\r\n * @extends {AdvancedManager<number, BlockIntent>}\r\n */\r\nexport class BlockManager extends AdvancedManager<number, BlockIntent> {\r\n    /**\r\n     * A list of Active Blocks \r\n     *\r\n     * @protected\r\n     * @type {AdvancedManager<number, Block>}\r\n     * @memberof BlockManager\r\n     */\r\n    protected activeBlocks: AdvancedManager<number, Block>;\r\n\r\n    /**\r\n     * Creates an instance of BlockManager.\r\n     *\r\n     * @param {App} app\r\n     * @memberof BlockManager\r\n     */\r\n    constructor(app: App) {\r\n        super(app);\r\n        this.activeBlocks = new AdvancedManager(app);\r\n    }\r\n\r\n\t/**\r\n\t * Initialize all Blocks\r\n\t *\r\n\t * @memberof BlockManager\r\n\t */\r\n    public init() {\r\n        this.forEach((intent: BlockIntent) => {\r\n            let name: string = intent.getName();\r\n            let block: typeof Block = intent.getBlock();\r\n            let selector: string = `[${this.getConfig(\"blockAttr\", false)}=\"${name}\"]`;\r\n            let rootElements: Node[] = [...document.querySelectorAll(selector)];\r\n\r\n            for (let i = 0, len = rootElements.length; i < len; i++) {\r\n                let newInstance: Block = new block();\r\n                newInstance.init(name, rootElements[i] as HTMLElement, selector, i);\r\n                this.activeBlocks.set(i, newInstance);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Getter for activeBlocks in BlockManager\r\n     *\r\n     * @returns\r\n     * @memberof BlockManager\r\n     */\r\n    public getActiveBlocks() {\r\n        return this.activeBlocks;\r\n    }\r\n\r\n\t/**\r\n\t * Call the boot method for all Blocks\r\n\t *\r\n\t * @returns Promise<void>\r\n\t * @memberof BlockManager\r\n\t */\r\n    public async boot(): Promise<void> {\r\n        await this.activeBlocks.asyncMethodCall(\"boot\");\r\n    }\r\n\r\n    /**\r\n     * Refreshes DOM Elements\r\n     *\r\n     * @memberof BlockManager\r\n     */\r\n    public refresh() {\r\n        const EventEmitter = this.getApp().getEmitter();\r\n        EventEmitter.on(\"BEFORE_TRANSITION_OUT\", () => {\r\n            this.stop();\r\n        });\r\n\r\n        EventEmitter.on(\"AFTER_TRANSITION_IN\", () => {\r\n            this.init();\r\n            this.boot();\r\n            // this.activeBlocks.methodCall(\"initEvents\");\r\n        });\r\n    }\r\n\r\n\t/**\r\n\t * Call the initEvents method for all Blocks\r\n\t *\r\n\t * @returns BlockManager\r\n\t * @memberof BlockManager\r\n\t */\r\n    public initEvents(): BlockManager {\r\n        this.activeBlocks.methodCall(\"initEvents\");\r\n        this.refresh();\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Call the stopEvents method for all Blocks\r\n\t *\r\n\t * @returns BlockManager\r\n\t * @memberof BlockManager\r\n\t */\r\n    public stopEvents(): BlockManager {\r\n        this.activeBlocks.methodCall(\"stopEvents\");\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Call the stop method for all Blocks\r\n\t *\r\n\t * @returns BlockManager\r\n\t * @memberof BlockManager\r\n\t */\r\n    public stop(): BlockManager {\r\n        this.activeBlocks.methodCall(\"stop\");\r\n        this.activeBlocks.clear();\r\n        return this;\r\n    }\r\n}"]}
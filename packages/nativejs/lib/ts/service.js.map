{"version":3,"sources":["service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAO5D;;;;;GAKG;AACH,MAAM,OAAO,OAAQ,SAAQ,WAAW;IA8CvC;;;;OAIG;IACO,OAAO;QACV,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAClC,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QACrC,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QACvC,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QACxC,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC,cAAc,EAAE,CAAC;IAClD,CAAC;IAED,6BAA6B;IACtB,IAAI,KAAW,CAAC;IAEvB,oBAAoB;IACb,UAAU,KAAW,CAAC;IAE7B,cAAc;IACP,UAAU,KAAW,CAAC;IAE7B,gBAAgB;IACT,IAAI;QACP,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;CACJ;AAED;;;;;;GAMG;AACH,MAAM,OAAO,cAAe,SAAQ,eAAgC;IAChE;;;;;OAKG;IACH,YAAY,GAAQ;QAChB,KAAK,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;IAEJ;;;;;OAKG;IACO,KAAK,CAAC,IAAI;QACb,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IAEJ;;;;;OAKG;IACO,UAAU;QACb,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEJ;;;;;OAKG;IACO,UAAU;QACb,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEJ;;;;;OAKG;IACO,IAAI;QACP,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACxB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","file":"../service.js","sourcesContent":["import { AdvancedManager, ManagerItem } from \"./manager.js\";\r\nimport { EventEmitter } from \"@okikio/event-emitter\";\r\nimport { TransitionManager } from \"./transition.js\";\r\nimport { HistoryManager } from \"./history.js\";\r\nimport { PageManager } from \"./page.js\";\r\nimport { App } from \"./app.js\";\r\n\r\n/**\r\n * Controls specific kinds of actions that require JS\r\n *\r\n * @export\r\n * @class Service\r\n */\r\nexport class Service extends ManagerItem {\r\n\t/**\r\n\t * Stores access to the App class's EventEmitter\r\n\t *\r\n\t * @protected\r\n\t * @type EventEmitter\r\n\t * @memberof Service\r\n\t */\r\n    protected EventEmitter: EventEmitter;\r\n\r\n\t/**\r\n\t * Stores access to the App class's PageManager\r\n\t *\r\n\t * @protected\r\n\t * @type PageManager\r\n\t * @memberof Service\r\n\t */\r\n    protected PageManager: PageManager;\r\n\r\n\t/**\r\n\t * Stores access to the App class's HistoryManager\r\n\t *\r\n\t * @protected\r\n\t * @type HistoryManager\r\n\t * @memberof Service\r\n\t */\r\n    protected HistoryManager: HistoryManager;\r\n\r\n\t/**\r\n\t * Stores the ServiceManager the service is install on\r\n\t *\r\n\t * @protected\r\n\t * @type ServiceManager\r\n\t * @memberof Service\r\n\t */\r\n    protected ServiceManager: ServiceManager;\r\n\r\n\t/**\r\n\t * Stores access to the App's TransitionManager\r\n\t *\r\n\t * @protected\r\n\t * @type TransitionManager\r\n\t * @memberof Service\r\n\t */\r\n    protected TransitionManager: TransitionManager;\r\n\r\n\t/**\r\n\t * Method is run once when Service is installed on a ServiceManager\r\n     *\r\n\t * @memberof Service\r\n\t */\r\n    public install(): void {\r\n        let app = this.manager.getApp();\r\n        this.PageManager = app.getPages();\r\n        this.EventEmitter = app.getEmitter();\r\n        this.HistoryManager = app.getHistory();\r\n        this.ServiceManager = app.getServices();\r\n        this.TransitionManager = app.getTransitions();\r\n    }\r\n\r\n    // Called on start of Service\r\n    public boot(): void { }\r\n\r\n    // Initialize events\r\n    public initEvents(): void { }\r\n\r\n    // Stop events\r\n    public stopEvents(): void { }\r\n\r\n    // Stop services\r\n    public stop(): void {\r\n        this.stopEvents();\r\n    }\r\n}\r\n\r\n/**\r\n * The Service Manager controls the lifecycle of all services in an App\r\n *\r\n * @export\r\n * @class ServiceManager\r\n * @extends {AdvancedManager<number, Service>}\r\n */\r\nexport class ServiceManager extends AdvancedManager<number, Service> {\r\n    /**\r\n     * Creates an instance of ServiceManager.\r\n     *\r\n     * @param {App} app\r\n     * @memberof ServiceManager\r\n     */\r\n    constructor(app: App) {\r\n        super(app);\r\n    }\r\n\r\n\t/**\r\n\t * Call the boot method for all Services\r\n\t *\r\n\t * @returns Promise<void>\r\n\t * @memberof ServiceManager\r\n\t */\r\n    public async boot(): Promise<void> {\r\n        await this.asyncMethodCall(\"boot\");\r\n    }\r\n\r\n\t/**\r\n\t * Call the initEvents method for all Services\r\n\t *\r\n\t * @returns ServiceManager\r\n\t * @memberof ServiceManager\r\n\t */\r\n    public initEvents(): ServiceManager {\r\n        this.methodCall(\"initEvents\");\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Call the stopEvents method for all Services\r\n\t *\r\n\t * @returns ServiceManager\r\n\t * @memberof ServiceManager\r\n\t */\r\n    public stopEvents(): ServiceManager {\r\n        this.methodCall(\"stopEvents\");\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Call the stop method for all Services\r\n\t *\r\n\t * @returns ServiceManager\r\n\t * @memberof ServiceManager\r\n\t */\r\n    public stop(): ServiceManager {\r\n        this.methodCall(\"stop\");\r\n        return this;\r\n    }\r\n}"]}
{"version":3,"sources":["app.ts"],"names":[],"mappings":"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","file":"../app.js","sourcesContent":["import { EventEmitter, ListenerCallback, EventInput } from \"@okikio/event-emitter\";\r\nimport { TransitionManager, Transition } from \"./transition.js\";\r\nimport { BlockManager, BlockIntent, Block } from \"./block.js\";\r\nimport { HistoryManager, State, IState } from \"./history.js\";\r\nimport { ServiceManager, Service } from \"./service.js\";\r\nimport { PageManager, Page } from \"./page.js\";\r\nimport { CONFIG, ICONFIG } from \"./config.js\";\r\n\r\n/**\r\n * The App class starts the entire process, it controls all managers and all services\r\n *\r\n * @export\r\n * @class App\r\n */\r\nexport class App {\r\n    /**\r\n     * A new instance of the HistoryManager\r\n     *\r\n     * @protected\r\n     * @type HistoryManager\r\n     * @memberof App\r\n     */\r\n    protected history: HistoryManager;\r\n\r\n    /**\r\n     * A new instance of the TransitionManager\r\n     *\r\n     * @protected\r\n     * @type TransitionManager\r\n     * @memberof App\r\n     */\r\n    protected transitions: TransitionManager;\r\n\r\n    /**\r\n     * A new instance of the ServiceManager\r\n     *\r\n     * @protected\r\n     * @type ServiceManager\r\n     * @memberof App\r\n     */\r\n    protected services: ServiceManager;\r\n\r\n    /**\r\n     * A new instance of the BlockManager\r\n     *\r\n     * @protected\r\n     * @type BlockManager\r\n     * @memberof App\r\n     */\r\n    protected blocks: BlockManager;\r\n\r\n    /**\r\n     * A new instance of an EventEmitter\r\n     *\r\n     * @protected\r\n     * @type EventEmitter\r\n     * @memberof App\r\n     */\r\n    protected emitter: EventEmitter;\r\n\r\n    /**\r\n     * A new instance of the PageManager\r\n     *\r\n     * @protected\r\n     * @type PageManager\r\n     * @memberof App\r\n     */\r\n    protected pages: PageManager;\r\n\r\n    /**\r\n     * The current Configuration's for the framework\r\n     *\r\n     * @protected\r\n     * @type CONFIG\r\n     * @memberof App\r\n     */\r\n    protected config: CONFIG;\r\n\r\n    /**\r\n     * Creates an instance of App.\r\n     *\r\n     * @param {(ICONFIG | CONFIG)} [config={}]\r\n     * @memberof App\r\n     */\r\n    constructor(config: object = {}) {\r\n        this.register(config);\r\n    }\r\n\r\n    /**\r\n     * For registering all managers and the configurations\r\n     *\r\n     * @param {(ICONFIG | CONFIG)} [config={}]\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public register(config: ICONFIG | CONFIG = {}): App {\r\n        this.config = config instanceof CONFIG ? config : new CONFIG(config);\r\n        this.transitions = new TransitionManager(this);\r\n        this.services = new ServiceManager(this);\r\n        this.blocks = new BlockManager(this);\r\n        this.history = new HistoryManager();\r\n        this.pages = new PageManager(this);\r\n        this.emitter = new EventEmitter();\r\n\r\n        let handler = (() => {\r\n            document.removeEventListener(\"DOMContentLoaded\", handler);\r\n            window.removeEventListener(\"load\", handler);\r\n            this.emitter.emit(\"READY ready\");\r\n        }).bind(this);\r\n\r\n        document.addEventListener(\"DOMContentLoaded\", handler);\r\n        window.addEventListener(\"load\", handler);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the current configurations for the framework\r\n     *\r\n     * @param {...any} args\r\n     * @returns any\r\n     * @memberof App\r\n     */\r\n    public getConfig(...args: any): any {\r\n        return this.config.getConfig(...args);\r\n    }\r\n\r\n    /**\r\n     * Return the App's EventEmitter\r\n     *\r\n     * @returns EventEmitter\r\n     * @memberof App\r\n     */\r\n    public getEmitter(): EventEmitter {\r\n        return this.emitter;\r\n    }\r\n\r\n    /**\r\n     * Returns the App's BlockManager\r\n     *\r\n     * @returns BlockManager\r\n     * @memberof App\r\n     */\r\n    public getBlocks(): BlockManager {\r\n        return this.blocks;\r\n    }\r\n\r\n    /**\r\n     * Return the App's ServiceManager\r\n     *\r\n     * @returns ServiceManager\r\n     * @memberof App\r\n     */\r\n    public getServices(): ServiceManager {\r\n        return this.services;\r\n    }\r\n\r\n    /**\r\n     * Return the App's PageManager\r\n     *\r\n     * @returns PageManager\r\n     * @memberof App\r\n     */\r\n    public getPages(): PageManager {\r\n        return this.pages;\r\n    }\r\n\r\n    /**\r\n     * Return the App's TransitionManager\r\n     *\r\n     * @returns TransitionManager\r\n     * @memberof App\r\n     */\r\n    public getTransitions(): TransitionManager {\r\n        return this.transitions;\r\n    }\r\n\r\n    /**\r\n     * Return the App's HistoryManager\r\n     *\r\n     * @returns HistoryManager\r\n     * @memberof App\r\n     */\r\n    public getHistory(): HistoryManager {\r\n        return this.history;\r\n    }\r\n\r\n    /**\r\n     * Returns a Block Intent Object from the App's instance of the BlockManager\r\n     *\r\n     * @param {number} key\r\n     * @returns IBlockIntent\r\n     * @memberof App\r\n     */\r\n    public getBlock(key: number): BlockIntent {\r\n        return this.blocks.get(key);\r\n    }\r\n\r\n    /**\r\n     * Returns an instance of a Block from the App's instance of the BlockManager\r\n     *\r\n     * @param {number} key\r\n     * @returns Block\r\n     * @memberof App\r\n     */\r\n    public getActiveBlock(key: number): Block {\r\n        return this.blocks.getActiveBlocks().get(key);\r\n    }\r\n\r\n    /**\r\n     * Returns a Service from the App's instance of the ServiceManager\r\n     *\r\n     * @param {number} key\r\n     * @returns Service\r\n     * @memberof App\r\n     */\r\n    public getService(key: number): Service {\r\n        return this.services.get(key);\r\n    }\r\n\r\n    /**\r\n     * Returns a Transition from the App's instance of the TransitionManager\r\n     *\r\n     * @param {string} key\r\n     * @returns Transition\r\n     * @memberof App\r\n     */\r\n    public getTransition(key: string): Transition {\r\n        return this.transitions.get(key);\r\n    }\r\n\r\n    /**\r\n     * Returns a State from the App's instance of the HistoryManager\r\n     *\r\n     * @param {number} key\r\n     * @returns State\r\n     * @memberof App\r\n     */\r\n    public getState(key: number): State {\r\n        return this.history.get(key);\r\n    }\r\n\r\n    /**\r\n     * Based on the type, it will return either a Transition, a Service, or a State from their respective Managers\r\n     *\r\n     * @param {(\"service\" | \"transition\" | \"state\" | \"block\" | string)} type\r\n     * @param {any} key\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public get(type: \"service\" | \"transition\" | \"state\" | \"block\" | string, key: any): App {\r\n        switch (type.toLowerCase()) {\r\n            case \"service\":\r\n                this.getService(key);\r\n                break;\r\n            case \"transition\":\r\n                this.getTransition(key);\r\n                break;\r\n            case \"state\":\r\n                this.getState(key);\r\n                break;\r\n            case \"block\":\r\n                this.getActiveBlock(key);\r\n                break;\r\n            default:\r\n                throw `Error: can't get type '${type}', it is not a recognized type. Did you spell it correctly.`;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a Page\r\n     *\r\n     * @param {string} url\r\n     * @returns Promise<Page>\r\n     * @memberof App\r\n     */\r\n    public async loadPage(url: string): Promise<Page> {\r\n        return await this.pages.load(url);\r\n    }\r\n\r\n    /**\r\n     * Based on the type, it will return load a Transition, a Service, a State, or a Page from their respective Managers\r\n     *\r\n     * @param {(\"page\" | string)} type\r\n     * @param {any} key\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public async load(type: \"page\" | string, key: any): Promise<any> {\r\n        switch (type.toLowerCase()) {\r\n            case \"page\":\r\n                return await this.loadPage(key);\r\n            default:\r\n                return Promise.resolve(this.get(type, key));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a Block Intent to the App's instance of the BlockManager\r\n     *\r\n     * @param {BlockIntent} blockIntent\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public addBlock(blockIntent: BlockIntent): App {\r\n        this.blocks.add(blockIntent);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a Service to the App's instance of the ServiceManager\r\n     *\r\n     * @param {Service} service\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public addService(service: Service): App {\r\n        this.services.add(service);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a Transition to the App's instance of the TransitionManager\r\n     *\r\n     * @param {Transition} transition\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public addTransition(transition: Transition): App {\r\n        this.transitions.add(transition);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a State to the App's instance of the HistoryManager\r\n     *\r\n     * @param {(IState | State)} state\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public addState(state: IState | State): App {\r\n        this.history.addState(state);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Based on the type, it will add either a Transition, a Service, or a State to their respective Managers\r\n     *\r\n     * @param {(\"service\" | \"transition\" | \"state\")} type\r\n     * @param {any} value\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public add(type: \"service\" | \"transition\" | \"state\" | \"block\", value: any): App {\r\n        switch (type.toLowerCase()) {\r\n            case \"service\":\r\n                this.addService(value);\r\n                break;\r\n            case \"transition\":\r\n                this.addTransition(value);\r\n                break;\r\n            case \"state\":\r\n                this.addState(value);\r\n                break;\r\n            case \"block\":\r\n                this.addBlock(value);\r\n                break;\r\n            default:\r\n                throw `Error: can't add type '${type}', it is not a recognized type. Did you spell it correctly.`;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Start the App and the ServiceManager\r\n     *\r\n     * @returns Promise<App>\r\n     * @memberof App\r\n     */\r\n    public async boot(): Promise<App> {\r\n        this.blocks.init();\r\n        await this.services.boot();\r\n        await this.blocks.boot();\r\n        this.services.initEvents();\r\n        this.blocks.initEvents();\r\n        this.transitions.initEvents();\r\n        return Promise.resolve(this);\r\n    }\r\n\r\n    /**\r\n     * Stop the App and the ServiceManager\r\n     *\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public stop(): App {\r\n        this.services.stop();\r\n        this.blocks.stop();\r\n        this.transitions.stopEvents();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the current page in the PageManager\r\n     *\r\n     * @returns Page\r\n     * @memberof App\r\n     */\r\n    public currentPage(): Page {\r\n        let currentState = this.history.last();\r\n        return this.pages.get(currentState.getURLPathname());\r\n    }\r\n\r\n    /**\r\n     * A shortcut to the App EventEmitter on method\r\n     *\r\n     * @param {EventInput} events\r\n     * @param {ListenerCallback} callback\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public on(events: EventInput, callback?: ListenerCallback): App {\r\n        this.emitter.on(events, callback, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * A shortcut to the App EventEmitter off method\r\n     *\r\n     * @param {EventInput} events\r\n     * @param {ListenerCallback} callback\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public off(events: EventInput, callback?: ListenerCallback): App {\r\n        this.emitter.off(events, callback, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * A shortcut to the App EventEmitter once method\r\n     *\r\n     * @param {string} events\r\n     * @param {ListenerCallback} callback\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public once(events: string, callback: ListenerCallback): App {\r\n        this.emitter.once(events, callback, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * A shortcut to the App EventEmitter emit method\r\n     *\r\n     * @param {(string | any[])} events\r\n     * @param {...any} args\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public emit(events: string | any[], ...args: any): App {\r\n        this.emitter.emit(events, ...args);\r\n        return this;\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["framework.ts"],"names":[],"mappings":"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","file":"../framework.js","sourcesContent":["import { InViewBlockIntent } from \"./blocks.js\";\r\nimport { PJAX, App, _URL } from \"../../lib/core.js\";\r\nimport { getTheme, setTheme, mediaTheme } from \"./theme.js\";\r\nimport { Splashscreen, IntroAnimation } from \"./services.js\";\r\nimport { Fade, Slide, SlideLeft, SlideRight, BigTransition } from \"./transitions.js\";\r\n\r\nconst html = document.querySelector(\"html\");\r\ntry {\r\n    let theme = getTheme();\r\n    if (theme === null) theme = mediaTheme();\r\n    theme && html.setAttribute(\"theme\", theme);\r\n} catch (e) {\r\n    console.warn(\"Theming isn't available on this browser.\");\r\n}\r\n\r\n// Get theme from html tag, if it has a theme or get it from localStorage\r\nlet themeGet = () => {\r\n    let themeAttr = html.getAttribute(\"theme\");\r\n    if (themeAttr && themeAttr.length) {\r\n        return themeAttr;\r\n    }\r\n\r\n    return getTheme();\r\n};\r\n\r\n// Set theme in localStorage, as well as in the html tag\r\nlet themeSet = (theme: string) => {\r\n    html.setAttribute(\"theme\", theme);\r\n    setTheme(theme);\r\n};\r\n\r\n// On theme switcher button click (mouseup is a tiny bit more efficient) toggle the theme between dark and light mode\r\n// on(_themeSwitcher, \"mouseup\", () => {\r\n//     themeSet(themeGet() === \"dark\" ? \"light\" : \"dark\");\r\n// });\r\n\r\nwindow.matchMedia('(prefers-color-scheme: dark)').addListener(e => {\r\n    themeSet(e.matches ? \"dark\" : \"light\");\r\n});\r\n\r\nconst app = new App();\r\napp\r\n    .add(\"service\", new PJAX())\r\n    .add(\"service\", new Splashscreen())\r\n    .add(\"service\", new IntroAnimation())\r\n    .add(\"block\", InViewBlockIntent)\r\n    .add(\"transition\", new Fade())\r\n    .add(\"transition\", new BigTransition())\r\n    .add(\"transition\", new Slide())\r\n    .add(\"transition\", new SlideLeft())\r\n    .add(\"transition\", new SlideRight());\r\n\r\n(async () => {\r\n    let navbarLinks = () => {\r\n        let { href } = window.location;\r\n        let navLink = document.querySelectorAll(\".navbar .nav-link\");\r\n\r\n        for (let item of navLink) {\r\n            let URLmatch = _URL.equal((item as HTMLAnchorElement).href, href);\r\n            let isActive = item.classList.contains(\"active\");\r\n            if (!(URLmatch && isActive)) {\r\n                item.classList[URLmatch ? \"add\" : \"remove\"](\"active\");\r\n            }\r\n        }\r\n    };\r\n\r\n    try {\r\n        await app.boot();\r\n    } catch (err) {\r\n        console.warn(\"App boot failed\", err);\r\n    }\r\n\r\n    app.on({\r\n        \"READY\": navbarLinks,\r\n        \"GO\": navbarLinks\r\n    });\r\n})();"]}
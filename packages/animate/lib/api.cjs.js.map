{
  "version": 3,
  "sources": ["../src/api.ts", "../../manager/src/api.ts", "../../emitter/src/api.ts"],
  "sourcesContent": ["import { EventEmitter, EventInput, ListenerCallback } from \"@okikio/emitter\";\nimport { Manager } from \"@okikio/manager\";\n\n// DOM\nexport type AnimationTarget = string | Node | NodeList | HTMLCollection | HTMLElement[] | AnimationTarget[];\nexport const getElements = (selector: string | Node): Node[] => {\n    return typeof selector === \"string\" ? Array.from(document.querySelectorAll(selector as string)) : [selector];\n};\n\nconst flatten = (arr: AnimationTarget[]) => [].concat(...arr);\nexport const getTargets = (targets: AnimationTarget): Node[] => {\n    if (Array.isArray(targets)) {\n        return flatten((targets as AnimationTarget[]).map(getTargets));\n    }\n    if (typeof targets == \"string\" || targets instanceof Node)\n        return getElements(targets);\n    if (targets instanceof NodeList || targets instanceof HTMLCollection)\n        return Array.from(targets);\n    return [];\n};\n\n// VALUES\nexport type closureArgs = [number, number, HTMLElement];\nexport type closure = ((index?: number, total?: number, element?: HTMLElement) => (genericTypes[] | void)) | any;\nexport const computeValue = (value: closure, args: closureArgs, context: Animate) => {\n    if (typeof value === \"function\") {\n        return value.apply(context, args);\n    } else { return value; }\n};\n\nexport const mapObject = (obj: object, args: closureArgs, options: Animate): any => {\n    let key: string, value: any, result = {};\n    let keys = Object.keys(obj);\n    for (let i = 0, len = keys.length; i < len; i++) {\n        key = keys[i];\n        value = obj[key];\n        result[key] = computeValue(value, args, options);\n    }\n\n    return result;\n};\n\n/** From: [https://easings.net] */\nexport const easings = {\n    \"in\": \"ease-in\",\n    \"out\": \"ease-out\",\n    \"in-out\": \"ease-in-out\",\n\n    // Sine\n    \"in-sine\": \"cubic-bezier(0.47, 0, 0.745, 0.715)\",\n    \"out-sine\": \"cubic-bezier(0.39, 0.575, 0.565, 1)\",\n    \"in-out-sine\": \"cubic-bezier(0.445, 0.05, 0.55, 0.95)\",\n\n    // Quad\n    \"in-quad\": \"cubic-bezier(0.55, 0.085, 0.68, 0.53)\",\n    \"out-quad\": \"cubic-bezier(0.25, 0.46, 0.45, 0.94)\",\n    \"in-out-quad\": \"cubic-bezier(0.455, 0.03, 0.515, 0.955)\",\n\n    // Cubic\n    \"in-cubic\": \"cubic-bezier(0.55, 0.055, 0.675, 0.19)\",\n    \"out-cubic\": \"cubic-bezier(0.215, 0.61, 0.355, 1)\",\n    \"in-out-cubic\": \"cubic-bezier(0.645, 0.045, 0.355, 1)\",\n\n    // Quart\n    \"in-quart\": \"cubic-bezier(0.895, 0.03, 0.685, 0.22)\",\n    \"out-quart\": \"cubic-bezier(0.165, 0.84, 0.44, 1)\",\n    \"in-out-quart\": \"cubic-bezier(0.77, 0, 0.175, 1)\",\n\n    // Quint\n    \"in-quint\": \"cubic-bezier(0.755, 0.05, 0.855, 0.06)\",\n    \"out-quint\": \"cubic-bezier(0.23, 1, 0.32, 1)\",\n    \"in-out-quint\": \"cubic-bezier(0.86, 0, 0.07, 1)\",\n\n    // Expo\n    \"in-expo\": \"cubic-bezier(0.95, 0.05, 0.795, 0.035)\",\n    \"out-expo\": \"cubic-bezier(0.19, 1, 0.22, 1)\",\n    \"in-out-expo\": \"cubic-bezier(1, 0, 0, 1)\",\n\n    // Circ\n    \"in-circ\": \"cubic-bezier(0.6, 0.04, 0.98, 0.335)\",\n    \"out-circ\": \"cubic-bezier(0.075, 0.82, 0.165, 1)\",\n    \"in-out-circ\": \"cubic-bezier(0.785, 0.135, 0.15, 0.86)\",\n\n    // Back\n    \"in-back\": \"cubic-bezier(0.6, -0.28, 0.735, 0.045)\",\n    \"out-back\": \"cubic-bezier(0.175, 0.885, 0.32, 1.275)\",\n    \"in-out-back\": \"cubic-bezier(0.68, -0.55, 0.265, 1.55)\"\n};\n\nexport const getEase = (ease: string) => {\n    return /^(in|out)/.test(ease) ? easings[ease] : ease;\n};\n\nexport type genericTypes = genericTypes[] | boolean | object | string | number | closure | null | undefined;\nexport interface AnimationOptions {\n    target?: AnimationTarget,\n\n    speed?: number,\n    autoplay?: boolean,\n    options?: AnimationOptions,\n    delay?: number | closure,\n    easing?: string | closure,\n    endDelay?: number | closure,\n    duration?: number | closure,\n    keyframes?: Keyframe[] | object[] | closure,\n    loop?: number | boolean | closure, // iterations: number,\n    onfinish?: (element?: HTMLElement, index?: number, total?: number, animation?: Animation) => any,\n    fillMode?: \"none\" | \"forwards\" | \"backwards\" | \"both\" | \"auto\" | closure,\n    direction?: \"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\" | closure,\n    extend?: EffectTiming,\n    [property: string]: genericTypes;\n};\n\nexport const DefaultAnimationOptions: AnimationOptions = {\n    keyframes: [],\n\n    loop: 1, // iterations: number,\n    delay: 0,\n    speed: 1,\n    endDelay: 0,\n    easing: \"ease\",\n    autoplay: true,\n    duration: 1000,\n    fillMode: \"auto\",\n    direction: \"normal\",\n    extend: {}\n};\n\nexport type AnimationEvents = \"update\" | \"play\" | \"pause\" | \"start\" | \"begin\" | \"complete\" | \"finish\" | \"error\" | \"stop\";\n\n/** You can check it out here: https://codepen.io/okikio/pen/qBbdGaW?editors=0011 */\nexport class Animate {\n    /**\n     * Stores the options for the current animation\n     */\n    public options: AnimationOptions = {};\n\n    /**\n     * The Array of Elements to Animate\n     */\n    public targets: Node[] = [];\n\n    /**\n     * The properties to animate\n     */\n    public properties: object = {};\n\n    /**\n     * A Manager of Animations\n     */\n    public animations: Manager<HTMLElement, Animation> = new Manager();\n\n    /**\n     * The total duration of all Animation's\n     */\n    public totalDuration: number = 0;\n\n    /**\n     * The smallest delay out of all Animation's\n     */\n    public minDelay: number = 0;\n\n    /**\n     * The options for individual animations\n     */\n    public computedOptions: Manager<Animation, AnimationOptions> = new Manager();\n\n    /**\n     * The Element the main animation uses\n     */\n    public mainElement: HTMLElement;\n\n    /**\n     * Stores an animation that runs on the total duration of the all other Animations, and as such it's the main Animation\n     */\n    public mainAnimation: Animation;\n\n    /**\n     * Stores request frame calls\n     */\n    public animationFrame: number;\n\n    /**\n     * An event emitter\n     */\n    public emitter: EventEmitter = new EventEmitter();\n\n    /**\n     * Returns a promise that is fulfilled when the mainAnimation is finished\n     */\n    public promise: Promise<AnimationOptions>;\n    constructor(options: AnimationOptions = {}) {\n        try {\n            let { options: animation, ...rest } = options;\n            let oldOptions = animation instanceof Animate ? animation.getOptions() : (Array.isArray(animation) ? animation?.[0]?.getOptions() : animation);\n            this.options = Object.assign({}, DefaultAnimationOptions, oldOptions, rest);\n            this.loop = this.loop.bind(this);\n\n            let {\n                loop,\n                delay,\n                speed,\n                easing,\n                endDelay,\n                duration,\n                direction,\n                fillMode,\n                onfinish,\n                target,\n                keyframes,\n                autoplay,\n                extend,\n                ...properties\n            } = this.options;\n\n            this.mainElement = document.createElement(\"div\");\n            this.targets = getTargets(target);\n            this.properties = properties;\n\n            let delays = [];\n            let len = this.targets.length;\n            let animationKeyframe: Keyframe[] | PropertyIndexedKeyframes;\n            for (let i = 0; i < len; i++) {\n                let target = this.targets[i] as HTMLElement;\n                let animationOptions: AnimationOptions = {\n                    easing: typeof easing == \"string\" ? getEase(easing) : easing,\n                    iterations: loop === true ? Infinity : (loop as number),\n                    direction,\n                    endDelay,\n                    duration,\n                    delay,\n                    fill: fillMode,\n                    ...extend\n                };\n\n                // Accept keyframes as a keyframes Object, or a method,\n                // if there are no animations in the keyframes array,\n                // uses css properties from the options object\n                let arrKeyframes = computeValue((keyframes as Keyframe[]), [i, len, target], this);\n                animationKeyframe = arrKeyframes.length ? arrKeyframes :\n                    (this.properties as PropertyIndexedKeyframes);\n\n                // Allows the use of functions as the values, for both the keyframes and the animation object\n                // It adds the capability of advanced stagger animation, similar to the anime js stagger functions\n                animationOptions = mapObject(animationOptions, [i, len, target], this);\n                if (!(arrKeyframes.length > 0))\n                    animationKeyframe = mapObject(animationKeyframe, [i, len, target], this);\n\n                // Set the Animate classes duration to be the Animation with the largest totalDuration\n                let tempDurations = animationOptions.delay +\n                    (animationOptions.duration * animationOptions.iterations) +\n                    animationOptions.endDelay;\n                if (this.totalDuration < tempDurations) this.totalDuration = tempDurations;\n\n                // Add animation to the Animations Set\n                let animation = target.animate(animationKeyframe, animationOptions as KeyframeAnimationOptions);\n\n                // Support for on finish\n                animation.onfinish = () => {\n                    typeof onfinish == \"function\" && onfinish.call(this, target, i, len, animation);\n                    this.emit(\"finish\", target, i, len, animation);\n                };\n\n                // The calculated options for each individual option\n                this.computedOptions.set(animation, animationOptions);\n                this.animations.set(target, animation);\n                delays.push(animationOptions.delay);\n            }\n\n            this.mainAnimation = this.mainElement.animate([\n                { opacity: \"0\" },\n                { opacity: \"1\" }\n            ], {\n                // Why waste performance on an animation no one can see?\n                duration: this.totalDuration,\n                easing: \"linear\"\n            });\n\n            this.minDelay = Math.min(...delays);\n            this.setSpeed(speed);\n            if (autoplay) this.play();\n            else this.pause();\n\n            this.promise = this.newPromise();\n            this.mainAnimation.onfinish = () => {\n                this.emit(\"complete\", this);\n                window.cancelAnimationFrame(this.animationFrame);\n            };\n        } catch (err) {\n            this.emit(\"error\", err);\n        }\n    }\n\n    /**\n     * Returns a new Promise that is resolve when this.finish is called\n     */\n    public newPromise(): Promise<AnimationOptions> {\n        return new Promise((resolve, reject) => {\n            /*\n                Note that the `this` keyword is in an Array when it is resolved,\n                this is due to Promises not wanting to resolve references,\n                so, you can't resolve `this` directly, so, I chose to resolve `this` in an\n                Array\n            */\n            this.on(\"complete\", () => resolve([this]));\n            this.on(\"error\", err => reject(err));\n        });\n    }\n\n    /**\n     * Fulfills the this.promise Promise\n     */\n    public then(\n        onFulfilled?: (value?: any) => any,\n        onRejected?: (reason?: any) => any\n    ): Animate {\n        onFulfilled = onFulfilled?.bind(this);\n        onRejected = onRejected?.bind(this);\n        this.promise.then(onFulfilled, onRejected);\n        return this;\n    }\n\n    /**\n     * Catches error that occur in the this.promise Promise\n     */\n    public catch(onRejected: (reason?: any) => any): Animate {\n        onRejected = onRejected?.bind(this);\n        this.promise.catch(onRejected);\n        return this;\n    }\n\n    /**\n     * If you don't care if the this.promise Promise has either been rejected or resolved\n     */\n    public finally(onFinally: () => any): Animate {\n        onFinally = onFinally?.bind(this);\n        this.promise.finally(onFinally);\n        return this;\n    }\n\n    /**\n     * Represents an Animation Frame Loop\n     */\n    public loop(): void {\n        this.animationFrame = window.requestAnimationFrame(this.loop);\n        this.emit(\"update\", this.getProgress(), this);\n    }\n\n    /**\n     * Calls a method that affects all animations including the mainAnimation; the method only allows the animation parameter\n    */\n    public all(method: (animation: Animation) => void) {\n        method(this.mainAnimation);\n        this.animations.forEach(animation => method(animation));\n        return this;\n    }\n\n    /**\n     * Register the begin event\n     */\n    protected beginEvent() {\n        if (this.getProgress() == 0) {\n            let timer: number | void = window.setTimeout(() => {\n                this.emit(\"begin\", this);\n                timer = window.clearTimeout(timer as number);\n            }, this.minDelay);\n        }\n    }\n\n    /**\n     * Play Animation\n     */\n    public play(): Animate {\n        let playstate = this.getPlayState();\n        this.beginEvent();\n        this.animationFrame = requestAnimationFrame(this.loop);\n        this.all(anim => anim.play());\n        this.emit(\"play\", playstate, this);\n        return this;\n    }\n\n    /**\n     * Pause Animation\n     */\n    public pause(): Animate {\n        let playstate = this.getPlayState();\n        this.all(anim => anim.pause());\n        window.cancelAnimationFrame(this.animationFrame);\n        this.emit(\"pause\", playstate, this);\n        return this;\n    }\n\n    /**\n     * Reset all Animations\n     */\n    public reset() {\n        this.setProgress(0);\n        this.beginEvent();\n\n        if (this.options.autoplay) this.play();\n        else this.pause();\n        return this;\n    }\n\n    /**\n     * Cancels all Animations\n     */\n    public cancel() {\n        this.all(anim => anim.cancel());\n        window.cancelAnimationFrame(this.animationFrame);\n        return this;\n    }\n\n    /**\n     * Force complete all Animations\n     */\n    public finish() {\n        this.all(anim => anim.finish());\n        window.cancelAnimationFrame(this.animationFrame);\n        return this;\n    }\n\n    /**\n     * Cancels & Clears all Animations\n     */\n    public stop() {\n        this.cancel();\n        this.animations.clear();\n        while (this.targets.length) this.targets.pop();\n        this.mainElement = undefined;\n        this.emit(\"stop\");\n    }\n\n    /**\n     * Returns an Array of targets\n     */\n    public getTargets(): Node[] {\n        return this.targets;\n    }\n\n    /**\n     * Get a specific Animation from an Animate instance\n     */\n    public getAnimation(element: HTMLElement): Animation {\n        return this.animations.get(element);\n    }\n\n    /**\n     * Returns the timings of an Animation, given a target\n     * E.g. { duration, endDelay, delay, iterations, iterationStart, direction, easing, fill, etc... }\n     */\n    public getTiming(target: HTMLElement | Animation): AnimationOptions & EffectTiming {\n        let animation = target instanceof Animation ? target : this.getAnimation(target);\n        let keyframeOptions = this.computedOptions.get(animation) ?? {};\n        let timings = animation.effect?.getTiming() ?? {};\n        let options = this.getOptions();\n\n        return { ...DefaultAnimationOptions, ...options, ...timings, ...keyframeOptions };\n    }\n\n    /**\n     * Returns the total duration of Animation\n     */\n    public getTotalDuration(): number {\n        return this.totalDuration;\n    }\n\n    /**\n     * Returns the current time of the Main Animation\n     */\n    public getCurrentTime(): number {\n        return this.mainAnimation.currentTime;\n    }\n\n    /**\n     * Returns the Animation progress as a fraction of the current time / duration * 100\n     */\n    public getProgress() {\n        return (this.getCurrentTime() / this.totalDuration) * 100;\n    }\n\n    /**\n     * Return the playback speed of the animation\n     */\n    public getSpeed(): number {\n        return this.mainAnimation.playbackRate;\n    }\n\n    /**\n     * Returns the current playing state\n     */\n    public getPlayState(): \"idle\" | \"running\" | \"paused\" | \"finished\" {\n        return this.mainAnimation.playState;\n    }\n\n    /**\n     * Get the options of an Animate instance\n     */\n    public getOptions(): AnimationOptions {\n        return this.options;\n    }\n\n    /**\n     * Set the current time of the Main Animation\n     */\n    public setCurrentTime(time: number): Animate {\n        this.all(anim => { anim.currentTime = time; });\n        this.emit(\"update\", this.getProgress());\n        return this;\n    }\n\n    /**\n     * Set the Animation progress as a value from 0 to 100\n     */\n    public setProgress(percent: number): Animate {\n        let time = (percent / 100) * this.totalDuration;\n        this.setCurrentTime(time);\n        return this;\n    }\n\n    /**\n     * Set the playback speed of an Animation\n     */\n    public setSpeed(speed: number = 1): Animate {\n        this.all(anim => { anim.playbackRate = speed; });\n        return this;\n    }\n\n    /**\n     * Adds a listener for a given event\n     */\n    public on(events: AnimationEvents | EventInput, callback?: ListenerCallback, scope?: object): Animate {\n        this.emitter.on(events, callback, scope ?? this);\n        return this;\n    }\n\n    /**\n     * Removes a listener from an event\n     */\n    public off(events: AnimationEvents | EventInput, callback?: ListenerCallback, scope?: object): Animate {\n        this.emitter.off(events, callback, scope ?? this);\n        return this;\n    }\n\n    /**\n     * Call all listeners within an event\n     */\n    public emit(events: AnimationEvents | string | any[], ...args: any): Animate {\n        this.emitter.emit(events, ...args);\n        return this;\n    }\n\n\n    /** Returns the Animate options, as JSON  */\n    public toJSON(): AnimationOptions {\n        return this.getOptions();\n    }\n\n    /**\n     * The Symbol.toStringTag well-known symbol is a string valued property that is used\n     * in the creation of the default string description of an object.\n     * It is accessed internally by the Object.prototype.toString() method.\n     */\n    get [Symbol.toStringTag]() {\n        return `Animate`;\n    }\n}\n\n/** Creates a new Animate instance */\nexport const animate = (options: AnimationOptions = {}): Animate => {\n    return new Animate(options);\n};\n\nexport default animate;\n", "/** Manages complex lists of named data, eg. A page can be stored in a list by of other pages with the url being how the page is stored in the list. Managers use Maps to store data */\nexport class Manager<K, V> {\n\t/** The complex list of named data, to which the Manager controls */\n\tpublic map: Map<K, V>;\n\tconstructor(value?: Array<[K, V]>) {\n\t\tthis.map = new Map(value);\n\t}\n\n\t/** Returns the Manager classes base Map */\n\tpublic getMap(): Map<K, V> {\n\t\treturn this.map;\n\t}\n\n\t/** Get a value stored in the Manager */\n\tpublic get(key: K): V {\n\t\treturn this.map.get(key);\n\t}\n\n\t/** Returns the keys of all items stored in the Manager as an Array */\n\tpublic keys(): Array<K> {\n\t\treturn Array.from(this.map.keys());\n\t}\n\n\t/** Returns the values of all items stored in the Manager as an Array */\n\tpublic values(): Array<V> {\n\t\treturn Array.from(this.map.values());\n\t}\n\n\t/** Set a value to the Manager using a key */\n\tpublic set(key: K, value: V): Manager<K, V> {\n\t\tthis.map.set(key, value);\n\t\treturn this;\n\t}\n\n\t/** Adds a value to Manager, and uses the current size of the Manager as it's key, it works best when all the key in the Manager are numbers */\n\tpublic add(value: V): Manager<K, V> {\n\t\tlet size = this.size;\n\t\t// @ts-ignore\n\t\tlet num: K = size as K;\n\t\tthis.set(num, value);\n\t\treturn this;\n\t}\n\n\t/** Returns the total number of items stored in the Manager */\n\tpublic get size(): number {\n\t\treturn this.map.size;\n\t}\n\n\t/** An alias for size */\n\tpublic get length(): number {\n\t\treturn this.map.size;\n\t}\n\n\t/** Returns the last item in the Manager who's index is a certain distance from the last item in the Manager */\n\tpublic last(distance: number = 1): V | undefined {\n\t\tlet key = this.keys()[this.size - distance];\n\t\treturn this.get(key);\n\t}\n\n\t/** Removes a value stored in the Manager via a key, returns true if an element in the Map object existed and has been removed, or false if the element does not exist */\n\tpublic delete(key: K): boolean {\n\t\treturn this.map.delete(key);\n\t}\n\n\t/** Removes a value stored in the Manager via a key, returns the Manager class, allowing for chains */\n\tpublic remove(key: K): Manager<K, V> {\n\t\tthis.map.delete(key);\n\t\treturn this;\n\t}\n\n\t/** Clear the Manager of all its contents */\n\tpublic clear(): Manager<K, V> {\n\t\tthis.map.clear();\n\t\treturn this;\n\t}\n\n\t/** Checks if the Manager contains a certain key */\n\tpublic has(key: K): boolean {\n\t\treturn this.map.has(key);\n\t}\n\n\t/** Returns a new Iterator object that contains an array of [key, value] for each element in the Map object in insertion order. */\n\tpublic entries(): IterableIterator<[K, V]> {\n\t\treturn this.map.entries();\n\t}\n\n\t/** Iterates through the Managers contents, calling a callback function every iteration */\n\tpublic forEach(\n\t\tcallback: (value?: V, key?: K, map?: Map<K, V>) => void,\n\t\tcontext?: object\n\t): Manager<K, V> {\n\t\tthis.map.forEach(callback, context);\n\t\treturn this;\n\t}\n\n\t/** Allows for iteration via for..of, learn more: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators] */\n\tpublic [Symbol.iterator](): IterableIterator<[K, V]> {\n\t\treturn this.entries();\n\t}\n}\n\n/**\n * Calls the method of a certain name for all items that are currently installed\n */\nexport const methodCall = (manager: Manager<any, any>, method: string, ...args: any): void => {\n\tmanager.forEach((item) => {\n\t\t// @ts-ignore\n\t\titem[method](...args);\n\t});\n};\n\n/**\n * Asynchronously calls the method of a certain name for all items that are currently installed, similar to methodCall\n */\nexport const asyncMethodCall = async (manager: Manager<any, any>, method: string, ...args: any): Promise<void> => {\n\tfor (let [, item] of manager) {\n\t\t// @ts-ignore\n\t\tawait item[method](...args);\n\t}\n};\n\nexport default Manager;\n", "import { Manager, methodCall } from \"@okikio/manager\";\n\nexport type ListenerCallback = ((...args: any) => void);\nexport interface IListener {\n    readonly callback: ListenerCallback;\n    readonly scope: object;\n    readonly name: string;\n}\n\n/** Represents a new event listener consisting of properties like: callback, scope, name */\nexport const newListener = ({\n    callback = () => { },\n    scope = null,\n    name = \"event\",\n}: IListener): IListener => ({ callback, scope, name });\n\n/** Represents a new event  */\nexport class Event extends Manager<number, IListener> {\n    /** The name of the event */\n    public name: string;\n    constructor(name: string = \"event\") {\n        super();\n        this.name = name;\n    }\n}\n\nexport type EventInput = string | object | Array<string>;\n\n/**\n * An Event Emitter\n * */\nexport class EventEmitter extends Manager<string, Event> {\n    constructor() {\n        super();\n    }\n\n    /** Gets event, if event doesn't exist create a new one */\n    public getEvent(name: string): Event {\n        let event = this.get(name);\n        if (!(event instanceof Event)) {\n            this.set(name, new Event(name));\n            return this.get(name);\n        }\n\n        return event;\n    }\n\n    /** Creates a listener and adds it to an event */\n    public newListener(\n        name: string,\n        callback: ListenerCallback,\n        scope: object\n    ): Event {\n        let event = this.getEvent(name);\n        event.add(newListener({ name, callback, scope }));\n        return event;\n    }\n\n    /** Adds a listener to a given event */\n    public on(\n        events: EventInput,\n        callback?: ListenerCallback | object,\n        scope?: object\n    ): EventEmitter {\n        // If there is no event break\n        if (typeof events == \"undefined\") return this;\n\n        // Create a new event every space\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\n\n        let _name: string;\n        let _callback: ListenerCallback;\n        let isObject = typeof events == \"object\" && !Array.isArray(events);\n\n        let _scope: object = isObject ? callback : scope;\n        if (!isObject) _callback = (callback as ListenerCallback);\n\n        // Loop through the list of events\n        Object.keys(events).forEach(key => {\n            // Select the name of the event from the list\n            // Remember events can be {String | Object | Array<string>}\n\n            // Check If events is an Object (JSON like Object, and not an Array)\n            if (isObject) {\n                _name = key;\n                _callback = events[key];\n            } else {\n                _name = events[key];\n            }\n\n            this.newListener(_name, _callback, _scope);\n        }, this);\n        return this;\n    }\n\n    /** Removes a listener from an event */\n    public removeListener(\n        name: string,\n        callback: ListenerCallback,\n        scope: object\n    ): Event {\n        let event: Event = this.get(name);\n        if (event instanceof Event && callback) {\n            let listener = newListener({ name, callback, scope });\n\n            event.forEach((value: IListener, i: number) => {\n                if (\n                    value.callback === listener.callback &&\n                    value.scope === listener.scope\n                ) {\n                    return event.remove(i);\n                }\n            });\n        }\n\n        return event;\n    }\n\n    /** Remove a listener from a given event, or just completely remove an event */\n    public off(\n        events: EventInput,\n        callback?: ListenerCallback | object,\n        scope?: object\n    ): EventEmitter {\n        // If there is no event break\n        if (typeof events == \"undefined\") return this;\n\n        // Create a new event every space\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\n\n        let _name: string;\n        let _callback: ListenerCallback;\n        let isObject = typeof events == \"object\" && !Array.isArray(events);\n\n        let _scope: object = isObject ? callback : scope;\n        if (!isObject) _callback = (callback as ListenerCallback);\n\n        // Loop through the list of events\n        Object.keys(events).forEach(key => {\n            // Select the name of the event from the list\n            // Remember events can be {String | Object | Array<any>}\n\n            // Check If events is an Object (JSON like Object, and not an Array)\n            if (isObject) {\n                _name = key;\n                _callback = events[key];\n            } else {\n                _name = events[key];\n            }\n\n            if (typeof _callback === \"function\") {\n                this.removeListener(_name, _callback, _scope);\n            } else this.remove(_name);\n        }, this);\n        return this;\n    }\n\n    /** Call all listeners within an event */\n    public emit(\n        events: string | Array<any>,\n        ...args: any\n    ): EventEmitter {\n        // If there is no event break\n        if (typeof events == \"undefined\") return this;\n\n        // Create a new event every space\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\n\n        // Loop through the list of events\n        events.forEach((event: string) => {\n            let _event: Event = this.get(event);\n\n            if (_event instanceof Event) {\n                _event.forEach((listener: IListener) => {\n                    let { callback, scope } = listener;\n                    callback.apply(scope, args);\n                });\n            }\n        }, this);\n        return this;\n    }\n\n    /** Clears events and event listeners */\n    public clear() {\n        methodCall(this, \"clear\");\n        super.clear();\n        return this;\n    }\n}\n\nexport default EventEmitter;\n"],
  "mappings": "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",
  "names": []
}

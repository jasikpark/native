{
  "version": 3,
  "sources": ["../src/api.ts", "../src/config.ts", "../../manager/src/api.ts", "../src/manager.ts", "../src/url.ts", "../src/service.ts", "../src/history.ts", "../src/page.ts", "../../emitter/src/api.ts", "../src/transition.ts", "../src/app.ts", "../src/pjax.ts", "../src/router.ts", "../../animate/src/api.ts"],
  "sourcesContent": ["export * from \"./config\";\nexport * from \"./manager\";\nexport * from \"./url\";\n\nexport * from \"./history\";\nexport * from \"./page\";\n\nexport * from \"./emitter\";\nexport * from \"./service\";\n\nexport * from \"./transition\";\n\nexport * from \"./app\";\nexport * from \"./pjax\";\nexport * from \"./router\";\n\nexport * from \"./animate\";\n", "export interface ICONFIG {\n    prefix?: string;\n    wrapperAttr?: string;\n    noAjaxLinkAttr?: string;\n    noPrefetchAttr?: \"no-prefetch\";\n    headers?: string[][];\n    preventSelfAttr?: string;\n    preventAllAttr?: string;\n    transitionAttr?: string;\n    blockAttr?: string;\n    timeout?: number;\n    [key: string]: any;\n}\n\nexport const CONFIG_DEFAULTS: ICONFIG = {\n    wrapperAttr: \"wrapper\",\n    noAjaxLinkAttr: \"no-ajax-link\",\n    noPrefetchAttr: \"no-prefetch\",\n    headers: [\n        [\"x-partial\", \"true\"]\n    ],\n    preventSelfAttr: `prevent=\"self\"`,\n    preventAllAttr: `prevent=\"all\"`,\n    transitionAttr: \"transition\",\n    blockAttr: `block`,\n    timeout: 30000\n};\n\nexport type ConfigKeys = keyof ICONFIG;\nexport const newConfig = (config: ICONFIG): ICONFIG => {\n    return Object.assign({ ...CONFIG_DEFAULTS }, config);\n};\n\n/** Converts string into properly formatted data attributes */\nexport const toAttr = (config: ICONFIG, value: string, brackets: boolean = true): string => {\n    let { prefix } = config;\n    let attr = `data${prefix ? \"-\" + prefix : \"\"}-${value}`;\n    return brackets ? `[${attr}]` : attr;\n};\n\n/** Selects config vars, and formats them for use, or simply returns the current configurations for the framework */\nexport const getConfig = (config: ICONFIG, value?: ConfigKeys, brackets: boolean = true): any => {\n    if (typeof value !== \"string\")\n        return config;\n\n    let prop = config[value];\n    if (typeof prop === \"string\")\n        return toAttr(config, prop, brackets);\n    return prop;\n};\n", "/** Manages complex lists of named data, eg. A page can be stored in a list by of other pages with the url being how the page is stored in the list. Managers use Maps to store data */\nexport class Manager<K, V> {\n\t/** The complex list of named data, to which the Manager controls */\n\tpublic map: Map<K, V>;\n\tconstructor(value?: Array<[K, V]>) {\n\t\tthis.map = new Map(value);\n\t}\n\n\t/** Returns the Manager classes base Map */\n\tpublic getMap(): Map<K, V> {\n\t\treturn this.map;\n\t}\n\n\t/** Get a value stored in the Manager */\n\tpublic get(key: K): V {\n\t\treturn this.map.get(key);\n\t}\n\n\t/** Returns the keys of all items stored in the Manager as an Array */\n\tpublic keys(): Array<K> {\n\t\treturn Array.from(this.map.keys());\n\t}\n\n\t/** Returns the values of all items stored in the Manager as an Array */\n\tpublic values(): Array<V> {\n\t\treturn Array.from(this.map.values());\n\t}\n\n\t/** Set a value to the Manager using a key */\n\tpublic set(key: K, value: V): Manager<K, V> {\n\t\tthis.map.set(key, value);\n\t\treturn this;\n\t}\n\n\t/** Adds a value to Manager, and uses the current size of the Manager as it's key, it works best when all the key in the Manager are numbers */\n\tpublic add(value: V): Manager<K, V> {\n\t\tlet size = this.size;\n\t\t// @ts-ignore\n\t\tlet num: K = size as K;\n\t\tthis.set(num, value);\n\t\treturn this;\n\t}\n\n\t/** Returns the total number of items stored in the Manager */\n\tpublic get size(): number {\n\t\treturn this.map.size;\n\t}\n\n\t/** An alias for size */\n\tpublic get length(): number {\n\t\treturn this.map.size;\n\t}\n\n\t/** Returns the last item in the Manager who's index is a certain distance from the last item in the Manager */\n\tpublic last(distance: number = 1): V | undefined {\n\t\tlet key = this.keys()[this.size - distance];\n\t\treturn this.get(key);\n\t}\n\n\t/** Removes a value stored in the Manager via a key, returns true if an element in the Map object existed and has been removed, or false if the element does not exist */\n\tpublic delete(key: K): boolean {\n\t\treturn this.map.delete(key);\n\t}\n\n\t/** Removes a value stored in the Manager via a key, returns the Manager class, allowing for chains */\n\tpublic remove(key: K): Manager<K, V> {\n\t\tthis.map.delete(key);\n\t\treturn this;\n\t}\n\n\t/** Clear the Manager of all its contents */\n\tpublic clear(): Manager<K, V> {\n\t\tthis.map.clear();\n\t\treturn this;\n\t}\n\n\t/** Checks if the Manager contains a certain key */\n\tpublic has(key: K): boolean {\n\t\treturn this.map.has(key);\n\t}\n\n\t/** Returns a new Iterator object that contains an array of [key, value] for each element in the Map object in insertion order. */\n\tpublic entries(): IterableIterator<[K, V]> {\n\t\treturn this.map.entries();\n\t}\n\n\t/** Iterates through the Managers contents, calling a callback function every iteration */\n\tpublic forEach(\n\t\tcallback: (value?: V, key?: K, map?: Map<K, V>) => void,\n\t\tcontext?: object\n\t): Manager<K, V> {\n\t\tthis.map.forEach(callback, context);\n\t\treturn this;\n\t}\n\n\t/** Allows for iteration via for..of, learn more: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators] */\n\tpublic [Symbol.iterator](): IterableIterator<[K, V]> {\n\t\treturn this.entries();\n\t}\n}\n\n/**\n * Calls the method of a certain name for all items that are currently installed\n */\nexport const methodCall = (manager: Manager<any, any>, method: string, ...args: any): void => {\n\tmanager.forEach((item) => {\n\t\t// @ts-ignore\n\t\titem[method](...args);\n\t});\n};\n\n/**\n * Asynchronously calls the method of a certain name for all items that are currently installed, similar to methodCall\n */\nexport const asyncMethodCall = async (manager: Manager<any, any>, method: string, ...args: any): Promise<void> => {\n\tfor (let [, item] of manager) {\n\t\t// @ts-ignore\n\t\tawait item[method](...args);\n\t}\n};\n\nexport default Manager;\n", "import { Manager, methodCall, asyncMethodCall } from \"@okikio/manager\";\nimport { ICONFIG } from \"./config\";\nimport { IApp } from \"./app\";\nimport { EventEmitter } from \"./emitter\";\n\nexport type IAdvancedManager = AdvancedManager<any, ManagerItem>;\n\n/** The base class for AdvancedManager items */\nexport class ManagerItem {\n    /** The AdvancedManager the ManagerItem is attached to */\n    public manager: IAdvancedManager;\n\n    /** The App the ManagerItem is attached to */\n    public app: IApp;\n\n    /** The Config of the App the ManagerItem is attached to */\n    public config: ICONFIG;\n\n    /** The EventEmitter of the App the ManagerItem is attached to */\n    public emitter: EventEmitter;\n\n    /** The key to where ManagerItem is stored in an AdvancedManager */\n    public key: any;\n\n    constructor() { }\n\n    /** Run after the Manager Item has been registered */\n    public install(): any { }\n\n    /** Register the current Manager Item's manager */\n    public register(manager: IAdvancedManager, key: any): ManagerItem {\n        this.manager = manager;\n        this.app = manager.app;\n        this.config = manager.config;\n        this.emitter = manager.emitter;\n        this.key = key;\n        this.install();\n        return this;\n    }\n\n    /** Run before the ManagerItem has been unregistered */\n    public uninstall(): any { }\n\n    /** Basically removes a ManagerItem, in order to recover the ManagerItem, it needs to be re-added to an AdvancedManager */\n    public unregister() {\n        this.uninstall();\n\n        this.manager.remove(this.key);\n        this.key = undefined;\n        this.manager = undefined;\n        this.app = undefined;\n        this.config = undefined;\n        this.emitter = undefined;\n    }\n}\n\n/** A tweak to the Manager class that makes it self aware of the App class it's instantiated in */\nexport class AdvancedManager<K, V extends ManagerItem> extends Manager<K, V> {\n    /** The App the AdvancedManager is attached to */\n    public app: IApp;\n\n    /** The Config of the App the AdvancedManager is attached to */\n    public config: ICONFIG;\n\n    /** The EventEmitter of the App the AdvancedManager is attached to */\n    public emitter: EventEmitter;\n\n    /** Register App details */\n    constructor(app: IApp) {\n        super();\n        this.app = app;\n        this.config = app.config;\n        this.emitter = app.emitter;\n    }\n\n    /** Add a ManagerItem to AdvancedManager at a specified key */\n    public set(key: K, value: V) {\n        super.set(key, value);\n        value.register(this, key);\n        return this;\n    }\n}\n\nexport { Manager, methodCall, asyncMethodCall };\n", "export const newURL = (url: string | URL | Location = window.location.href): URL => {\n    return url instanceof URL ? url : new URL(url as unknown as string, window.location.origin);\n};\n\n/** Returns the pathname with the hash at the end */\nexport const getHashedPath = (url: URL): string => (`${url.pathname}${url.hash}`);\n\n/** Returns the actual hash without the hashtag */\nexport const getHash = (url: URL): string => (url.hash.slice(1));\n\n/** Removes the hash from the full URL for a clean URL string */\nexport const clean = (url: URL): string => (url.toString().replace(/(\\/#.*|\\/|#.*)$/, ''));\n\n/** Compares two URLs to each other */\nexport const equal = (a: URL | string, b: URL | string): boolean => {\n    let urlA = newURL(a);\n    let urlB = newURL(b);\n    return clean(urlA) === clean(urlB);\n};\n", "import { AdvancedManager, ManagerItem, methodCall } from \"./manager\";\nimport { IApp } from \"./app\";\n\n/** Controls specific kinds of actions that require JS */\nexport class Service extends ManagerItem {\n\t/** Called before the start of a Service, represents a constructor of sorts */\n\tpublic init(...args: any): any;\n\tpublic init(): any { }\n\n\t/** Called on start of Service */\n\tpublic boot(...args: any): any;\n\tpublic boot(): any {\n\t\tthis.initEvents();\n\t}\n\n\t/** Initialize events */\n\tpublic initEvents(): void { }\n\n\t/** Stop events */\n\tpublic stopEvents(): void { }\n\n\t/** Stop services */\n\tpublic stop(): void {\n\t\tthis.stopEvents();\n\t\tthis.unregister();\n\t}\n}\n\n/** The Service Manager controls the lifecycle of all Services in an App */\nexport class ServiceManager extends AdvancedManager<string, Service> {\n\tconstructor(app: IApp) {\n\t\tsuper(app);\n\t}\n\n\t/** Call the init method for all Services */\n\tpublic init(): ServiceManager {\n\t\tmethodCall(this, \"init\");\n\t\treturn this;\n\t}\n\n\t/** Call the boot method for all Services */\n\tpublic boot(): ServiceManager {\n\t\tmethodCall(this, \"boot\");\n\t\treturn this;\n\t}\n\n\t/** Call the stop method for all Services */\n\tpublic stop(): ServiceManager {\n\t\tmethodCall(this, \"stop\");\n\t\treturn this;\n\t}\n}\n", "import { Service } from \"./service\";\nimport { getHashedPath, newURL } from \"./url\";\n\nexport type Trigger = HTMLAnchorElement | \"HistoryManager\" | \"popstate\" | \"back\" | \"forward\";\nexport interface ICoords {\n\treadonly x: number;\n\treadonly y: number;\n}\n\nexport interface IStateData {\n\tscroll: ICoords;\n\t[key: string]: any;\n}\n\nexport interface IState {\n\turl: string;\n\tindex?: number;\n\ttransition: string;\n\tdata: IStateData;\n}\n\nexport interface IHistoryItem {\n\tindex: number;\n\tstates: IState[];\n}\n\nexport interface IHistoryManager extends Service {\n\tstates: IState[],\n\tpointer: number,\n\n\tinit(): any,\n\tget(index: number): IState,\n\tadd(value?: IState, historyAction?: \"replace\" | \"push\"): HistoryManager,\n\tremove(index?: number): HistoryManager,\n\treplace(newStates: IState[]): HistoryManager,\n\tset(i: number, state: IState): IState,\n\tcurrent: IState,\n\tlast: IState,\n\tprevious: IState | null,\n\tlength: number,\n}\n\n/** A quick snapshot of page scroll coordinates */\nexport const newCoords = (x: number = window.scrollX, y: number = window.scrollY): ICoords => ({ x, y });\n\n/** Creates a state; a state represents the current status of the page consisting of properties like: url, transition, and data */\nexport const newState = (state: IState = {\n\turl: getHashedPath(newURL()),\n\tindex: 0,\n\ttransition: \"default\",\n\tdata: {\n\t\tscroll: newCoords(),\n\t\ttrigger: \"HistoryManager\"\n\t}\n}): IState => (state);\n\n/** Keeps a record of the history of the App; it stores only the states of Pages */\nexport class HistoryManager extends Service implements IHistoryManager {\n\tpublic states: IState[];\n\tpublic pointer = -1;\n\n\t/** Initializes the states array, and replace the history pushState data with the states array */\n\tinit() {\n\t\tthis.states = [];\n\n\t\tlet state = newState();\n\t\tthis.add(state, \"replace\");\n\t}\n\n\t/** Get a state based on it's index */\n\tpublic get(index: number) {\n\t\treturn this.states[index];\n\t}\n\n\t/** Add a state to HistoryManager and change the history pushState data based on the historyAction specified */\n\tpublic add(value?: IState, historyAction: \"replace\" | \"push\" = \"push\"): HistoryManager {\n\t\tlet state = newState(value);\n\t\tlet len = this.length;\n\t\tthis.states.push({ ...state });\n\t\tthis.pointer = len;\n\n\t\tlet item: IHistoryItem = {\n\t\t\tindex: this.pointer,\n\t\t\tstates: [...this.states]\n\t\t};\n\t\tchangeState(historyAction, state, item);\n\t\treturn this;\n\t}\n\n\tpublic remove(index?: number) {\n\t\tif (index) {\n\t\t\tthis.states.splice(index, 1);\n\t\t} else {\n\t\t\tthis.states.pop();\n\t\t}\n\n\t\tthis.pointer--;\n\t\treturn this;\n\t}\n\n\t/** Replaces the states array with another states array, this is later used when going back and forward in page history */\n\tpublic replace(newStates: IState[]) {\n\t\tthis.states = newStates;\n\t\treturn this;\n\t}\n\n\t/** Set state by index. */\n\tpublic set(i: number, state: IState) {\n\t\treturn (this.states[i] = state);\n\t}\n\n\t/** Get the current state */\n\tget current(): IState {\n\t\treturn this.get(this.pointer);\n\t}\n\n\t/** Get the last state (top of the history stack). */\n\tget last(): IState {\n\t\treturn this.get(this.length - 1);\n\t}\n\n\t/** Get the previous state. */\n\tget previous(): IState | null {\n\t\treturn this.pointer < 1 ? null : this.get(this.pointer - 1);\n\t}\n\n\tget length() {\n\t\treturn this.states.length;\n\t}\n}\n\n/** Either push or replace history state */\nexport const changeState = (action: \"push\" | \"replace\", state: IState, item: object) => {\n\tlet href = getHashedPath(newURL(state.url));\n\tlet args = [item, \"\", href];\n\tif (window.history) {\n\t\tswitch (action) {\n\t\t\tcase \"push\":\n\t\t\t\twindow.history.pushState.apply(window.history, args);\n\t\t\t\tbreak;\n\t\t\tcase \"replace\":\n\t\t\t\twindow.history.replaceState.apply(window.history, args);\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n", "import { Manager, ManagerItem, AdvancedManager } from \"./manager\";\nimport { equal, newURL } from \"./url\";\nimport { getConfig } from \"./config\";\nimport { Service } from \"./service\";\n\nexport interface IPage extends ManagerItem {\n    dom: Document,\n    wrapper: HTMLElement,\n    title: string,\n    head: Element,\n    body: Element,\n    url: URL,\n    data: string,\n    wrapperAttr: string,\n\n    build(): any,\n    install(): void,\n    uninstall(): any,\n}\n\n/**\n * Parses strings to DOM\n */\nexport const PARSER: DOMParser = new DOMParser();\n\n/** A page represents the DOM elements that create each page */\nexport class Page extends ManagerItem implements IPage {\n    /** Holds the DOM of the current page */\n    public dom: Document;\n\n    /** Holds the wrapper element to be swapped out of each Page */\n    public wrapper: HTMLElement;\n\n    /** Holds the title of each page */\n    public title: string;\n\n    /** Holds the head element of each page */\n    public head: Element;\n\n    /** Holds the body element of each page */\n    public body: Element;\n\n    /** The URL of the current page */\n    public url: URL;\n\n    /** The payload of a page request */\n    public data: string;\n\n    /** Attr that identifies the wrapper */\n    public wrapperAttr: string;\n\n    constructor(url: URL = newURL(), dom: string | Document = document) {\n        super();\n        this.url = url;\n\n        if (typeof dom === \"string\") {\n            this.data = dom;\n        } else this.dom = dom || document;\n    }\n\n    /** Builds the page's dom, and sets the title, head, body, and wrapper properties of the Page class */\n    public build() {\n        if (!(this.dom instanceof Node)) {\n            this.dom = PARSER.parseFromString(this.data, \"text/html\");\n        }\n\n        if (!(this.body instanceof Node)) {\n            let { title, head, body } = this.dom;\n            this.title = title;\n            this.head = head;\n            this.body = body;\n            this.wrapper = this.body.querySelector(this.wrapperAttr);\n        }\n    }\n\n    public install() {\n        this.wrapperAttr = getConfig(this.config, \"wrapperAttr\");\n    }\n\n    public uninstall() {\n        this.url = undefined;\n        this.title = undefined;\n        this.head = undefined;\n        this.body = undefined;\n        this.dom = undefined;\n        this.wrapper = undefined;\n        this.data = undefined;\n        this.wrapperAttr = undefined;\n    }\n}\n\nexport interface IPageManager extends Service {\n    loading: Manager<string, Promise<string>>,\n    maxPages: number,\n    pages: AdvancedManager<string, Page>;\n\n    install(): any,\n\n    get(key): Page,\n    add(value): PageManager,\n    set(key, value): PageManager,\n    remove(key): PageManager,\n    has(key): boolean,\n    clear(): PageManager,\n    size: number,\n    keys(): any[],\n\n    load(_url: URL | string): Promise<Page>,\n    request(url: string): Promise<string>,\n}\n\n/** Controls which page to load */\nexport class PageManager extends Service implements IPageManager {\n    /** Stores all fetch requests that are currently loading */\n    public loading: Manager<string, Promise<string>> = new Manager();\n    public maxPages: number;\n\n    pages: AdvancedManager<string, Page>;\n\n    /** Instantiate pages, and add the current page to pages */\n    install() {\n        this.pages = new AdvancedManager(this.app);\n        this.maxPages = this.config.maxPages ?? 5;\n\n        let URLString = newURL().pathname;\n        this.set(URLString, new Page());\n        URLString = undefined;\n    }\n\n    get(key) { return this.pages.get(key); }\n    add(value) { this.pages.add(value); return this; }\n    set(key, value) { this.pages.set(key, value); return this; }\n    remove(key) { this.pages.remove(key); return this; }\n    has(key) { return this.pages.has(key); }\n    clear() { this.pages.clear(); return this; }\n    get size() { return this.pages.size; }\n    keys() { return this.pages.keys(); }\n\n    /** Load from cache or by requesting URL via a fetch request, avoid requesting for the same thing twice by storing the fetch request in \"this.loading\" */\n    public async load(_url: URL | string = newURL()): Promise<Page> {\n        let url: URL = newURL(_url);\n        let urlString: string = url.pathname;\n        let page: Page, request: Promise<string>;\n        if (this.has(urlString)) {\n            page = this.get(urlString);\n            return Promise.resolve(page);\n        }\n\n        if (!this.loading.has(urlString)) {\n            request = this.request(urlString);\n            this.loading.set(urlString, request);\n        } else request = this.loading.get(urlString);\n\n        let response = await request;\n        this.loading.remove(urlString);\n\n        page = new Page(url, response);\n        this.set(urlString, page);\n\n        if (this.size > this.maxPages) {\n            let currentUrl = newURL();\n            let keys = this.keys();\n            let first = equal(currentUrl, keys[0]) ? keys[1] : keys[0];\n            let page = this.get(first);\n            page.unregister();\n            page = undefined;\n            keys = undefined;\n            currentUrl = undefined;\n            first = undefined;\n        }\n        return page;\n    }\n\n    /** Starts a fetch request */\n    public async request(url: string): Promise<string> {\n        const headers = new Headers(getConfig(this.config, \"headers\"));\n        const timeout = window.setTimeout(() => {\n            window.clearTimeout(timeout);\n            throw \"Request Timed Out!\";\n        }, getConfig(this.config, \"timeout\"));\n\n        try {\n            let response = await fetch(url, {\n                mode: 'same-origin',\n                method: \"GET\",\n                headers,\n                cache: \"default\",\n                credentials: \"same-origin\",\n            });\n\n            window.clearTimeout(timeout);\n            if (response.status >= 200 && response.status < 300) {\n                return await response.text();\n            }\n\n            const err = new Error(response.statusText || \"\" + response.status);\n            throw err;\n        } catch (err) {\n            window.clearTimeout(timeout);\n            throw err;\n        }\n    }\n}\n", "import { Manager, methodCall } from \"@okikio/manager\";\n\nexport type ListenerCallback = ((...args: any) => void);\nexport interface IListener {\n    readonly callback: ListenerCallback;\n    readonly scope: object;\n    readonly name: string;\n}\n\n/** Represents a new event listener consisting of properties like: callback, scope, name */\nexport const newListener = ({\n    callback = () => { },\n    scope = null,\n    name = \"event\",\n}: IListener): IListener => ({ callback, scope, name });\n\n/** Represents a new event  */\nexport class Event extends Manager<number, IListener> {\n    /** The name of the event */\n    public name: string;\n    constructor(name: string = \"event\") {\n        super();\n        this.name = name;\n    }\n}\n\nexport type EventInput = string | object | Array<string>;\n\n/**\n * An Event Emitter\n * */\nexport class EventEmitter extends Manager<string, Event> {\n    constructor() {\n        super();\n    }\n\n    /** Gets event, if event doesn't exist create a new one */\n    public getEvent(name: string): Event {\n        let event = this.get(name);\n        if (!(event instanceof Event)) {\n            this.set(name, new Event(name));\n            return this.get(name);\n        }\n\n        return event;\n    }\n\n    /** Creates a listener and adds it to an event */\n    public newListener(\n        name: string,\n        callback: ListenerCallback,\n        scope: object\n    ): Event {\n        let event = this.getEvent(name);\n        event.add(newListener({ name, callback, scope }));\n        return event;\n    }\n\n    /** Adds a listener to a given event */\n    public on(\n        events: EventInput,\n        callback?: ListenerCallback | object,\n        scope?: object\n    ): EventEmitter {\n        // If there is no event break\n        if (typeof events == \"undefined\") return this;\n\n        // Create a new event every space\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\n\n        let _name: string;\n        let _callback: ListenerCallback;\n        let isObject = typeof events == \"object\" && !Array.isArray(events);\n\n        let _scope: object = isObject ? callback : scope;\n        if (!isObject) _callback = (callback as ListenerCallback);\n\n        // Loop through the list of events\n        Object.keys(events).forEach(key => {\n            // Select the name of the event from the list\n            // Remember events can be {String | Object | Array<string>}\n\n            // Check If events is an Object (JSON like Object, and not an Array)\n            if (isObject) {\n                _name = key;\n                _callback = events[key];\n            } else {\n                _name = events[key];\n            }\n\n            this.newListener(_name, _callback, _scope);\n        }, this);\n        return this;\n    }\n\n    /** Removes a listener from an event */\n    public removeListener(\n        name: string,\n        callback: ListenerCallback,\n        scope: object\n    ): Event {\n        let event: Event = this.get(name);\n        if (event instanceof Event && callback) {\n            let listener = newListener({ name, callback, scope });\n\n            event.forEach((value: IListener, i: number) => {\n                if (\n                    value.callback === listener.callback &&\n                    value.scope === listener.scope\n                ) {\n                    return event.remove(i);\n                }\n            });\n        }\n\n        return event;\n    }\n\n    /** Remove a listener from a given event, or just completely remove an event */\n    public off(\n        events: EventInput,\n        callback?: ListenerCallback | object,\n        scope?: object\n    ): EventEmitter {\n        // If there is no event break\n        if (typeof events == \"undefined\") return this;\n\n        // Create a new event every space\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\n\n        let _name: string;\n        let _callback: ListenerCallback;\n        let isObject = typeof events == \"object\" && !Array.isArray(events);\n\n        let _scope: object = isObject ? callback : scope;\n        if (!isObject) _callback = (callback as ListenerCallback);\n\n        // Loop through the list of events\n        Object.keys(events).forEach(key => {\n            // Select the name of the event from the list\n            // Remember events can be {String | Object | Array<any>}\n\n            // Check If events is an Object (JSON like Object, and not an Array)\n            if (isObject) {\n                _name = key;\n                _callback = events[key];\n            } else {\n                _name = events[key];\n            }\n\n            if (typeof _callback === \"function\") {\n                this.removeListener(_name, _callback, _scope);\n            } else this.remove(_name);\n        }, this);\n        return this;\n    }\n\n    /** Call all listeners within an event */\n    public emit(\n        events: string | Array<any>,\n        ...args: any\n    ): EventEmitter {\n        // If there is no event break\n        if (typeof events == \"undefined\") return this;\n\n        // Create a new event every space\n        if (typeof events == \"string\") events = events.trim().split(/\\s/g);\n\n        // Loop through the list of events\n        events.forEach((event: string) => {\n            let _event: Event = this.get(event);\n\n            if (_event instanceof Event) {\n                _event.forEach((listener: IListener) => {\n                    let { callback, scope } = listener;\n                    callback.apply(scope, args);\n                });\n            }\n        }, this);\n        return this;\n    }\n\n    /** Clears events and event listeners */\n    public clear() {\n        methodCall(this, \"clear\");\n        super.clear();\n        return this;\n    }\n}\n\nexport default EventEmitter;\n", "import { Manager } from \"./manager\";\nimport { ICoords, newCoords, Trigger } from \"./history\";\nimport { IPage } from \"./page\";\nimport { getConfig } from \"./config\";\nimport { Service } from \"./service\";\nimport { newURL } from \"./url\";\n\n/**\n * The async function type, allows for smooth transition between Promises\n */\nexport type asyncFn = (err?: any, value?: any) => void;\nexport interface ITransition {\n    oldPage?: IPage;\n    newPage?: IPage;\n    trigger?: Trigger;\n    scroll?: { x: number; y: number };\n    scrollable?: boolean;\n    in: (data: ITransitionData) => any;\n    out: (data: ITransitionData) => any;\n    [key: string]: any;\n}\nexport interface ITransitionData {\n    from?: IPage;\n    to?: IPage;\n    trigger?: Trigger;\n    scroll?: ICoords;\n    done: asyncFn;\n}\nexport interface ITransitionManager extends Service {\n    transitions: Manager<string, ITransition>,\n\n    get(key: string): ITransition,\n    set(key: string, value: ITransition): TransitionManager,\n    add(value: ITransition): TransitionManager,\n    has(key: string): boolean,\n\n    boot(): any,\n    animate(name: string, data: any): Promise<ITransition>,\n}\n\n\n/** Auto scrolls to an elements position if the element has an hash */\nexport const hashAction = (coords?: ICoords, hash: string = window.location.hash) => {\n    try {\n        let _hash = hash[0] == \"#\" ? hash : newURL(hash).hash;\n        if (_hash.length > 1) {\n            let el = document.getElementById(_hash.slice(1)) as HTMLElement;\n\n            if (el) {\n                return newCoords(el.offsetLeft, el.offsetTop);\n            }\n        }\n    } catch (e) {\n        console.warn(\"[hashAction] error\", e);\n    }\n\n    return coords ?? newCoords(0, 0);\n};\n\n// The Default Transition\nconst Default: ITransition = {\n    name: \"default\",\n    scrollable: true,\n\n    out({ done }: ITransitionData) {\n        done();\n    },\n    in({ scroll, done }: ITransitionData) {\n        window.scroll(scroll.x, scroll.y);\n        done();\n    }\n};\n\n/** Controls which Transition between pages to use */\nexport class TransitionManager extends Service implements ITransitionManager {\n    transitions: Manager<string, ITransition>;\n    private _arg: Array<[string, ITransition]>;\n    constructor(transitions?: Array<[string, ITransition]>) {\n        super();\n        this._arg = transitions;\n    }\n\n    /** On Service install set Config */\n    public install() {\n        super.install();\n\n        let transitions = this._arg && this._arg.length ? this._arg : (getConfig(this.config, \"transitions\") ?? []);\n\n        // Manager like Maps use the most recent [key, value] Array it knows, replacing the default transition\n        // With any other transitions called [\"default\", ...]\n        transitions = [[\"default\", Default]].concat(transitions);\n        this.transitions = new Manager(transitions);\n    }\n\n    get(key: string) { return this.transitions.get(key); }\n    set(key: string, value: ITransition) { this.transitions.set(key, value); return this; }\n    add(value: ITransition) { this.transitions.add(value); return this; }\n    has(key: string) { return this.transitions.has(key); }\n\n    /** Starts a transition */\n    public async animate(name: string, data: any): Promise<ITransition> {\n        let transition: ITransition = this.transitions.get(name);\n        let scroll = data.scroll;\n        let ignoreHashAction = data.ignoreHashAction;\n        if (!(\"wrapper\" in data.oldPage) || !(\"wrapper\" in data.newPage))\n            throw `[Page] either oldPage or newPage aren't instances of the Page Class.\\n ${{\n                newPage: data.newPage,\n                oldPage: data.oldPage,\n            }}`;\n\n        // Replace the title\n        document.title = `` + data.newPage.title;\n\n        let fromWrapper = data.oldPage.wrapper;\n        let toWrapper = data.newPage.wrapper;\n\n        if (!(fromWrapper instanceof Node) || !(toWrapper instanceof Node))\n            throw `[Wrapper] the wrapper from the ${!(toWrapper instanceof Node) ? \"next\" : \"current\"\n            } page cannot be found. The wrapper must be an element that has the attribute ${getConfig(this.config,\n                \"wrapperAttr\"\n            )}.`;\n\n        // Give the Transition all the background data it may require\n        transition.init && transition?.init(data);\n\n        this.emitter.emit(\"BEFORE_TRANSITION_OUT\");\n\n        // Start the out point of the Transition\n        if (transition.out) {\n            await new Promise((done) => {\n                let outMethod: Promise<any> = transition.out.call(transition, {\n                    ...data,\n                    from: data.oldPage,\n                    trigger: data.trigger,\n                    done,\n                });\n\n                outMethod?.then(done);\n            });\n        }\n\n        this.emitter.emit(\"AFTER_TRANSITION_OUT\");\n\n        // Add the new wrapper before the old one\n        await new Promise<void>((done) => {\n            fromWrapper.insertAdjacentElement(\"beforebegin\", toWrapper);\n            this.emitter.emit(\"CONTENT_INSERT\");\n\n            if (!ignoreHashAction && !/back|popstate|forward/.test(data.trigger as string)) {\n                scroll = hashAction(scroll);\n            }\n            done();\n        });\n\n        // Replace the old wrapper with the new one\n        await new Promise<void>((done) => {\n            fromWrapper.remove();\n            fromWrapper = undefined;\n            toWrapper = undefined;\n            this.emitter.emit(\"CONTENT_REPLACED\");\n            done();\n        });\n\n        this.emitter.emit(\"BEFORE_TRANSITION_IN\");\n\n        // Start the in point of the Transition (only the in method has access to the hashAction's scroll position)\n        if (transition.in) {\n            await new Promise(async (done) => {\n                let inMethod: Promise<any> = transition.in.call(transition, {\n                    ...data,\n                    from: data.oldPage,\n                    to: data.newPage,\n                    trigger: data.trigger,\n                    scroll,\n                    done,\n                });\n\n                inMethod?.then(done);\n            });\n        }\n\n        this.emitter.emit(\"AFTER_TRANSITION_IN\");\n        return transition;\n    }\n}\n", "import { EventEmitter, ListenerCallback, EventInput } from \"./emitter\";\nimport { ServiceManager, Service } from \"./service\";\nimport { newConfig, ICONFIG } from \"./config\";\n\nexport interface IApp {\n    services: ServiceManager,\n    emitter: EventEmitter,\n    config: ICONFIG,\n    register(config: ICONFIG): App,\n    get(key: string): Service,\n    set(key: string, service: Service): App,\n    add(value: Service): App,\n    boot(): App,\n    stop(): App,\n    on(events: EventInput, callback?: ListenerCallback): App,\n    off(events: EventInput, callback?: ListenerCallback): App,\n    emit(events: string | any[], ...args: any): App,\n}\n\n/** The App class starts the entire process, it controls all managers and all services */\nexport class App implements IApp {\n    /** An instance of the ServiceManager */\n    public services: ServiceManager;\n\n    /** An instance of an EventEmitter */\n    public emitter: EventEmitter;\n\n    /** The current Configuration's for the App */\n    public config: ICONFIG;\n    constructor(config: object = {}) {\n        this.register(config);\n    }\n\n    /** Create new instances of the ServiceManager, EventEmitter and the configurations */\n    public register(config: ICONFIG = {}): App {\n        this.config = newConfig(config);\n        this.emitter = new EventEmitter();\n        this.services = new ServiceManager(this);\n\n        let handler = (() => {\n            document.removeEventListener(\"DOMContentLoaded\", handler);\n            window.removeEventListener(\"load\", handler);\n            this.emitter.emit(\"READY ready\");\n        }).bind(this);\n\n        document.addEventListener(\"DOMContentLoaded\", handler);\n        window.addEventListener(\"load\", handler);\n        return this;\n    }\n\n    /** Shortcuts to adding, setting, and getting Services */\n    public get(key: string): Service {\n        return this.services.get(key);\n    }\n\n    public set(key: string, value: Service): App {\n        this.services.set(key, value);\n        return this;\n    }\n\n    public add(value: Service): App {\n        this.services.add(value);\n        return this;\n    }\n\n    /** Initialize and boot all Services */\n    public boot(): App {\n        this.services.init();\n        this.services.boot();\n        return this;\n    }\n\n    /** Stops all Services and clears the even emitter of all events and listeners */\n    public stop(): App {\n        this.services.stop();\n        this.emitter.clear();\n        return this;\n    }\n\n    /** Shortcuts to the App EventEmitter on, off, and emit methods */\n    public on(events: EventInput, callback?: ListenerCallback): App {\n        this.emitter.on(events, callback, this);\n        return this;\n    }\n\n    public off(events: EventInput, callback?: ListenerCallback): App {\n        this.emitter.off(events, callback, this);\n        return this;\n    }\n\n    public emit(events: string | any[], ...args: any): App {\n        this.emitter.emit(events, ...args);\n        return this;\n    }\n}\n", "import { newState, Trigger, newCoords, IHistoryItem, IHistoryManager } from \"./history\";\nimport { Service } from \"./service\";\nimport { IPage, IPageManager } from \"./page\";\nimport { newURL, getHashedPath, equal } from \"./url\";\nimport { getConfig } from \"./config\";\nimport { hashAction, ITransitionManager } from \"./transition\";\n\nexport type LinkEvent = MouseEvent | TouchEvent;\nexport type StateEvent = LinkEvent | PopStateEvent;\nexport type IgnoreURLsList = Array<RegExp | string>;\n/**\n * Creates a barbajs like PJAX Service, for the native framework\n * Based on barbajs and StartingBlocks\n */\nexport class PJAX extends Service {\n    /** URLs to ignore when prefetching */\n    public ignoreURLs: IgnoreURLsList;\n\n    /** Whether or not to disable prefetching */\n    public prefetchIgnore: boolean;\n\n    /** Current state of transitions */\n    public isTransitioning: boolean;\n\n    /** Ignore extra clicks of an anchor element if a transition has already started */\n    public stopOnTransitioning: boolean;\n\n    /** On page change (excluding popstate events) keep current scroll position */\n    public stickyScroll: boolean;\n\n    /** Force load a page if an error occurs */\n    public forceOnError: boolean;\n\n    /** Ignore hash action if set to true */\n    public ignoreHashAction: boolean;\n\n    public install() {\n        super.install();\n\n        this.ignoreURLs = getConfig(this.config, \"ignoreURLs\") ?? [];\n        this.prefetchIgnore = getConfig(this.config, \"prefetchIgnore\") ?? false;\n        this.stopOnTransitioning = getConfig(this.config, \"stopOnTransitioning\") ?? false;\n        this.stickyScroll = getConfig(this.config, \"stickyScroll\") ?? false;\n        this.forceOnError = getConfig(this.config, \"forceOnError\") ?? false;\n        this.ignoreHashAction = getConfig(this.config, \"ignoreHashAction\") ?? false\n    }\n\n    /** Sets the transition state to either true or false */\n    public transitionStart() {\n        this.isTransitioning = true;\n    }\n\n    public transitionStop() {\n        this.isTransitioning = false;\n    }\n\n    public init() {\n        /**\n         * Bind the event listeners to the PJAX class\n         *\n         * @memberof PJAX\n         */\n        this.onHover = this.onHover.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onStateChange = this.onStateChange.bind(this);\n    }\n\n    /** Starts the PJAX Service */\n    public boot() {\n        if (\"scrollRestoration\" in window.history) {\n            // Back off, browser, I got this...\n            window.history.scrollRestoration = \"manual\";\n        }\n\n        super.boot();\n    }\n\n    /** Gets the transition to use for a certain anchor */\n    public getTransitionName(el: HTMLAnchorElement): string | null {\n        if (!el || !el.getAttribute) return null;\n        let transitionAttr = el.getAttribute(\n            getConfig(this.config, \"transitionAttr\", false)\n        );\n\n        if (typeof transitionAttr === \"string\") return transitionAttr;\n        return null;\n    }\n\n    /** Checks to see if the anchor is valid */\n    public validLink(\n        el: HTMLAnchorElement,\n        event: LinkEvent | KeyboardEvent,\n        href: string\n    ): boolean {\n        let pushStateSupport = !window.history.pushState;\n        let exists = !el || !href;\n        let eventMutate =\n            (event as KeyboardEvent).metaKey ||\n            (event as KeyboardEvent).ctrlKey ||\n            (event as KeyboardEvent).shiftKey ||\n            (event as KeyboardEvent).altKey;\n        let newTab =\n            el.hasAttribute(\"target\") &&\n            (el as HTMLAnchorElement).target === \"_blank\";\n        let crossOrigin =\n            (el as HTMLAnchorElement).protocol !== location.protocol ||\n            (el as HTMLAnchorElement).hostname !== location.hostname;\n        let download = typeof el.getAttribute(\"download\") === \"string\";\n        let preventSelf = el.matches(getConfig(this.config, \"preventSelfAttr\"));\n        let preventAll = Boolean(\n            el.closest(getConfig(this.config, \"preventAllAttr\"))\n        );\n        let sameURL = getHashedPath(newURL()) === getHashedPath(newURL(href));\n        return !(\n            exists ||\n            pushStateSupport ||\n            eventMutate ||\n            newTab ||\n            crossOrigin ||\n            download ||\n            preventSelf ||\n            preventAll ||\n            sameURL\n        );\n    }\n\n    /** Returns the href of an Anchor element */\n    public getHref(el: HTMLAnchorElement): string | null {\n        if (\n            el &&\n            el.tagName &&\n            el.tagName.toLowerCase() === \"a\" &&\n            typeof el.href === \"string\"\n        )\n            return el.href;\n        return null;\n    }\n\n    /** Check if event target is a valid anchor with an href, if so, return the anchor */\n    public getLink(event: LinkEvent): HTMLAnchorElement {\n        let el = event.target as HTMLAnchorElement;\n        let href: string = this.getHref(el);\n\n        while (el && !href) {\n            el = (el as HTMLElement).parentNode as HTMLAnchorElement;\n            href = this.getHref(el);\n        }\n\n        // Check for a valid link\n        if (!el || !this.validLink(el, event, href)) return;\n        return el;\n    }\n\n    /** When an element is clicked, get valid anchor element, go for a transition */\n    public onClick(event: LinkEvent) {\n        let el = this.getLink(event);\n        if (!el) return;\n\n        if (this.isTransitioning && this.stopOnTransitioning) {\n            event.preventDefault();\n            event.stopPropagation();\n            return;\n        }\n\n        let href = this.getHref(el);\n        this.emitter.emit(\"ANCHOR_CLICK CLICK\", event);\n        this.go({ href, trigger: el, event });\n    }\n\n    /** Returns the direction of the State change as a String, either the Back button or the Forward button */\n    public getDirection(value: number): Trigger {\n        if (Math.abs(value) > 1) {\n            // Ex 6-0 > 0 -> forward, 0-6 < 0 -> back\n            return value > 0 ? \"forward\" : \"back\";\n        } else {\n            if (value === 0) {\n                return \"popstate\";\n            } else {\n                // Ex 6-5 > 0 -> back, 5-6 < 0 -> forward\n                return value > 0 ? \"back\" : \"forward\";\n            }\n        }\n    }\n\n    /** Force a page to go to a certain URL */\n    public force(href: string): void {\n        window.location.assign(href);\n    }\n\n    /**\n     * If transition is running force load page.\n     * Stop if currentURL is the same as new url.\n     * On state change, change the current state history, to reflect the direction of said state change\n     * Load page and page transition.\n     */\n    public go({\n        href,\n        trigger = \"HistoryManager\",\n        event,\n    }: {\n        href: string;\n        trigger?: Trigger;\n        event?: StateEvent;\n    }): Promise<void> {\n        // If transition is already running and the go method is called again, force load page\n        if (this.isTransitioning && this.stopOnTransitioning ||\n            !(this.manager.has(\"TransitionManager\") &&\n                this.manager.has(\"HistoryManager\") &&\n                this.manager.has(\"PageManager\"))) {\n            this.force(href);\n            return;\n        }\n\n        const history = this.manager.get(\"HistoryManager\") as IHistoryManager;\n        let scroll = newCoords(0, 0);\n        let currentState = history.current;\n        let currentURL = currentState.url;\n        if (equal(currentURL, href)) {\n            return;\n        }\n\n        let transitionName: string;\n        if (event && (event as PopStateEvent).state) {\n            this.emitter.emit(\"POPSTATE\", event);\n\n            // If popstate, get back/forward direction.\n            let { state }: { state: IHistoryItem } = event as PopStateEvent;\n            let { index } = state;\n            let currentIndex = currentState.index;\n            let difference = currentIndex - index;\n\n            let _state = history.get(history.pointer);\n            transitionName = _state.transition;\n            scroll = _state.data.scroll;\n\n            history.replace(state.states);\n            history.pointer = index;\n\n            trigger = this.getDirection(difference);\n\n            // Based on the direction of the state change either remove or add a state\n            this.emitter.emit(trigger === \"back\" ? `POPSTATE_BACK` : `POPSTATE_FORWARD`, event);\n        } else {\n            // Add new state\n            transitionName = this.getTransitionName(trigger as HTMLAnchorElement);\n\n            scroll = newCoords();\n            let state = newState({\n                url: href,\n                transition: transitionName,\n                data: { scroll },\n            });\n\n            !this.stickyScroll && (scroll = newCoords(0, 0));\n\n            history.add(state);\n            this.emitter.emit(\"HISTORY_NEW_ITEM\", event);\n        }\n\n        if (event) {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n        this.emitter.emit(\"GO\", event);\n        return this.load({\n            oldHref: currentURL,\n            href,\n            trigger,\n            transitionName,\n            scroll,\n        });\n    }\n\n    /** Load the new Page as well as a Transition; starts the Transition */\n    public async load({\n        oldHref,\n        href,\n        trigger,\n        transitionName = \"default\",\n        scroll = { x: 0, y: 0 },\n    }: {\n        oldHref: string;\n        href: string;\n        trigger: Trigger;\n        transitionName?: string;\n        scroll: { x: number; y: number };\n    }): Promise<any> {\n        try {\n            const pages = this.manager.get(\"PageManager\") as IPageManager;\n            let newPage: IPage, oldPage: IPage;\n\n            this.emitter.emit(\"NAVIGATION_START\", {\n                oldHref,\n                href,\n                trigger,\n                transitionName,\n            });\n\n            // Load & Build both the old and new pages\n            try {\n                this.transitionStart();\n                oldPage = await pages.load(oldHref);\n                !(oldPage.dom instanceof Element) && oldPage.build();\n\n                this.emitter.emit(\"PAGE_LOADING\", { href, oldPage, trigger });\n                newPage = await pages.load(href);\n                await newPage.build();\n                this.emitter.emit(\"PAGE_LOAD_COMPLETE\", {\n                    newPage,\n                    oldPage,\n                    trigger,\n                });\n            } catch (err) {\n                throw `[PJAX] page load error: ${err}`;\n            }\n\n            // --\n            // --\n\n            // Start Transition\n            try {\n                const TransitionManager = this.manager.get(\"TransitionManager\") as ITransitionManager;\n                this.emitter.emit(\"TRANSITION_START\", transitionName);\n\n                let transition = await TransitionManager.animate(TransitionManager.has(transitionName) ? transitionName : \"default\", {\n                    oldPage,\n                    newPage,\n                    trigger,\n                    scroll,\n                    ignoreHashAction: this.ignoreHashAction\n                });\n\n                if (!transition.scrollable) {\n                    if (!this.ignoreHashAction && !/back|popstate|forward/.test(trigger as string)) scroll = hashAction(scroll);\n                    window.scroll(scroll.x, scroll.y);\n                }\n\n                this.emitter.emit(\"TRANSITION_END\", { transition });\n            } catch (err) {\n                throw `[PJAX] transition error: ${err}`;\n            }\n\n            this.emitter.emit(\"NAVIGATION_END\", {\n                oldPage,\n                newPage,\n                trigger,\n                transitionName,\n            });\n        } catch (err) {\n            if (this.forceOnError) this.force(href);\n            else console.warn(err);\n        } finally {\n            this.transitionStop(); // Sets isTransitioning to false\n        }\n    }\n\n    /** Check to see if the URL is to be ignored, uses either RegExp of Strings to check */\n    public ignoredURL({ pathname }: URL): boolean {\n        return (\n            this.ignoreURLs.length &&\n            this.ignoreURLs.some((url) => {\n                return typeof url === \"string\"\n                    ? url === pathname\n                    : (url as RegExp).exec(pathname) !== null;\n            })\n        );\n    }\n\n    /** When you hover over an anchor, prefetch the event target's href */\n    public onHover(event: LinkEvent): Promise<void> {\n        let el = this.getLink(event);\n        if (!el || !this.manager.has(\"PageManager\")) return;\n\n        const pages = this.manager.get(\"PageManager\") as IPageManager;\n        let url = newURL(this.getHref(el));\n        let urlString: string = url.pathname;\n\n        // If Url is ignored or already in cache, don't do any think\n        if (this.ignoredURL(url) || pages.has(urlString)) return;\n        this.emitter.emit(\"ANCHOR_HOVER HOVER\", event);\n\n        try {\n            pages.load(url);\n        } catch (err) {\n            console.warn(\"[PJAX] prefetch error,\", err);\n        }\n    }\n\n    /** When History state changes, get url from State, go for a Transition. */\n    public onStateChange(event: PopStateEvent): void {\n        this.go({ href: window.location.href, trigger: \"popstate\", event });\n    }\n\n    /** Initialize DOM Events */\n    public initEvents() {\n        if (this.prefetchIgnore !== true) {\n            document.addEventListener(\"mouseover\", this.onHover);\n            document.addEventListener(\"touchstart\", this.onHover);\n        }\n\n        document.addEventListener(\"click\", this.onClick);\n        window.addEventListener(\"popstate\", this.onStateChange);\n    }\n\n    /** Stop DOM Events */\n    public stopEvents() {\n        if (this.prefetchIgnore !== true) {\n            document.removeEventListener(\"mouseover\", this.onHover);\n            document.removeEventListener(\"touchstart\", this.onHover);\n        }\n\n        document.removeEventListener(\"click\", this.onClick);\n        window.removeEventListener(\"popstate\", this.onStateChange);\n    }\n}\n", "import { Service } from \"./service\";\nimport { Manager } from \"./manager\";\nimport { newURL, getHashedPath } from \"./url\";\nimport { IHistoryManager } from \"./history\";\n\nexport type RouteMethod = (...args: any) => any;\nexport type RouteStyle = string | RegExp | boolean;\nexport interface IRouteToFrom {\n    to: RouteStyle,\n    from: RouteStyle\n}\nexport type RoutePath = IRouteToFrom | RouteStyle;\nexport interface IRoute {\n    path: RoutePath,\n    method: RouteMethod\n}\n\n/** Controls what happens when certain url paths match a set of criteria */\nexport class Router extends Service {\n    /** List of routes */\n    protected routes: Manager<IRouteToFrom, RouteMethod>;\n    constructor(routes: IRoute[] = []) {\n        super();\n        this.routes = new Manager();\n        for (let route of routes) {\n            this.add(route);\n        }\n    }\n\n    /** Add a new route to watch for */\n    public add({ path, method }: IRoute): Router {\n        let key = this.parse(path);\n        this.routes.set(key, method);\n        return this;\n    }\n\n    /** Convert strings into path match functions */\n    public parsePath(path: RouteStyle): RegExp | boolean {\n        if (typeof path === \"string\") return new RegExp(path, \"i\");\n        else if (path instanceof RegExp || typeof path === \"boolean\")\n            return path;\n        throw \"[Router] only regular expressions, strings and booleans are accepted as paths.\";\n    }\n\n    /** Determines if a strings counts has a path */\n    public isPath(input: RouteStyle): boolean {\n        return (\n            typeof input === \"string\" ||\n            input instanceof RegExp ||\n            typeof input === \"boolean\"\n        );\n    }\n\n    /** Parse the multiple different formats for paths, into a { from, to } object */\n    public parse(input: RoutePath): IRouteToFrom {\n        let route = input as IRouteToFrom;\n        let toFromPath: IRouteToFrom = {\n            from: /(.*)/g,\n            to: /(.*)/g,\n        };\n\n        if (this.isPath(input as RouteStyle))\n            toFromPath = {\n                from: true,\n                to: input as RouteStyle,\n            };\n        else if (this.isPath(route.from) && this.isPath(route.to as RouteStyle))\n            toFromPath = route;\n        else\n            throw \"[Router] path is neither a string, regular expression, or a { from, to } object.\";\n\n        let { from, to } = toFromPath;\n        return {\n            from: this.parsePath(from),\n            to: this.parsePath(to),\n        };\n    }\n\n    /** Test if route paths are true, if so run their methods */\n    public route() {\n        if (this.manager.has(\"HistoryManager\")) {\n            let history = this.manager.get(\"HistoryManager\") as IHistoryManager;\n            let from: string = getHashedPath(newURL((history.length > 1 ? history.previous : history.current).url));\n            let to: string = getHashedPath(newURL());\n\n            this.routes.forEach((method: RouteMethod, path: IRouteToFrom) => {\n                let fromRegExp = path.from as RegExp | boolean;\n                let toRegExp = path.to as RegExp | boolean;\n\n                if (\n                    typeof fromRegExp === \"boolean\" &&\n                    typeof toRegExp === \"boolean\"\n                ) {\n                    throw `[Router] path ({ from: ${fromRegExp}, to: ${toRegExp} }) is not valid, remember paths can only be strings, regular expressions, or a boolean; however, both the from and to paths cannot be both booleans.`;\n                }\n\n                let fromParam: RegExpExecArray | RegExp | boolean = fromRegExp;\n                let toParam: RegExpExecArray | RegExp | boolean = toRegExp;\n\n                if (fromRegExp instanceof RegExp && fromRegExp.test(from))\n                    fromParam = fromRegExp.exec(from);\n                if (toRegExp instanceof RegExp && toRegExp.test(to))\n                    toParam = toRegExp.exec(to);\n\n                if (\n                    (Array.isArray(toParam) && Array.isArray(fromParam)) ||\n                    (Array.isArray(toParam) &&\n                        typeof fromParam == \"boolean\" &&\n                        fromParam) ||\n                    (Array.isArray(fromParam) &&\n                        typeof toParam == \"boolean\" &&\n                        toParam)\n                )\n                    method({ from: fromParam, to: toParam, path: { from, to } });\n            });\n        } else {\n            console.warn(\"[Route] HistoryManager is missing.\");\n        }\n    }\n\n    /** Add listeners for PJAX Events */\n    public initEvents() {\n        this.emitter.on(\"READY\", this.route, this);\n        this.emitter.on(\"CONTENT_REPLACED\", this.route, this);\n    }\n\n    /** Remove listeners for PJAX Events */\n    public stopEvents() {\n        this.emitter.off(\"READY\", this.route, this);\n        this.emitter.off(\"CONTENT_REPLACED\", this.route, this);\n    }\n}\n", "import { EventEmitter, EventInput, ListenerCallback } from \"@okikio/emitter\";\nimport { Manager } from \"@okikio/manager\";\n\n// DOM\nexport type AnimationTarget = string | Node | NodeList | HTMLCollection | HTMLElement[] | AnimationTarget[];\nexport const getElements = (selector: string | Node): Node[] => {\n    return typeof selector === \"string\" ? Array.from(document.querySelectorAll(selector as string)) : [selector];\n};\n\nconst flatten = (arr: AnimationTarget[]) => [].concat(...arr);\nexport const getTargets = (targets: AnimationTarget): Node[] => {\n    if (Array.isArray(targets)) {\n        return flatten((targets as AnimationTarget[]).map(getTargets));\n    }\n    if (typeof targets == \"string\" || targets instanceof Node)\n        return getElements(targets);\n    if (targets instanceof NodeList || targets instanceof HTMLCollection)\n        return Array.from(targets);\n    return [];\n};\n\n// VALUES\nexport type closureArgs = [number, number, HTMLElement];\nexport type closure = ((index?: number, total?: number, element?: HTMLElement) => (genericTypes[] | void)) | any;\nexport const computeValue = (value: closure, args: closureArgs, context: Animate) => {\n    if (typeof value === \"function\") {\n        return value.apply(context, args);\n    } else { return value; }\n};\n\nexport const mapObject = (obj: object, args: closureArgs, options: Animate): any => {\n    let key: string, value: any, result = {};\n    let keys = Object.keys(obj);\n    for (let i = 0, len = keys.length; i < len; i++) {\n        key = keys[i];\n        value = obj[key];\n        result[key] = computeValue(value, args, options);\n    }\n\n    return result;\n};\n\n/** From: [https://easings.net] */\nexport const easings = {\n    \"in\": \"ease-in\",\n    \"out\": \"ease-out\",\n    \"in-out\": \"ease-in-out\",\n\n    // Sine\n    \"in-sine\": \"cubic-bezier(0.47, 0, 0.745, 0.715)\",\n    \"out-sine\": \"cubic-bezier(0.39, 0.575, 0.565, 1)\",\n    \"in-out-sine\": \"cubic-bezier(0.445, 0.05, 0.55, 0.95)\",\n\n    // Quad\n    \"in-quad\": \"cubic-bezier(0.55, 0.085, 0.68, 0.53)\",\n    \"out-quad\": \"cubic-bezier(0.25, 0.46, 0.45, 0.94)\",\n    \"in-out-quad\": \"cubic-bezier(0.455, 0.03, 0.515, 0.955)\",\n\n    // Cubic\n    \"in-cubic\": \"cubic-bezier(0.55, 0.055, 0.675, 0.19)\",\n    \"out-cubic\": \"cubic-bezier(0.215, 0.61, 0.355, 1)\",\n    \"in-out-cubic\": \"cubic-bezier(0.645, 0.045, 0.355, 1)\",\n\n    // Quart\n    \"in-quart\": \"cubic-bezier(0.895, 0.03, 0.685, 0.22)\",\n    \"out-quart\": \"cubic-bezier(0.165, 0.84, 0.44, 1)\",\n    \"in-out-quart\": \"cubic-bezier(0.77, 0, 0.175, 1)\",\n\n    // Quint\n    \"in-quint\": \"cubic-bezier(0.755, 0.05, 0.855, 0.06)\",\n    \"out-quint\": \"cubic-bezier(0.23, 1, 0.32, 1)\",\n    \"in-out-quint\": \"cubic-bezier(0.86, 0, 0.07, 1)\",\n\n    // Expo\n    \"in-expo\": \"cubic-bezier(0.95, 0.05, 0.795, 0.035)\",\n    \"out-expo\": \"cubic-bezier(0.19, 1, 0.22, 1)\",\n    \"in-out-expo\": \"cubic-bezier(1, 0, 0, 1)\",\n\n    // Circ\n    \"in-circ\": \"cubic-bezier(0.6, 0.04, 0.98, 0.335)\",\n    \"out-circ\": \"cubic-bezier(0.075, 0.82, 0.165, 1)\",\n    \"in-out-circ\": \"cubic-bezier(0.785, 0.135, 0.15, 0.86)\",\n\n    // Back\n    \"in-back\": \"cubic-bezier(0.6, -0.28, 0.735, 0.045)\",\n    \"out-back\": \"cubic-bezier(0.175, 0.885, 0.32, 1.275)\",\n    \"in-out-back\": \"cubic-bezier(0.68, -0.55, 0.265, 1.55)\"\n};\n\nexport const getEase = (ease: string) => {\n    return /^(in|out)/.test(ease) ? easings[ease] : ease;\n};\n\nexport type genericTypes = genericTypes[] | boolean | object | string | number | closure | null | undefined;\nexport interface AnimationOptions {\n    target?: AnimationTarget,\n\n    speed?: number,\n    autoplay?: boolean,\n    options?: AnimationOptions,\n    delay?: number | closure,\n    easing?: string | closure,\n    endDelay?: number | closure,\n    duration?: number | closure,\n    keyframes?: Keyframe[] | object[] | closure,\n    loop?: number | boolean | closure, // iterations: number,\n    onfinish?: (element?: HTMLElement, index?: number, total?: number, animation?: Animation) => any,\n    fillMode?: \"none\" | \"forwards\" | \"backwards\" | \"both\" | \"auto\" | closure,\n    direction?: \"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\" | closure,\n    extend?: EffectTiming,\n    [property: string]: genericTypes;\n};\n\nexport const DefaultAnimationOptions: AnimationOptions = {\n    keyframes: [],\n\n    loop: 1, // iterations: number,\n    delay: 0,\n    speed: 1,\n    endDelay: 0,\n    easing: \"ease\",\n    autoplay: true,\n    duration: 1000,\n    fillMode: \"auto\",\n    direction: \"normal\",\n    extend: {}\n};\n\nexport type AnimationEvents = \"update\" | \"play\" | \"pause\" | \"start\" | \"begin\" | \"complete\" | \"finish\" | \"error\" | \"stop\";\n\n/** You can check it out here: https://codepen.io/okikio/pen/qBbdGaW?editors=0011 */\nexport class Animate {\n    /**\n     * Stores the options for the current animation\n     */\n    public options: AnimationOptions = {};\n\n    /**\n     * The Array of Elements to Animate\n     */\n    public targets: Node[] = [];\n\n    /**\n     * The properties to animate\n     */\n    public properties: object = {};\n\n    /**\n     * A Manager of Animations\n     */\n    public animations: Manager<HTMLElement, Animation> = new Manager();\n\n    /**\n     * The total duration of all Animation's\n     */\n    public totalDuration: number = 0;\n\n    /**\n     * The smallest delay out of all Animation's\n     */\n    public minDelay: number = 0;\n\n    /**\n     * The options for individual animations\n     */\n    public computedOptions: Manager<Animation, AnimationOptions> = new Manager();\n\n    /**\n     * The Element the main animation uses\n     */\n    public mainElement: HTMLElement;\n\n    /**\n     * Stores an animation that runs on the total duration of the all other Animations, and as such it's the main Animation\n     */\n    public mainAnimation: Animation;\n\n    /**\n     * Stores request frame calls\n     */\n    public animationFrame: number;\n\n    /**\n     * An event emitter\n     */\n    public emitter: EventEmitter = new EventEmitter();\n\n    /**\n     * Returns a promise that is fulfilled when the mainAnimation is finished\n     */\n    public promise: Promise<AnimationOptions>;\n    constructor(options: AnimationOptions = {}) {\n        try {\n            let { options: animation, ...rest } = options;\n            let oldOptions = animation instanceof Animate ? animation.getOptions() : (Array.isArray(animation) ? animation?.[0]?.getOptions() : animation);\n            this.options = Object.assign({}, DefaultAnimationOptions, oldOptions, rest);\n            this.loop = this.loop.bind(this);\n\n            let {\n                loop,\n                delay,\n                speed,\n                easing,\n                endDelay,\n                duration,\n                direction,\n                fillMode,\n                onfinish,\n                target,\n                keyframes,\n                autoplay,\n                extend,\n                ...properties\n            } = this.options;\n\n            this.mainElement = document.createElement(\"div\");\n            this.targets = getTargets(target);\n            this.properties = properties;\n\n            let delays = [];\n            let len = this.targets.length;\n            let animationKeyframe: Keyframe[] | PropertyIndexedKeyframes;\n            for (let i = 0; i < len; i++) {\n                let target = this.targets[i] as HTMLElement;\n                let animationOptions: AnimationOptions = {\n                    easing: typeof easing == \"string\" ? getEase(easing) : easing,\n                    iterations: loop === true ? Infinity : (loop as number),\n                    direction,\n                    endDelay,\n                    duration,\n                    delay,\n                    fill: fillMode,\n                    ...extend\n                };\n\n                // Accept keyframes as a keyframes Object, or a method,\n                // if there are no animations in the keyframes array,\n                // uses css properties from the options object\n                let arrKeyframes = computeValue((keyframes as Keyframe[]), [i, len, target], this);\n                animationKeyframe = arrKeyframes.length ? arrKeyframes :\n                    (this.properties as PropertyIndexedKeyframes);\n\n                // Allows the use of functions as the values, for both the keyframes and the animation object\n                // It adds the capability of advanced stagger animation, similar to the anime js stagger functions\n                animationOptions = mapObject(animationOptions, [i, len, target], this);\n                if (!(arrKeyframes.length > 0))\n                    animationKeyframe = mapObject(animationKeyframe, [i, len, target], this);\n\n                // Set the Animate classes duration to be the Animation with the largest totalDuration\n                let tempDurations = animationOptions.delay +\n                    (animationOptions.duration * animationOptions.iterations) +\n                    animationOptions.endDelay;\n                if (this.totalDuration < tempDurations) this.totalDuration = tempDurations;\n\n                // Add animation to the Animations Set\n                let animation = target.animate(animationKeyframe, animationOptions as KeyframeAnimationOptions);\n\n                // Support for on finish\n                animation.onfinish = () => {\n                    typeof onfinish == \"function\" && onfinish.call(this, target, i, len, animation);\n                    this.emit(\"finish\", target, i, len, animation);\n                };\n\n                // The calculated options for each individual option\n                this.computedOptions.set(animation, animationOptions);\n                this.animations.set(target, animation);\n                delays.push(animationOptions.delay);\n            }\n\n            this.mainAnimation = this.mainElement.animate([\n                { opacity: \"0\" },\n                { opacity: \"1\" }\n            ], {\n                // Why waste performance on an animation no one can see?\n                duration: this.totalDuration,\n                easing: \"linear\"\n            });\n\n            this.minDelay = Math.min(...delays);\n            this.setSpeed(speed);\n            if (autoplay) this.play();\n            else this.pause();\n\n            this.promise = this.newPromise();\n            this.mainAnimation.onfinish = () => {\n                this.emit(\"complete\", this);\n                this.stopLoop();\n            };\n        } catch (err) {\n            this.emit(\"error\", err);\n        }\n    }\n\n    /**\n     * Returns a new Promise that is resolve when this.finish is called\n     */\n    public newPromise(): Promise<AnimationOptions> {\n        return new Promise((resolve, reject) => {\n            /*\n                Note that the `this` keyword is in an Array when it is resolved,\n                this is due to Promises not wanting to resolve references,\n                so, you can't resolve `this` directly, so, I chose to resolve `this` in an\n                Array\n            */\n            this.on(\"complete\", () => resolve([this]));\n            this.on(\"error\", err => reject(err));\n        });\n    }\n\n    /**\n     * Fulfills the this.promise Promise\n     */\n    public then(\n        onFulfilled?: (value?: any) => any,\n        onRejected?: (reason?: any) => any\n    ): Animate {\n        onFulfilled = onFulfilled?.bind(this);\n        onRejected = onRejected?.bind(this);\n        this.promise.then(onFulfilled, onRejected);\n        return this;\n    }\n\n    /**\n     * Catches error that occur in the this.promise Promise\n     */\n    public catch(onRejected: (reason?: any) => any): Animate {\n        onRejected = onRejected?.bind(this);\n        this.promise.catch(onRejected);\n        return this;\n    }\n\n    /**\n     * If you don't care if the this.promise Promise has either been rejected or resolved\n     */\n    public finally(onFinally: () => any): Animate {\n        onFinally = onFinally?.bind(this);\n        this.promise.finally(onFinally);\n        return this;\n    }\n\n    /**\n     * Represents an Animation Frame Loop\n     */\n    public loop(): void {\n        this.stopLoop();\n        this.emit(\"update\", this.getProgress(), this);\n        this.animationFrame = window.requestAnimationFrame(this.loop);\n    }\n\n    /**\n     * Cancels animation frame\n     */\n    public stopLoop() {\n        window.cancelAnimationFrame(this.animationFrame);\n    }\n\n    /**\n     * Calls a method that affects all animations including the mainAnimation; the method only allows the animation parameter\n    */\n    public all(method: (animation: Animation) => void) {\n        method(this.mainAnimation);\n        this.animations.forEach(animation => method(animation));\n        return this;\n    }\n\n    /**\n     * Register the begin event\n     */\n    protected beginEvent() {\n        if (this.getProgress() == 0) {\n            let timer: number | void = window.setTimeout(() => {\n                this.emit(\"begin\", this);\n                timer = window.clearTimeout(timer as number);\n            }, this.minDelay);\n        }\n    }\n\n    /**\n     * Play Animation\n     */\n    public play(): Animate {\n        let playstate = this.getPlayState();\n        this.beginEvent();\n        this.all(anim => anim.play());\n        this.emit(\"play\", playstate, this);\n        this.loop();\n        return this;\n    }\n\n    /**\n     * Pause Animation\n     */\n    public pause(): Animate {\n        let playstate = this.getPlayState();\n        this.all(anim => anim.pause());\n        this.emit(\"pause\", playstate, this);\n        this.stopLoop();\n        this.animationFrame = undefined;\n        return this;\n    }\n\n    /**\n     * Reset all Animations\n     */\n    public reset() {\n        this.setProgress(0);\n        this.beginEvent();\n\n        if (this.options.autoplay) this.play();\n        else this.pause();\n        return this;\n    }\n\n    /**\n     * Cancels all Animations\n     */\n    public cancel() {\n        this.all(anim => anim.cancel());\n        this.stopLoop();\n        return this;\n    }\n\n    /**\n     * Force complete all Animations\n     */\n    public finish() {\n        this.all(anim => anim.finish());\n        this.stopLoop();\n        return this;\n    }\n\n    /**\n     * Cancels & Clears all Animations\n     */\n    public stop() {\n        this.cancel();\n        this.animations.clear();\n        while (this.targets.length) this.targets.pop();\n        this.mainElement = undefined;\n        this.emit(\"stop\");\n    }\n\n    /**\n     * Returns an Array of targets\n     */\n    public getTargets(): Node[] {\n        return this.targets;\n    }\n\n    /**\n     * Get a specific Animation from an Animate instance\n     */\n    public getAnimation(element: HTMLElement): Animation {\n        return this.animations.get(element);\n    }\n\n    /**\n     * Returns the timings of an Animation, given a target\n     * E.g. { duration, endDelay, delay, iterations, iterationStart, direction, easing, fill, etc... }\n     */\n    public getTiming(target: HTMLElement | Animation): AnimationOptions & EffectTiming {\n        let animation = target instanceof Animation ? target : this.getAnimation(target);\n        let keyframeOptions = this.computedOptions.get(animation) ?? {};\n        let timings = animation.effect?.getTiming() ?? {};\n        let options = this.getOptions();\n\n        return { ...DefaultAnimationOptions, ...options, ...timings, ...keyframeOptions };\n    }\n\n    /**\n     * Returns the total duration of Animation\n     */\n    public getTotalDuration(): number {\n        return this.totalDuration;\n    }\n\n    /**\n     * Returns the current time of the Main Animation\n     */\n    public getCurrentTime(): number {\n        return this.mainAnimation.currentTime;\n    }\n\n    /**\n     * Returns the Animation progress as a fraction of the current time / duration * 100\n     */\n    public getProgress() {\n        return (this.getCurrentTime() / this.totalDuration) * 100;\n    }\n\n    /**\n     * Return the playback speed of the animation\n     */\n    public getSpeed(): number {\n        return this.mainAnimation.playbackRate;\n    }\n\n    /**\n     * Returns the current playing state\n     */\n    public getPlayState(): \"idle\" | \"running\" | \"paused\" | \"finished\" {\n        return this.mainAnimation.playState;\n    }\n\n    /**\n     * Get the options of an Animate instance\n     */\n    public getOptions(): AnimationOptions {\n        return this.options;\n    }\n\n    /**\n     * Set the current time of the Main Animation\n     */\n    public setCurrentTime(time: number): Animate {\n        this.all(anim => { anim.currentTime = time; });\n        this.emit(\"update\", this.getProgress());\n        return this;\n    }\n\n    /**\n     * Set the Animation progress as a value from 0 to 100\n     */\n    public setProgress(percent: number): Animate {\n        let time = (percent / 100) * this.totalDuration;\n        this.setCurrentTime(time);\n        return this;\n    }\n\n    /**\n     * Set the playback speed of an Animation\n     */\n    public setSpeed(speed: number = 1): Animate {\n        this.all(anim => { anim.playbackRate = speed; });\n        return this;\n    }\n\n    /**\n     * Adds a listener for a given event\n     */\n    public on(events: AnimationEvents | EventInput, callback?: ListenerCallback, scope?: object): Animate {\n        this.emitter.on(events, callback, scope ?? this);\n        return this;\n    }\n\n    /**\n     * Removes a listener from an event\n     */\n    public off(events: AnimationEvents | EventInput, callback?: ListenerCallback, scope?: object): Animate {\n        this.emitter.off(events, callback, scope ?? this);\n        return this;\n    }\n\n    /**\n     * Call all listeners within an event\n     */\n    public emit(events: AnimationEvents | string | any[], ...args: any): Animate {\n        this.emitter.emit(events, ...args);\n        return this;\n    }\n\n\n    /** Returns the Animate options, as JSON  */\n    public toJSON(): AnimationOptions {\n        return this.getOptions();\n    }\n\n    /**\n     * The Symbol.toStringTag well-known symbol is a string valued property that is used\n     * in the creation of the default string description of an object.\n     * It is accessed internally by the Object.prototype.toString() method.\n     */\n    get [Symbol.toStringTag]() {\n        return `Animate`;\n    }\n}\n\n/** Creates a new Animate instance */\nexport const animate = (options: AnimationOptions = {}): Animate => {\n    return new Animate(options);\n};\n\nexport default animate;"],
  "mappings": "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",
  "names": []
}
